var OC=Object.defineProperty;var xC=(I,g,A)=>g in I?OC(I,g,{enumerable:!0,configurable:!0,writable:!0,value:A}):I[g]=A;var sg=(I,g,A)=>(xC(I,typeof g!="symbol"?g+"":g,A),A),vg=(I,g,A)=>{if(!g.has(I))throw TypeError("Cannot "+A)};var V=(I,g,A)=>(vg(I,g,"read from private field"),A?A.call(I):g.get(I)),DI=(I,g,A)=>{if(g.has(I))throw TypeError("Cannot add the same private member more than once");g instanceof WeakSet?g.add(I):g.set(I,A)},OI=(I,g,A,C)=>(vg(I,g,"write to private field"),C?C.call(I,A):g.set(I,A),A),Lg=(I,g,A,C)=>({set _(l){OI(I,g,l,A)},get _(){return V(I,g,C)}}),tI=(I,g,A)=>(vg(I,g,"access private method"),A);(function(){const g=document.createElement("link").relList;if(g&&g.supports&&g.supports("modulepreload"))return;for(const l of document.querySelectorAll('link[rel="modulepreload"]'))C(l);new MutationObserver(l=>{for(const G of l)if(G.type==="childList")for(const B of G.addedNodes)B.tagName==="LINK"&&B.rel==="modulepreload"&&C(B)}).observe(document,{childList:!0,subtree:!0});function A(l){const G={};return l.integrity&&(G.integrity=l.integrity),l.referrerPolicy&&(G.referrerPolicy=l.referrerPolicy),l.crossOrigin==="use-credentials"?G.credentials="include":l.crossOrigin==="anonymous"?G.credentials="omit":G.credentials="same-origin",G}function C(l){if(l.ep)return;l.ep=!0;const G=A(l);fetch(l.href,G)}})();function makeMap(I,g){const A=Object.create(null),C=I.split(",");for(let l=0;l<C.length;l++)A[C[l]]=!0;return g?l=>!!A[l.toLowerCase()]:l=>!!A[l]}const EMPTY_OBJ={},EMPTY_ARR=[],NOOP=()=>{},NO=()=>!1,onRE=/^on[^a-z]/,isOn=I=>onRE.test(I),isModelListener=I=>I.startsWith("onUpdate:"),extend=Object.assign,remove=(I,g)=>{const A=I.indexOf(g);A>-1&&I.splice(A,1)},hasOwnProperty$1=Object.prototype.hasOwnProperty,hasOwn=(I,g)=>hasOwnProperty$1.call(I,g),isArray=Array.isArray,isMap=I=>toTypeString(I)==="[object Map]",isSet=I=>toTypeString(I)==="[object Set]",isFunction=I=>typeof I=="function",isString=I=>typeof I=="string",isSymbol=I=>typeof I=="symbol",isObject=I=>I!==null&&typeof I=="object",isPromise=I=>isObject(I)&&isFunction(I.then)&&isFunction(I.catch),objectToString=Object.prototype.toString,toTypeString=I=>objectToString.call(I),toRawType=I=>toTypeString(I).slice(8,-1),isPlainObject=I=>toTypeString(I)==="[object Object]",isIntegerKey=I=>isString(I)&&I!=="NaN"&&I[0]!=="-"&&""+parseInt(I,10)===I,isReservedProp=makeMap(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),cacheStringFunction=I=>{const g=Object.create(null);return A=>g[A]||(g[A]=I(A))},camelizeRE=/-(\w)/g,camelize=cacheStringFunction(I=>I.replace(camelizeRE,(g,A)=>A?A.toUpperCase():"")),hyphenateRE=/\B([A-Z])/g,hyphenate=cacheStringFunction(I=>I.replace(hyphenateRE,"-$1").toLowerCase()),capitalize=cacheStringFunction(I=>I.charAt(0).toUpperCase()+I.slice(1)),toHandlerKey=cacheStringFunction(I=>I?`on${capitalize(I)}`:""),hasChanged=(I,g)=>!Object.is(I,g),invokeArrayFns=(I,g)=>{for(let A=0;A<I.length;A++)I[A](g)},def=(I,g,A)=>{Object.defineProperty(I,g,{configurable:!0,enumerable:!1,value:A})},looseToNumber=I=>{const g=parseFloat(I);return isNaN(g)?I:g};let _globalThis;const getGlobalThis=()=>_globalThis||(_globalThis=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function normalizeStyle(I){if(isArray(I)){const g={};for(let A=0;A<I.length;A++){const C=I[A],l=isString(C)?parseStringStyle(C):normalizeStyle(C);if(l)for(const G in l)g[G]=l[G]}return g}else{if(isString(I))return I;if(isObject(I))return I}}const listDelimiterRE=/;(?![^(]*\))/g,propertyDelimiterRE=/:([^]+)/,styleCommentRE=/\/\*[^]*?\*\//g;function parseStringStyle(I){const g={};return I.replace(styleCommentRE,"").split(listDelimiterRE).forEach(A=>{if(A){const C=A.split(propertyDelimiterRE);C.length>1&&(g[C[0].trim()]=C[1].trim())}}),g}function normalizeClass(I){let g="";if(isString(I))g=I;else if(isArray(I))for(let A=0;A<I.length;A++){const C=normalizeClass(I[A]);C&&(g+=C+" ")}else if(isObject(I))for(const A in I)I[A]&&(g+=A+" ");return g.trim()}const specialBooleanAttrs="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",isSpecialBooleanAttr=makeMap(specialBooleanAttrs);function includeBooleanAttr(I){return!!I||I===""}let activeEffectScope;class EffectScope{constructor(g=!1){this.detached=g,this._active=!0,this.effects=[],this.cleanups=[],this.parent=activeEffectScope,!g&&activeEffectScope&&(this.index=(activeEffectScope.scopes||(activeEffectScope.scopes=[])).push(this)-1)}get active(){return this._active}run(g){if(this._active){const A=activeEffectScope;try{return activeEffectScope=this,g()}finally{activeEffectScope=A}}}on(){activeEffectScope=this}off(){activeEffectScope=this.parent}stop(g){if(this._active){let A,C;for(A=0,C=this.effects.length;A<C;A++)this.effects[A].stop();for(A=0,C=this.cleanups.length;A<C;A++)this.cleanups[A]();if(this.scopes)for(A=0,C=this.scopes.length;A<C;A++)this.scopes[A].stop(!0);if(!this.detached&&this.parent&&!g){const l=this.parent.scopes.pop();l&&l!==this&&(this.parent.scopes[this.index]=l,l.index=this.index)}this.parent=void 0,this._active=!1}}}function recordEffectScope(I,g=activeEffectScope){g&&g.active&&g.effects.push(I)}function getCurrentScope(){return activeEffectScope}const createDep=I=>{const g=new Set(I);return g.w=0,g.n=0,g},wasTracked=I=>(I.w&trackOpBit)>0,newTracked=I=>(I.n&trackOpBit)>0,initDepMarkers=({deps:I})=>{if(I.length)for(let g=0;g<I.length;g++)I[g].w|=trackOpBit},finalizeDepMarkers=I=>{const{deps:g}=I;if(g.length){let A=0;for(let C=0;C<g.length;C++){const l=g[C];wasTracked(l)&&!newTracked(l)?l.delete(I):g[A++]=l,l.w&=~trackOpBit,l.n&=~trackOpBit}g.length=A}},targetMap=new WeakMap;let effectTrackDepth=0,trackOpBit=1;const maxMarkerBits=30;let activeEffect;const ITERATE_KEY=Symbol(""),MAP_KEY_ITERATE_KEY=Symbol("");class ReactiveEffect{constructor(g,A=null,C){this.fn=g,this.scheduler=A,this.active=!0,this.deps=[],this.parent=void 0,recordEffectScope(this,C)}run(){if(!this.active)return this.fn();let g=activeEffect,A=shouldTrack;for(;g;){if(g===this)return;g=g.parent}try{return this.parent=activeEffect,activeEffect=this,shouldTrack=!0,trackOpBit=1<<++effectTrackDepth,effectTrackDepth<=maxMarkerBits?initDepMarkers(this):cleanupEffect(this),this.fn()}finally{effectTrackDepth<=maxMarkerBits&&finalizeDepMarkers(this),trackOpBit=1<<--effectTrackDepth,activeEffect=this.parent,shouldTrack=A,this.parent=void 0,this.deferStop&&this.stop()}}stop(){activeEffect===this?this.deferStop=!0:this.active&&(cleanupEffect(this),this.onStop&&this.onStop(),this.active=!1)}}function cleanupEffect(I){const{deps:g}=I;if(g.length){for(let A=0;A<g.length;A++)g[A].delete(I);g.length=0}}let shouldTrack=!0;const trackStack=[];function pauseTracking(){trackStack.push(shouldTrack),shouldTrack=!1}function resetTracking(){const I=trackStack.pop();shouldTrack=I===void 0?!0:I}function track(I,g,A){if(shouldTrack&&activeEffect){let C=targetMap.get(I);C||targetMap.set(I,C=new Map);let l=C.get(A);l||C.set(A,l=createDep()),trackEffects(l)}}function trackEffects(I,g){let A=!1;effectTrackDepth<=maxMarkerBits?newTracked(I)||(I.n|=trackOpBit,A=!wasTracked(I)):A=!I.has(activeEffect),A&&(I.add(activeEffect),activeEffect.deps.push(I))}function trigger(I,g,A,C,l,G){const B=targetMap.get(I);if(!B)return;let k=[];if(g==="clear")k=[...B.values()];else if(A==="length"&&isArray(I)){const n=Number(C);B.forEach((a,w)=>{(w==="length"||w>=n)&&k.push(a)})}else switch(A!==void 0&&k.push(B.get(A)),g){case"add":isArray(I)?isIntegerKey(A)&&k.push(B.get("length")):(k.push(B.get(ITERATE_KEY)),isMap(I)&&k.push(B.get(MAP_KEY_ITERATE_KEY)));break;case"delete":isArray(I)||(k.push(B.get(ITERATE_KEY)),isMap(I)&&k.push(B.get(MAP_KEY_ITERATE_KEY)));break;case"set":isMap(I)&&k.push(B.get(ITERATE_KEY));break}if(k.length===1)k[0]&&triggerEffects(k[0]);else{const n=[];for(const a of k)a&&n.push(...a);triggerEffects(createDep(n))}}function triggerEffects(I,g){const A=isArray(I)?I:[...I];for(const C of A)C.computed&&triggerEffect(C);for(const C of A)C.computed||triggerEffect(C)}function triggerEffect(I,g){(I!==activeEffect||I.allowRecurse)&&(I.scheduler?I.scheduler():I.run())}const isNonTrackableKeys=makeMap("__proto__,__v_isRef,__isVue"),builtInSymbols=new Set(Object.getOwnPropertyNames(Symbol).filter(I=>I!=="arguments"&&I!=="caller").map(I=>Symbol[I]).filter(isSymbol)),get$1=createGetter(),shallowGet=createGetter(!1,!0),readonlyGet=createGetter(!0),arrayInstrumentations=createArrayInstrumentations();function createArrayInstrumentations(){const I={};return["includes","indexOf","lastIndexOf"].forEach(g=>{I[g]=function(...A){const C=toRaw(this);for(let G=0,B=this.length;G<B;G++)track(C,"get",G+"");const l=C[g](...A);return l===-1||l===!1?C[g](...A.map(toRaw)):l}}),["push","pop","shift","unshift","splice"].forEach(g=>{I[g]=function(...A){pauseTracking();const C=toRaw(this)[g].apply(this,A);return resetTracking(),C}}),I}function hasOwnProperty(I){const g=toRaw(this);return track(g,"has",I),g.hasOwnProperty(I)}function createGetter(I=!1,g=!1){return function(C,l,G){if(l==="__v_isReactive")return!I;if(l==="__v_isReadonly")return I;if(l==="__v_isShallow")return g;if(l==="__v_raw"&&G===(I?g?shallowReadonlyMap:readonlyMap:g?shallowReactiveMap:reactiveMap).get(C))return C;const B=isArray(C);if(!I){if(B&&hasOwn(arrayInstrumentations,l))return Reflect.get(arrayInstrumentations,l,G);if(l==="hasOwnProperty")return hasOwnProperty}const k=Reflect.get(C,l,G);return(isSymbol(l)?builtInSymbols.has(l):isNonTrackableKeys(l))||(I||track(C,"get",l),g)?k:isRef(k)?B&&isIntegerKey(l)?k:k.value:isObject(k)?I?readonly(k):reactive(k):k}}const set$1=createSetter(),shallowSet=createSetter(!0);function createSetter(I=!1){return function(A,C,l,G){let B=A[C];if(isReadonly(B)&&isRef(B)&&!isRef(l))return!1;if(!I&&(!isShallow(l)&&!isReadonly(l)&&(B=toRaw(B),l=toRaw(l)),!isArray(A)&&isRef(B)&&!isRef(l)))return B.value=l,!0;const k=isArray(A)&&isIntegerKey(C)?Number(C)<A.length:hasOwn(A,C),n=Reflect.set(A,C,l,G);return A===toRaw(G)&&(k?hasChanged(l,B)&&trigger(A,"set",C,l):trigger(A,"add",C,l)),n}}function deleteProperty(I,g){const A=hasOwn(I,g);I[g];const C=Reflect.deleteProperty(I,g);return C&&A&&trigger(I,"delete",g,void 0),C}function has$1(I,g){const A=Reflect.has(I,g);return(!isSymbol(g)||!builtInSymbols.has(g))&&track(I,"has",g),A}function ownKeys(I){return track(I,"iterate",isArray(I)?"length":ITERATE_KEY),Reflect.ownKeys(I)}const mutableHandlers={get:get$1,set:set$1,deleteProperty,has:has$1,ownKeys},readonlyHandlers={get:readonlyGet,set(I,g){return!0},deleteProperty(I,g){return!0}},shallowReactiveHandlers=extend({},mutableHandlers,{get:shallowGet,set:shallowSet}),toShallow=I=>I,getProto=I=>Reflect.getPrototypeOf(I);function get(I,g,A=!1,C=!1){I=I.__v_raw;const l=toRaw(I),G=toRaw(g);A||(g!==G&&track(l,"get",g),track(l,"get",G));const{has:B}=getProto(l),k=C?toShallow:A?toReadonly:toReactive;if(B.call(l,g))return k(I.get(g));if(B.call(l,G))return k(I.get(G));I!==l&&I.get(g)}function has(I,g=!1){const A=this.__v_raw,C=toRaw(A),l=toRaw(I);return g||(I!==l&&track(C,"has",I),track(C,"has",l)),I===l?A.has(I):A.has(I)||A.has(l)}function size(I,g=!1){return I=I.__v_raw,!g&&track(toRaw(I),"iterate",ITERATE_KEY),Reflect.get(I,"size",I)}function add(I){I=toRaw(I);const g=toRaw(this);return getProto(g).has.call(g,I)||(g.add(I),trigger(g,"add",I,I)),this}function set(I,g){g=toRaw(g);const A=toRaw(this),{has:C,get:l}=getProto(A);let G=C.call(A,I);G||(I=toRaw(I),G=C.call(A,I));const B=l.call(A,I);return A.set(I,g),G?hasChanged(g,B)&&trigger(A,"set",I,g):trigger(A,"add",I,g),this}function deleteEntry(I){const g=toRaw(this),{has:A,get:C}=getProto(g);let l=A.call(g,I);l||(I=toRaw(I),l=A.call(g,I)),C&&C.call(g,I);const G=g.delete(I);return l&&trigger(g,"delete",I,void 0),G}function clear(){const I=toRaw(this),g=I.size!==0,A=I.clear();return g&&trigger(I,"clear",void 0,void 0),A}function createForEach(I,g){return function(C,l){const G=this,B=G.__v_raw,k=toRaw(B),n=g?toShallow:I?toReadonly:toReactive;return!I&&track(k,"iterate",ITERATE_KEY),B.forEach((a,w)=>C.call(l,n(a),n(w),G))}}function createIterableMethod(I,g,A){return function(...C){const l=this.__v_raw,G=toRaw(l),B=isMap(G),k=I==="entries"||I===Symbol.iterator&&B,n=I==="keys"&&B,a=l[I](...C),w=A?toShallow:g?toReadonly:toReactive;return!g&&track(G,"iterate",n?MAP_KEY_ITERATE_KEY:ITERATE_KEY),{next(){const{value:L,done:Q}=a.next();return Q?{value:L,done:Q}:{value:k?[w(L[0]),w(L[1])]:w(L),done:Q}},[Symbol.iterator](){return this}}}}function createReadonlyMethod(I){return function(...g){return I==="delete"?!1:this}}function createInstrumentations(){const I={get(G){return get(this,G)},get size(){return size(this)},has,add,set,delete:deleteEntry,clear,forEach:createForEach(!1,!1)},g={get(G){return get(this,G,!1,!0)},get size(){return size(this)},has,add,set,delete:deleteEntry,clear,forEach:createForEach(!1,!0)},A={get(G){return get(this,G,!0)},get size(){return size(this,!0)},has(G){return has.call(this,G,!0)},add:createReadonlyMethod("add"),set:createReadonlyMethod("set"),delete:createReadonlyMethod("delete"),clear:createReadonlyMethod("clear"),forEach:createForEach(!0,!1)},C={get(G){return get(this,G,!0,!0)},get size(){return size(this,!0)},has(G){return has.call(this,G,!0)},add:createReadonlyMethod("add"),set:createReadonlyMethod("set"),delete:createReadonlyMethod("delete"),clear:createReadonlyMethod("clear"),forEach:createForEach(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(G=>{I[G]=createIterableMethod(G,!1,!1),A[G]=createIterableMethod(G,!0,!1),g[G]=createIterableMethod(G,!1,!0),C[G]=createIterableMethod(G,!0,!0)}),[I,A,g,C]}const[mutableInstrumentations,readonlyInstrumentations,shallowInstrumentations,shallowReadonlyInstrumentations]=createInstrumentations();function createInstrumentationGetter(I,g){const A=g?I?shallowReadonlyInstrumentations:shallowInstrumentations:I?readonlyInstrumentations:mutableInstrumentations;return(C,l,G)=>l==="__v_isReactive"?!I:l==="__v_isReadonly"?I:l==="__v_raw"?C:Reflect.get(hasOwn(A,l)&&l in C?A:C,l,G)}const mutableCollectionHandlers={get:createInstrumentationGetter(!1,!1)},shallowCollectionHandlers={get:createInstrumentationGetter(!1,!0)},readonlyCollectionHandlers={get:createInstrumentationGetter(!0,!1)},reactiveMap=new WeakMap,shallowReactiveMap=new WeakMap,readonlyMap=new WeakMap,shallowReadonlyMap=new WeakMap;function targetTypeMap(I){switch(I){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function getTargetType(I){return I.__v_skip||!Object.isExtensible(I)?0:targetTypeMap(toRawType(I))}function reactive(I){return isReadonly(I)?I:createReactiveObject(I,!1,mutableHandlers,mutableCollectionHandlers,reactiveMap)}function shallowReactive(I){return createReactiveObject(I,!1,shallowReactiveHandlers,shallowCollectionHandlers,shallowReactiveMap)}function readonly(I){return createReactiveObject(I,!0,readonlyHandlers,readonlyCollectionHandlers,readonlyMap)}function createReactiveObject(I,g,A,C,l){if(!isObject(I)||I.__v_raw&&!(g&&I.__v_isReactive))return I;const G=l.get(I);if(G)return G;const B=getTargetType(I);if(B===0)return I;const k=new Proxy(I,B===2?C:A);return l.set(I,k),k}function isReactive(I){return isReadonly(I)?isReactive(I.__v_raw):!!(I&&I.__v_isReactive)}function isReadonly(I){return!!(I&&I.__v_isReadonly)}function isShallow(I){return!!(I&&I.__v_isShallow)}function isProxy(I){return isReactive(I)||isReadonly(I)}function toRaw(I){const g=I&&I.__v_raw;return g?toRaw(g):I}function markRaw(I){return def(I,"__v_skip",!0),I}const toReactive=I=>isObject(I)?reactive(I):I,toReadonly=I=>isObject(I)?readonly(I):I;function trackRefValue(I){shouldTrack&&activeEffect&&(I=toRaw(I),trackEffects(I.dep||(I.dep=createDep())))}function triggerRefValue(I,g){I=toRaw(I);const A=I.dep;A&&triggerEffects(A)}function isRef(I){return!!(I&&I.__v_isRef===!0)}function ref(I){return createRef(I,!1)}function shallowRef(I){return createRef(I,!0)}function createRef(I,g){return isRef(I)?I:new RefImpl(I,g)}class RefImpl{constructor(g,A){this.__v_isShallow=A,this.dep=void 0,this.__v_isRef=!0,this._rawValue=A?g:toRaw(g),this._value=A?g:toReactive(g)}get value(){return trackRefValue(this),this._value}set value(g){const A=this.__v_isShallow||isShallow(g)||isReadonly(g);g=A?g:toRaw(g),hasChanged(g,this._rawValue)&&(this._rawValue=g,this._value=A?g:toReactive(g),triggerRefValue(this))}}function unref(I){return isRef(I)?I.value:I}const shallowUnwrapHandlers={get:(I,g,A)=>unref(Reflect.get(I,g,A)),set:(I,g,A,C)=>{const l=I[g];return isRef(l)&&!isRef(A)?(l.value=A,!0):Reflect.set(I,g,A,C)}};function proxyRefs(I){return isReactive(I)?I:new Proxy(I,shallowUnwrapHandlers)}class ComputedRefImpl{constructor(g,A,C,l){this._setter=A,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this._dirty=!0,this.effect=new ReactiveEffect(g,()=>{this._dirty||(this._dirty=!0,triggerRefValue(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!l,this.__v_isReadonly=C}get value(){const g=toRaw(this);return trackRefValue(g),(g._dirty||!g._cacheable)&&(g._dirty=!1,g._value=g.effect.run()),g._value}set value(g){this._setter(g)}}function computed$1(I,g,A=!1){let C,l;const G=isFunction(I);return G?(C=I,l=NOOP):(C=I.get,l=I.set),new ComputedRefImpl(C,l,G||!l,A)}function warn(I,...g){}function callWithErrorHandling(I,g,A,C){let l;try{l=C?I(...C):I()}catch(G){handleError(G,g,A)}return l}function callWithAsyncErrorHandling(I,g,A,C){if(isFunction(I)){const G=callWithErrorHandling(I,g,A,C);return G&&isPromise(G)&&G.catch(B=>{handleError(B,g,A)}),G}const l=[];for(let G=0;G<I.length;G++)l.push(callWithAsyncErrorHandling(I[G],g,A,C));return l}function handleError(I,g,A,C=!0){const l=g?g.vnode:null;if(g){let G=g.parent;const B=g.proxy,k=A;for(;G;){const a=G.ec;if(a){for(let w=0;w<a.length;w++)if(a[w](I,B,k)===!1)return}G=G.parent}const n=g.appContext.config.errorHandler;if(n){callWithErrorHandling(n,null,10,[I,B,k]);return}}logError(I,A,l,C)}function logError(I,g,A,C=!0){console.error(I)}let isFlushing=!1,isFlushPending=!1;const queue=[];let flushIndex=0;const pendingPostFlushCbs=[];let activePostFlushCbs=null,postFlushIndex=0;const resolvedPromise=Promise.resolve();let currentFlushPromise=null;function nextTick(I){const g=currentFlushPromise||resolvedPromise;return I?g.then(this?I.bind(this):I):g}function findInsertionIndex(I){let g=flushIndex+1,A=queue.length;for(;g<A;){const C=g+A>>>1;getId(queue[C])<I?g=C+1:A=C}return g}function queueJob(I){(!queue.length||!queue.includes(I,isFlushing&&I.allowRecurse?flushIndex+1:flushIndex))&&(I.id==null?queue.push(I):queue.splice(findInsertionIndex(I.id),0,I),queueFlush())}function queueFlush(){!isFlushing&&!isFlushPending&&(isFlushPending=!0,currentFlushPromise=resolvedPromise.then(flushJobs))}function invalidateJob(I){const g=queue.indexOf(I);g>flushIndex&&queue.splice(g,1)}function queuePostFlushCb(I){isArray(I)?pendingPostFlushCbs.push(...I):(!activePostFlushCbs||!activePostFlushCbs.includes(I,I.allowRecurse?postFlushIndex+1:postFlushIndex))&&pendingPostFlushCbs.push(I),queueFlush()}function flushPreFlushCbs(I,g=isFlushing?flushIndex+1:0){for(;g<queue.length;g++){const A=queue[g];A&&A.pre&&(queue.splice(g,1),g--,A())}}function flushPostFlushCbs(I){if(pendingPostFlushCbs.length){const g=[...new Set(pendingPostFlushCbs)];if(pendingPostFlushCbs.length=0,activePostFlushCbs){activePostFlushCbs.push(...g);return}for(activePostFlushCbs=g,activePostFlushCbs.sort((A,C)=>getId(A)-getId(C)),postFlushIndex=0;postFlushIndex<activePostFlushCbs.length;postFlushIndex++)activePostFlushCbs[postFlushIndex]();activePostFlushCbs=null,postFlushIndex=0}}const getId=I=>I.id==null?1/0:I.id,comparator=(I,g)=>{const A=getId(I)-getId(g);if(A===0){if(I.pre&&!g.pre)return-1;if(g.pre&&!I.pre)return 1}return A};function flushJobs(I){isFlushPending=!1,isFlushing=!0,queue.sort(comparator);const g=NOOP;try{for(flushIndex=0;flushIndex<queue.length;flushIndex++){const A=queue[flushIndex];A&&A.active!==!1&&callWithErrorHandling(A,null,14)}}finally{flushIndex=0,queue.length=0,flushPostFlushCbs(),isFlushing=!1,currentFlushPromise=null,(queue.length||pendingPostFlushCbs.length)&&flushJobs()}}function emit(I,g,...A){if(I.isUnmounted)return;const C=I.vnode.props||EMPTY_OBJ;let l=A;const G=g.startsWith("update:"),B=G&&g.slice(7);if(B&&B in C){const w=`${B==="modelValue"?"model":B}Modifiers`,{number:L,trim:Q}=C[w]||EMPTY_OBJ;Q&&(l=A.map(S=>isString(S)?S.trim():S)),L&&(l=A.map(looseToNumber))}let k,n=C[k=toHandlerKey(g)]||C[k=toHandlerKey(camelize(g))];!n&&G&&(n=C[k=toHandlerKey(hyphenate(g))]),n&&callWithAsyncErrorHandling(n,I,6,l);const a=C[k+"Once"];if(a){if(!I.emitted)I.emitted={};else if(I.emitted[k])return;I.emitted[k]=!0,callWithAsyncErrorHandling(a,I,6,l)}}function normalizeEmitsOptions(I,g,A=!1){const C=g.emitsCache,l=C.get(I);if(l!==void 0)return l;const G=I.emits;let B={},k=!1;if(!isFunction(I)){const n=a=>{const w=normalizeEmitsOptions(a,g,!0);w&&(k=!0,extend(B,w))};!A&&g.mixins.length&&g.mixins.forEach(n),I.extends&&n(I.extends),I.mixins&&I.mixins.forEach(n)}return!G&&!k?(isObject(I)&&C.set(I,null),null):(isArray(G)?G.forEach(n=>B[n]=null):extend(B,G),isObject(I)&&C.set(I,B),B)}function isEmitListener(I,g){return!I||!isOn(g)?!1:(g=g.slice(2).replace(/Once$/,""),hasOwn(I,g[0].toLowerCase()+g.slice(1))||hasOwn(I,hyphenate(g))||hasOwn(I,g))}let currentRenderingInstance=null,currentScopeId=null;function setCurrentRenderingInstance(I){const g=currentRenderingInstance;return currentRenderingInstance=I,currentScopeId=I&&I.type.__scopeId||null,g}function pushScopeId(I){currentScopeId=I}function popScopeId(){currentScopeId=null}function withCtx(I,g=currentRenderingInstance,A){if(!g||I._n)return I;const C=(...l)=>{C._d&&setBlockTracking(-1);const G=setCurrentRenderingInstance(g);let B;try{B=I(...l)}finally{setCurrentRenderingInstance(G),C._d&&setBlockTracking(1)}return B};return C._n=!0,C._c=!0,C._d=!0,C}function markAttrsAccessed(){}function renderComponentRoot(I){const{type:g,vnode:A,proxy:C,withProxy:l,props:G,propsOptions:[B],slots:k,attrs:n,emit:a,render:w,renderCache:L,data:Q,setupState:S,ctx:y,inheritAttrs:M}=I;let F,z;const O=setCurrentRenderingInstance(I);try{if(A.shapeFlag&4){const R=l||C;F=normalizeVNode(w.call(R,R,L,G,S,Q,y)),z=n}else{const R=g;F=normalizeVNode(R.length>1?R(G,{attrs:n,slots:k,emit:a}):R(G,null)),z=g.props?n:getFunctionalFallthrough(n)}}catch(R){blockStack.length=0,handleError(R,I,1),F=createVNode(Comment)}let D=F;if(z&&M!==!1){const R=Object.keys(z),{shapeFlag:q}=D;R.length&&q&7&&(B&&R.some(isModelListener)&&(z=filterModelListeners(z,B)),D=cloneVNode(D,z))}return A.dirs&&(D=cloneVNode(D),D.dirs=D.dirs?D.dirs.concat(A.dirs):A.dirs),A.transition&&(D.transition=A.transition),F=D,setCurrentRenderingInstance(O),F}const getFunctionalFallthrough=I=>{let g;for(const A in I)(A==="class"||A==="style"||isOn(A))&&((g||(g={}))[A]=I[A]);return g},filterModelListeners=(I,g)=>{const A={};for(const C in I)(!isModelListener(C)||!(C.slice(9)in g))&&(A[C]=I[C]);return A};function shouldUpdateComponent(I,g,A){const{props:C,children:l,component:G}=I,{props:B,children:k,patchFlag:n}=g,a=G.emitsOptions;if(g.dirs||g.transition)return!0;if(A&&n>=0){if(n&1024)return!0;if(n&16)return C?hasPropsChanged(C,B,a):!!B;if(n&8){const w=g.dynamicProps;for(let L=0;L<w.length;L++){const Q=w[L];if(B[Q]!==C[Q]&&!isEmitListener(a,Q))return!0}}}else return(l||k)&&(!k||!k.$stable)?!0:C===B?!1:C?B?hasPropsChanged(C,B,a):!0:!!B;return!1}function hasPropsChanged(I,g,A){const C=Object.keys(g);if(C.length!==Object.keys(I).length)return!0;for(let l=0;l<C.length;l++){const G=C[l];if(g[G]!==I[G]&&!isEmitListener(A,G))return!0}return!1}function updateHOCHostEl({vnode:I,parent:g},A){for(;g&&g.subTree===I;)(I=g.vnode).el=A,g=g.parent}const isSuspense=I=>I.__isSuspense;function queueEffectWithSuspense(I,g){g&&g.pendingBranch?isArray(I)?g.effects.push(...I):g.effects.push(I):queuePostFlushCb(I)}const INITIAL_WATCHER_VALUE={};function watch(I,g,A){return doWatch(I,g,A)}function doWatch(I,g,{immediate:A,deep:C,flush:l,onTrack:G,onTrigger:B}=EMPTY_OBJ){var k;const n=getCurrentScope()===((k=currentInstance)==null?void 0:k.scope)?currentInstance:null;let a,w=!1,L=!1;if(isRef(I)?(a=()=>I.value,w=isShallow(I)):isReactive(I)?(a=()=>I,C=!0):isArray(I)?(L=!0,w=I.some(R=>isReactive(R)||isShallow(R)),a=()=>I.map(R=>{if(isRef(R))return R.value;if(isReactive(R))return traverse(R);if(isFunction(R))return callWithErrorHandling(R,n,2)})):isFunction(I)?g?a=()=>callWithErrorHandling(I,n,2):a=()=>{if(!(n&&n.isUnmounted))return Q&&Q(),callWithAsyncErrorHandling(I,n,3,[S])}:a=NOOP,g&&C){const R=a;a=()=>traverse(R())}let Q,S=R=>{Q=O.onStop=()=>{callWithErrorHandling(R,n,4)}},y;if(isInSSRComponentSetup)if(S=NOOP,g?A&&callWithAsyncErrorHandling(g,n,3,[a(),L?[]:void 0,S]):a(),l==="sync"){const R=useSSRContext();y=R.__watcherHandles||(R.__watcherHandles=[])}else return NOOP;let M=L?new Array(I.length).fill(INITIAL_WATCHER_VALUE):INITIAL_WATCHER_VALUE;const F=()=>{if(O.active)if(g){const R=O.run();(C||w||(L?R.some((q,II)=>hasChanged(q,M[II])):hasChanged(R,M)))&&(Q&&Q(),callWithAsyncErrorHandling(g,n,3,[R,M===INITIAL_WATCHER_VALUE?void 0:L&&M[0]===INITIAL_WATCHER_VALUE?[]:M,S]),M=R)}else O.run()};F.allowRecurse=!!g;let z;l==="sync"?z=F:l==="post"?z=()=>queuePostRenderEffect(F,n&&n.suspense):(F.pre=!0,n&&(F.id=n.uid),z=()=>queueJob(F));const O=new ReactiveEffect(a,z);g?A?F():M=O.run():l==="post"?queuePostRenderEffect(O.run.bind(O),n&&n.suspense):O.run();const D=()=>{O.stop(),n&&n.scope&&remove(n.scope.effects,O)};return y&&y.push(D),D}function instanceWatch(I,g,A){const C=this.proxy,l=isString(I)?I.includes(".")?createPathGetter(C,I):()=>C[I]:I.bind(C,C);let G;isFunction(g)?G=g:(G=g.handler,A=g);const B=currentInstance;setCurrentInstance(this);const k=doWatch(l,G.bind(C),A);return B?setCurrentInstance(B):unsetCurrentInstance(),k}function createPathGetter(I,g){const A=g.split(".");return()=>{let C=I;for(let l=0;l<A.length&&C;l++)C=C[A[l]];return C}}function traverse(I,g){if(!isObject(I)||I.__v_skip||(g=g||new Set,g.has(I)))return I;if(g.add(I),isRef(I))traverse(I.value,g);else if(isArray(I))for(let A=0;A<I.length;A++)traverse(I[A],g);else if(isSet(I)||isMap(I))I.forEach(A=>{traverse(A,g)});else if(isPlainObject(I))for(const A in I)traverse(I[A],g);return I}function withDirectives(I,g){const A=currentRenderingInstance;if(A===null)return I;const C=getExposeProxy(A)||A.proxy,l=I.dirs||(I.dirs=[]);for(let G=0;G<g.length;G++){let[B,k,n,a=EMPTY_OBJ]=g[G];B&&(isFunction(B)&&(B={mounted:B,updated:B}),B.deep&&traverse(k),l.push({dir:B,instance:C,value:k,oldValue:void 0,arg:n,modifiers:a}))}return I}function invokeDirectiveHook(I,g,A,C){const l=I.dirs,G=g&&g.dirs;for(let B=0;B<l.length;B++){const k=l[B];G&&(k.oldValue=G[B].value);let n=k.dir[C];n&&(pauseTracking(),callWithAsyncErrorHandling(n,A,8,[I.el,k,I,g]),resetTracking())}}function defineComponent(I,g){return isFunction(I)?(()=>extend({name:I.name},g,{setup:I}))():I}const isAsyncWrapper=I=>!!I.type.__asyncLoader,isKeepAlive=I=>I.type.__isKeepAlive;function onActivated(I,g){registerKeepAliveHook(I,"a",g)}function onDeactivated(I,g){registerKeepAliveHook(I,"da",g)}function registerKeepAliveHook(I,g,A=currentInstance){const C=I.__wdc||(I.__wdc=()=>{let l=A;for(;l;){if(l.isDeactivated)return;l=l.parent}return I()});if(injectHook(g,C,A),A){let l=A.parent;for(;l&&l.parent;)isKeepAlive(l.parent.vnode)&&injectToKeepAliveRoot(C,g,A,l),l=l.parent}}function injectToKeepAliveRoot(I,g,A,C){const l=injectHook(g,I,C,!0);onUnmounted(()=>{remove(C[g],l)},A)}function injectHook(I,g,A=currentInstance,C=!1){if(A){const l=A[I]||(A[I]=[]),G=g.__weh||(g.__weh=(...B)=>{if(A.isUnmounted)return;pauseTracking(),setCurrentInstance(A);const k=callWithAsyncErrorHandling(g,A,I,B);return unsetCurrentInstance(),resetTracking(),k});return C?l.unshift(G):l.push(G),G}}const createHook=I=>(g,A=currentInstance)=>(!isInSSRComponentSetup||I==="sp")&&injectHook(I,(...C)=>g(...C),A),onBeforeMount=createHook("bm"),onMounted=createHook("m"),onBeforeUpdate=createHook("bu"),onUpdated=createHook("u"),onBeforeUnmount=createHook("bum"),onUnmounted=createHook("um"),onServerPrefetch=createHook("sp"),onRenderTriggered=createHook("rtg"),onRenderTracked=createHook("rtc");function onErrorCaptured(I,g=currentInstance){injectHook("ec",I,g)}const NULL_DYNAMIC_COMPONENT=Symbol.for("v-ndc");function renderSlot(I,g,A={},C,l){if(currentRenderingInstance.isCE||currentRenderingInstance.parent&&isAsyncWrapper(currentRenderingInstance.parent)&&currentRenderingInstance.parent.isCE)return g!=="default"&&(A.name=g),createVNode("slot",A,C&&C());let G=I[g];G&&G._c&&(G._d=!1),openBlock();const B=G&&ensureValidVNode(G(A)),k=createBlock(Fragment,{key:A.key||B&&B.key||`_${g}`},B||(C?C():[]),B&&I._===1?64:-2);return!l&&k.scopeId&&(k.slotScopeIds=[k.scopeId+"-s"]),G&&G._c&&(G._d=!0),k}function ensureValidVNode(I){return I.some(g=>isVNode(g)?!(g.type===Comment||g.type===Fragment&&!ensureValidVNode(g.children)):!0)?I:null}const getPublicInstance=I=>I?isStatefulComponent(I)?getExposeProxy(I)||I.proxy:getPublicInstance(I.parent):null,publicPropertiesMap=extend(Object.create(null),{$:I=>I,$el:I=>I.vnode.el,$data:I=>I.data,$props:I=>I.props,$attrs:I=>I.attrs,$slots:I=>I.slots,$refs:I=>I.refs,$parent:I=>getPublicInstance(I.parent),$root:I=>getPublicInstance(I.root),$emit:I=>I.emit,$options:I=>resolveMergedOptions(I),$forceUpdate:I=>I.f||(I.f=()=>queueJob(I.update)),$nextTick:I=>I.n||(I.n=nextTick.bind(I.proxy)),$watch:I=>instanceWatch.bind(I)}),hasSetupBinding=(I,g)=>I!==EMPTY_OBJ&&!I.__isScriptSetup&&hasOwn(I,g),PublicInstanceProxyHandlers={get({_:I},g){const{ctx:A,setupState:C,data:l,props:G,accessCache:B,type:k,appContext:n}=I;let a;if(g[0]!=="$"){const S=B[g];if(S!==void 0)switch(S){case 1:return C[g];case 2:return l[g];case 4:return A[g];case 3:return G[g]}else{if(hasSetupBinding(C,g))return B[g]=1,C[g];if(l!==EMPTY_OBJ&&hasOwn(l,g))return B[g]=2,l[g];if((a=I.propsOptions[0])&&hasOwn(a,g))return B[g]=3,G[g];if(A!==EMPTY_OBJ&&hasOwn(A,g))return B[g]=4,A[g];shouldCacheAccess&&(B[g]=0)}}const w=publicPropertiesMap[g];let L,Q;if(w)return g==="$attrs"&&track(I,"get",g),w(I);if((L=k.__cssModules)&&(L=L[g]))return L;if(A!==EMPTY_OBJ&&hasOwn(A,g))return B[g]=4,A[g];if(Q=n.config.globalProperties,hasOwn(Q,g))return Q[g]},set({_:I},g,A){const{data:C,setupState:l,ctx:G}=I;return hasSetupBinding(l,g)?(l[g]=A,!0):C!==EMPTY_OBJ&&hasOwn(C,g)?(C[g]=A,!0):hasOwn(I.props,g)||g[0]==="$"&&g.slice(1)in I?!1:(G[g]=A,!0)},has({_:{data:I,setupState:g,accessCache:A,ctx:C,appContext:l,propsOptions:G}},B){let k;return!!A[B]||I!==EMPTY_OBJ&&hasOwn(I,B)||hasSetupBinding(g,B)||(k=G[0])&&hasOwn(k,B)||hasOwn(C,B)||hasOwn(publicPropertiesMap,B)||hasOwn(l.config.globalProperties,B)},defineProperty(I,g,A){return A.get!=null?I._.accessCache[g]=0:hasOwn(A,"value")&&this.set(I,g,A.value,null),Reflect.defineProperty(I,g,A)}};function normalizePropsOrEmits(I){return isArray(I)?I.reduce((g,A)=>(g[A]=null,g),{}):I}let shouldCacheAccess=!0;function applyOptions(I){const g=resolveMergedOptions(I),A=I.proxy,C=I.ctx;shouldCacheAccess=!1,g.beforeCreate&&callHook(g.beforeCreate,I,"bc");const{data:l,computed:G,methods:B,watch:k,provide:n,inject:a,created:w,beforeMount:L,mounted:Q,beforeUpdate:S,updated:y,activated:M,deactivated:F,beforeDestroy:z,beforeUnmount:O,destroyed:D,unmounted:R,render:q,renderTracked:II,renderTriggered:t,errorCaptured:d,serverPrefetch:b,expose:u,inheritAttrs:m,components:J,directives:r,filters:XI}=g;if(a&&resolveInjections(a,C,null),B)for(const FI in B){const JI=B[FI];isFunction(JI)&&(C[FI]=JI.bind(A))}if(l){const FI=l.call(A,A);isObject(FI)&&(I.data=reactive(FI))}if(shouldCacheAccess=!0,G)for(const FI in G){const JI=G[FI],LI=isFunction(JI)?JI.bind(A,A):isFunction(JI.get)?JI.get.bind(A,A):NOOP,UI=!isFunction(JI)&&isFunction(JI.set)?JI.set.bind(A):NOOP,TI=computed({get:LI,set:UI});Object.defineProperty(C,FI,{enumerable:!0,configurable:!0,get:()=>TI.value,set:QI=>TI.value=QI})}if(k)for(const FI in k)createWatcher(k[FI],C,A,FI);if(n){const FI=isFunction(n)?n.call(A):n;Reflect.ownKeys(FI).forEach(JI=>{provide(JI,FI[JI])})}w&&callHook(w,I,"c");function kI(FI,JI){isArray(JI)?JI.forEach(LI=>FI(LI.bind(A))):JI&&FI(JI.bind(A))}if(kI(onBeforeMount,L),kI(onMounted,Q),kI(onBeforeUpdate,S),kI(onUpdated,y),kI(onActivated,M),kI(onDeactivated,F),kI(onErrorCaptured,d),kI(onRenderTracked,II),kI(onRenderTriggered,t),kI(onBeforeUnmount,O),kI(onUnmounted,R),kI(onServerPrefetch,b),isArray(u))if(u.length){const FI=I.exposed||(I.exposed={});u.forEach(JI=>{Object.defineProperty(FI,JI,{get:()=>A[JI],set:LI=>A[JI]=LI})})}else I.exposed||(I.exposed={});q&&I.render===NOOP&&(I.render=q),m!=null&&(I.inheritAttrs=m),J&&(I.components=J),r&&(I.directives=r)}function resolveInjections(I,g,A=NOOP){isArray(I)&&(I=normalizeInject(I));for(const C in I){const l=I[C];let G;isObject(l)?"default"in l?G=inject(l.from||C,l.default,!0):G=inject(l.from||C):G=inject(l),isRef(G)?Object.defineProperty(g,C,{enumerable:!0,configurable:!0,get:()=>G.value,set:B=>G.value=B}):g[C]=G}}function callHook(I,g,A){callWithAsyncErrorHandling(isArray(I)?I.map(C=>C.bind(g.proxy)):I.bind(g.proxy),g,A)}function createWatcher(I,g,A,C){const l=C.includes(".")?createPathGetter(A,C):()=>A[C];if(isString(I)){const G=g[I];isFunction(G)&&watch(l,G)}else if(isFunction(I))watch(l,I.bind(A));else if(isObject(I))if(isArray(I))I.forEach(G=>createWatcher(G,g,A,C));else{const G=isFunction(I.handler)?I.handler.bind(A):g[I.handler];isFunction(G)&&watch(l,G,I)}}function resolveMergedOptions(I){const g=I.type,{mixins:A,extends:C}=g,{mixins:l,optionsCache:G,config:{optionMergeStrategies:B}}=I.appContext,k=G.get(g);let n;return k?n=k:!l.length&&!A&&!C?n=g:(n={},l.length&&l.forEach(a=>mergeOptions(n,a,B,!0)),mergeOptions(n,g,B)),isObject(g)&&G.set(g,n),n}function mergeOptions(I,g,A,C=!1){const{mixins:l,extends:G}=g;G&&mergeOptions(I,G,A,!0),l&&l.forEach(B=>mergeOptions(I,B,A,!0));for(const B in g)if(!(C&&B==="expose")){const k=internalOptionMergeStrats[B]||A&&A[B];I[B]=k?k(I[B],g[B]):g[B]}return I}const internalOptionMergeStrats={data:mergeDataFn,props:mergeEmitsOrPropsOptions,emits:mergeEmitsOrPropsOptions,methods:mergeObjectOptions,computed:mergeObjectOptions,beforeCreate:mergeAsArray,created:mergeAsArray,beforeMount:mergeAsArray,mounted:mergeAsArray,beforeUpdate:mergeAsArray,updated:mergeAsArray,beforeDestroy:mergeAsArray,beforeUnmount:mergeAsArray,destroyed:mergeAsArray,unmounted:mergeAsArray,activated:mergeAsArray,deactivated:mergeAsArray,errorCaptured:mergeAsArray,serverPrefetch:mergeAsArray,components:mergeObjectOptions,directives:mergeObjectOptions,watch:mergeWatchOptions,provide:mergeDataFn,inject:mergeInject};function mergeDataFn(I,g){return g?I?function(){return extend(isFunction(I)?I.call(this,this):I,isFunction(g)?g.call(this,this):g)}:g:I}function mergeInject(I,g){return mergeObjectOptions(normalizeInject(I),normalizeInject(g))}function normalizeInject(I){if(isArray(I)){const g={};for(let A=0;A<I.length;A++)g[I[A]]=I[A];return g}return I}function mergeAsArray(I,g){return I?[...new Set([].concat(I,g))]:g}function mergeObjectOptions(I,g){return I?extend(Object.create(null),I,g):g}function mergeEmitsOrPropsOptions(I,g){return I?isArray(I)&&isArray(g)?[...new Set([...I,...g])]:extend(Object.create(null),normalizePropsOrEmits(I),normalizePropsOrEmits(g??{})):g}function mergeWatchOptions(I,g){if(!I)return g;if(!g)return I;const A=extend(Object.create(null),I);for(const C in g)A[C]=mergeAsArray(I[C],g[C]);return A}function createAppContext(){return{app:null,config:{isNativeTag:NO,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let uid$1=0;function createAppAPI(I,g){return function(C,l=null){isFunction(C)||(C=extend({},C)),l!=null&&!isObject(l)&&(l=null);const G=createAppContext(),B=new Set;let k=!1;const n=G.app={_uid:uid$1++,_component:C,_props:l,_container:null,_context:G,_instance:null,version,get config(){return G.config},set config(a){},use(a,...w){return B.has(a)||(a&&isFunction(a.install)?(B.add(a),a.install(n,...w)):isFunction(a)&&(B.add(a),a(n,...w))),n},mixin(a){return G.mixins.includes(a)||G.mixins.push(a),n},component(a,w){return w?(G.components[a]=w,n):G.components[a]},directive(a,w){return w?(G.directives[a]=w,n):G.directives[a]},mount(a,w,L){if(!k){const Q=createVNode(C,l);return Q.appContext=G,w&&g?g(Q,a):I(Q,a,L),k=!0,n._container=a,a.__vue_app__=n,getExposeProxy(Q.component)||Q.component.proxy}},unmount(){k&&(I(null,n._container),delete n._container.__vue_app__)},provide(a,w){return G.provides[a]=w,n},runWithContext(a){currentApp=n;try{return a()}finally{currentApp=null}}};return n}}let currentApp=null;function provide(I,g){if(currentInstance){let A=currentInstance.provides;const C=currentInstance.parent&&currentInstance.parent.provides;C===A&&(A=currentInstance.provides=Object.create(C)),A[I]=g}}function inject(I,g,A=!1){const C=currentInstance||currentRenderingInstance;if(C||currentApp){const l=C?C.parent==null?C.vnode.appContext&&C.vnode.appContext.provides:C.parent.provides:currentApp._context.provides;if(l&&I in l)return l[I];if(arguments.length>1)return A&&isFunction(g)?g.call(C&&C.proxy):g}}function initProps(I,g,A,C=!1){const l={},G={};def(G,InternalObjectKey,1),I.propsDefaults=Object.create(null),setFullProps(I,g,l,G);for(const B in I.propsOptions[0])B in l||(l[B]=void 0);A?I.props=C?l:shallowReactive(l):I.type.props?I.props=l:I.props=G,I.attrs=G}function updateProps(I,g,A,C){const{props:l,attrs:G,vnode:{patchFlag:B}}=I,k=toRaw(l),[n]=I.propsOptions;let a=!1;if((C||B>0)&&!(B&16)){if(B&8){const w=I.vnode.dynamicProps;for(let L=0;L<w.length;L++){let Q=w[L];if(isEmitListener(I.emitsOptions,Q))continue;const S=g[Q];if(n)if(hasOwn(G,Q))S!==G[Q]&&(G[Q]=S,a=!0);else{const y=camelize(Q);l[y]=resolvePropValue(n,k,y,S,I,!1)}else S!==G[Q]&&(G[Q]=S,a=!0)}}}else{setFullProps(I,g,l,G)&&(a=!0);let w;for(const L in k)(!g||!hasOwn(g,L)&&((w=hyphenate(L))===L||!hasOwn(g,w)))&&(n?A&&(A[L]!==void 0||A[w]!==void 0)&&(l[L]=resolvePropValue(n,k,L,void 0,I,!0)):delete l[L]);if(G!==k)for(const L in G)(!g||!hasOwn(g,L))&&(delete G[L],a=!0)}a&&trigger(I,"set","$attrs")}function setFullProps(I,g,A,C){const[l,G]=I.propsOptions;let B=!1,k;if(g)for(let n in g){if(isReservedProp(n))continue;const a=g[n];let w;l&&hasOwn(l,w=camelize(n))?!G||!G.includes(w)?A[w]=a:(k||(k={}))[w]=a:isEmitListener(I.emitsOptions,n)||(!(n in C)||a!==C[n])&&(C[n]=a,B=!0)}if(G){const n=toRaw(A),a=k||EMPTY_OBJ;for(let w=0;w<G.length;w++){const L=G[w];A[L]=resolvePropValue(l,n,L,a[L],I,!hasOwn(a,L))}}return B}function resolvePropValue(I,g,A,C,l,G){const B=I[A];if(B!=null){const k=hasOwn(B,"default");if(k&&C===void 0){const n=B.default;if(B.type!==Function&&!B.skipFactory&&isFunction(n)){const{propsDefaults:a}=l;A in a?C=a[A]:(setCurrentInstance(l),C=a[A]=n.call(null,g),unsetCurrentInstance())}else C=n}B[0]&&(G&&!k?C=!1:B[1]&&(C===""||C===hyphenate(A))&&(C=!0))}return C}function normalizePropsOptions(I,g,A=!1){const C=g.propsCache,l=C.get(I);if(l)return l;const G=I.props,B={},k=[];let n=!1;if(!isFunction(I)){const w=L=>{n=!0;const[Q,S]=normalizePropsOptions(L,g,!0);extend(B,Q),S&&k.push(...S)};!A&&g.mixins.length&&g.mixins.forEach(w),I.extends&&w(I.extends),I.mixins&&I.mixins.forEach(w)}if(!G&&!n)return isObject(I)&&C.set(I,EMPTY_ARR),EMPTY_ARR;if(isArray(G))for(let w=0;w<G.length;w++){const L=camelize(G[w]);validatePropName(L)&&(B[L]=EMPTY_OBJ)}else if(G)for(const w in G){const L=camelize(w);if(validatePropName(L)){const Q=G[w],S=B[L]=isArray(Q)||isFunction(Q)?{type:Q}:extend({},Q);if(S){const y=getTypeIndex(Boolean,S.type),M=getTypeIndex(String,S.type);S[0]=y>-1,S[1]=M<0||y<M,(y>-1||hasOwn(S,"default"))&&k.push(L)}}}const a=[B,k];return isObject(I)&&C.set(I,a),a}function validatePropName(I){return I[0]!=="$"}function getType(I){const g=I&&I.toString().match(/^\s*(function|class) (\w+)/);return g?g[2]:I===null?"null":""}function isSameType(I,g){return getType(I)===getType(g)}function getTypeIndex(I,g){return isArray(g)?g.findIndex(A=>isSameType(A,I)):isFunction(g)&&isSameType(g,I)?0:-1}const isInternalKey=I=>I[0]==="_"||I==="$stable",normalizeSlotValue=I=>isArray(I)?I.map(normalizeVNode):[normalizeVNode(I)],normalizeSlot=(I,g,A)=>{if(g._n)return g;const C=withCtx((...l)=>normalizeSlotValue(g(...l)),A);return C._c=!1,C},normalizeObjectSlots=(I,g,A)=>{const C=I._ctx;for(const l in I){if(isInternalKey(l))continue;const G=I[l];if(isFunction(G))g[l]=normalizeSlot(l,G,C);else if(G!=null){const B=normalizeSlotValue(G);g[l]=()=>B}}},normalizeVNodeSlots=(I,g)=>{const A=normalizeSlotValue(g);I.slots.default=()=>A},initSlots=(I,g)=>{if(I.vnode.shapeFlag&32){const A=g._;A?(I.slots=toRaw(g),def(g,"_",A)):normalizeObjectSlots(g,I.slots={})}else I.slots={},g&&normalizeVNodeSlots(I,g);def(I.slots,InternalObjectKey,1)},updateSlots=(I,g,A)=>{const{vnode:C,slots:l}=I;let G=!0,B=EMPTY_OBJ;if(C.shapeFlag&32){const k=g._;k?A&&k===1?G=!1:(extend(l,g),!A&&k===1&&delete l._):(G=!g.$stable,normalizeObjectSlots(g,l)),B=g}else g&&(normalizeVNodeSlots(I,g),B={default:1});if(G)for(const k in l)!isInternalKey(k)&&!(k in B)&&delete l[k]};function setRef(I,g,A,C,l=!1){if(isArray(I)){I.forEach((Q,S)=>setRef(Q,g&&(isArray(g)?g[S]:g),A,C,l));return}if(isAsyncWrapper(C)&&!l)return;const G=C.shapeFlag&4?getExposeProxy(C.component)||C.component.proxy:C.el,B=l?null:G,{i:k,r:n}=I,a=g&&g.r,w=k.refs===EMPTY_OBJ?k.refs={}:k.refs,L=k.setupState;if(a!=null&&a!==n&&(isString(a)?(w[a]=null,hasOwn(L,a)&&(L[a]=null)):isRef(a)&&(a.value=null)),isFunction(n))callWithErrorHandling(n,k,12,[B,w]);else{const Q=isString(n),S=isRef(n);if(Q||S){const y=()=>{if(I.f){const M=Q?hasOwn(L,n)?L[n]:w[n]:n.value;l?isArray(M)&&remove(M,G):isArray(M)?M.includes(G)||M.push(G):Q?(w[n]=[G],hasOwn(L,n)&&(L[n]=w[n])):(n.value=[G],I.k&&(w[I.k]=n.value))}else Q?(w[n]=B,hasOwn(L,n)&&(L[n]=B)):S&&(n.value=B,I.k&&(w[I.k]=B))};B?(y.id=-1,queuePostRenderEffect(y,A)):y()}}}const queuePostRenderEffect=queueEffectWithSuspense;function createRenderer(I){return baseCreateRenderer(I)}function baseCreateRenderer(I,g){const A=getGlobalThis();A.__VUE__=!0;const{insert:C,remove:l,patchProp:G,createElement:B,createText:k,createComment:n,setText:a,setElementText:w,parentNode:L,nextSibling:Q,setScopeId:S=NOOP,insertStaticContent:y}=I,M=(i,W,Z,c=null,s=null,Y=null,N=!1,j=null,oI=!!W.dynamicChildren)=>{if(i===W)return;i&&!isSameVNodeType(i,W)&&(c=T(i),QI(i,s,Y,!0),i=null),W.patchFlag===-2&&(oI=!1,W.dynamicChildren=null);const{type:f,ref:NI,shapeFlag:hI}=W;switch(f){case Text:F(i,W,Z,c);break;case Comment:z(i,W,Z,c);break;case Static:i==null&&O(W,Z,c,N);break;case Fragment:J(i,W,Z,c,s,Y,N,j,oI);break;default:hI&1?q(i,W,Z,c,s,Y,N,j,oI):hI&6?r(i,W,Z,c,s,Y,N,j,oI):(hI&64||hI&128)&&f.process(i,W,Z,c,s,Y,N,j,oI,v)}NI!=null&&s&&setRef(NI,i&&i.ref,Y,W||i,!W)},F=(i,W,Z,c)=>{if(i==null)C(W.el=k(W.children),Z,c);else{const s=W.el=i.el;W.children!==i.children&&a(s,W.children)}},z=(i,W,Z,c)=>{i==null?C(W.el=n(W.children||""),Z,c):W.el=i.el},O=(i,W,Z,c)=>{[i.el,i.anchor]=y(i.children,W,Z,c,i.el,i.anchor)},D=({el:i,anchor:W},Z,c)=>{let s;for(;i&&i!==W;)s=Q(i),C(i,Z,c),i=s;C(W,Z,c)},R=({el:i,anchor:W})=>{let Z;for(;i&&i!==W;)Z=Q(i),l(i),i=Z;l(W)},q=(i,W,Z,c,s,Y,N,j,oI)=>{N=N||W.type==="svg",i==null?II(W,Z,c,s,Y,N,j,oI):b(i,W,s,Y,N,j,oI)},II=(i,W,Z,c,s,Y,N,j)=>{let oI,f;const{type:NI,props:hI,shapeFlag:HI,transition:uI,dirs:KI}=i;if(oI=i.el=B(i.type,Y,hI&&hI.is,hI),HI&8?w(oI,i.children):HI&16&&d(i.children,oI,null,c,s,Y&&NI!=="foreignObject",N,j),KI&&invokeDirectiveHook(i,null,c,"created"),t(oI,i,i.scopeId,N,c),hI){for(const xI in hI)xI!=="value"&&!isReservedProp(xI)&&G(oI,xI,null,hI[xI],Y,i.children,c,s,X);"value"in hI&&G(oI,"value",null,hI.value),(f=hI.onVnodeBeforeMount)&&invokeVNodeHook(f,c,i)}KI&&invokeDirectiveHook(i,null,c,"beforeMount");const zI=(!s||s&&!s.pendingBranch)&&uI&&!uI.persisted;zI&&uI.beforeEnter(oI),C(oI,W,Z),((f=hI&&hI.onVnodeMounted)||zI||KI)&&queuePostRenderEffect(()=>{f&&invokeVNodeHook(f,c,i),zI&&uI.enter(oI),KI&&invokeDirectiveHook(i,null,c,"mounted")},s)},t=(i,W,Z,c,s)=>{if(Z&&S(i,Z),c)for(let Y=0;Y<c.length;Y++)S(i,c[Y]);if(s){let Y=s.subTree;if(W===Y){const N=s.vnode;t(i,N,N.scopeId,N.slotScopeIds,s.parent)}}},d=(i,W,Z,c,s,Y,N,j,oI=0)=>{for(let f=oI;f<i.length;f++){const NI=i[f]=j?cloneIfMounted(i[f]):normalizeVNode(i[f]);M(null,NI,W,Z,c,s,Y,N,j)}},b=(i,W,Z,c,s,Y,N)=>{const j=W.el=i.el;let{patchFlag:oI,dynamicChildren:f,dirs:NI}=W;oI|=i.patchFlag&16;const hI=i.props||EMPTY_OBJ,HI=W.props||EMPTY_OBJ;let uI;Z&&toggleRecurse(Z,!1),(uI=HI.onVnodeBeforeUpdate)&&invokeVNodeHook(uI,Z,W,i),NI&&invokeDirectiveHook(W,i,Z,"beforeUpdate"),Z&&toggleRecurse(Z,!0);const KI=s&&W.type!=="foreignObject";if(f?u(i.dynamicChildren,f,j,Z,c,KI,Y):N||JI(i,W,j,null,Z,c,KI,Y,!1),oI>0){if(oI&16)m(j,W,hI,HI,Z,c,s);else if(oI&2&&hI.class!==HI.class&&G(j,"class",null,HI.class,s),oI&4&&G(j,"style",hI.style,HI.style,s),oI&8){const zI=W.dynamicProps;for(let xI=0;xI<zI.length;xI++){const vI=zI[xI],_I=hI[vI],yI=HI[vI];(yI!==_I||vI==="value")&&G(j,vI,_I,yI,s,i.children,Z,c,X)}}oI&1&&i.children!==W.children&&w(j,W.children)}else!N&&f==null&&m(j,W,hI,HI,Z,c,s);((uI=HI.onVnodeUpdated)||NI)&&queuePostRenderEffect(()=>{uI&&invokeVNodeHook(uI,Z,W,i),NI&&invokeDirectiveHook(W,i,Z,"updated")},c)},u=(i,W,Z,c,s,Y,N)=>{for(let j=0;j<W.length;j++){const oI=i[j],f=W[j],NI=oI.el&&(oI.type===Fragment||!isSameVNodeType(oI,f)||oI.shapeFlag&70)?L(oI.el):Z;M(oI,f,NI,null,c,s,Y,N,!0)}},m=(i,W,Z,c,s,Y,N)=>{if(Z!==c){if(Z!==EMPTY_OBJ)for(const j in Z)!isReservedProp(j)&&!(j in c)&&G(i,j,Z[j],null,N,W.children,s,Y,X);for(const j in c){if(isReservedProp(j))continue;const oI=c[j],f=Z[j];oI!==f&&j!=="value"&&G(i,j,f,oI,N,W.children,s,Y,X)}"value"in c&&G(i,"value",Z.value,c.value)}},J=(i,W,Z,c,s,Y,N,j,oI)=>{const f=W.el=i?i.el:k(""),NI=W.anchor=i?i.anchor:k("");let{patchFlag:hI,dynamicChildren:HI,slotScopeIds:uI}=W;uI&&(j=j?j.concat(uI):uI),i==null?(C(f,Z,c),C(NI,Z,c),d(W.children,Z,NI,s,Y,N,j,oI)):hI>0&&hI&64&&HI&&i.dynamicChildren?(u(i.dynamicChildren,HI,Z,s,Y,N,j),(W.key!=null||s&&W===s.subTree)&&traverseStaticChildren(i,W,!0)):JI(i,W,Z,NI,s,Y,N,j,oI)},r=(i,W,Z,c,s,Y,N,j,oI)=>{W.slotScopeIds=j,i==null?W.shapeFlag&512?s.ctx.activate(W,Z,c,N,oI):XI(W,Z,c,s,Y,N,oI):SI(i,W,oI)},XI=(i,W,Z,c,s,Y,N)=>{const j=i.component=createComponentInstance(i,c,s);if(isKeepAlive(i)&&(j.ctx.renderer=v),setupComponent(j),j.asyncDep){if(s&&s.registerDep(j,kI),!i.el){const oI=j.subTree=createVNode(Comment);z(null,oI,W,Z)}return}kI(j,i,W,Z,s,Y,N)},SI=(i,W,Z)=>{const c=W.component=i.component;if(shouldUpdateComponent(i,W,Z))if(c.asyncDep&&!c.asyncResolved){FI(c,W,Z);return}else c.next=W,invalidateJob(c.update),c.update();else W.el=i.el,c.vnode=W},kI=(i,W,Z,c,s,Y,N)=>{const j=()=>{if(i.isMounted){let{next:NI,bu:hI,u:HI,parent:uI,vnode:KI}=i,zI=NI,xI;toggleRecurse(i,!1),NI?(NI.el=KI.el,FI(i,NI,N)):NI=KI,hI&&invokeArrayFns(hI),(xI=NI.props&&NI.props.onVnodeBeforeUpdate)&&invokeVNodeHook(xI,uI,NI,KI),toggleRecurse(i,!0);const vI=renderComponentRoot(i),_I=i.subTree;i.subTree=vI,M(_I,vI,L(_I.el),T(_I),i,s,Y),NI.el=vI.el,zI===null&&updateHOCHostEl(i,vI.el),HI&&queuePostRenderEffect(HI,s),(xI=NI.props&&NI.props.onVnodeUpdated)&&queuePostRenderEffect(()=>invokeVNodeHook(xI,uI,NI,KI),s)}else{let NI;const{el:hI,props:HI}=W,{bm:uI,m:KI,parent:zI}=i,xI=isAsyncWrapper(W);if(toggleRecurse(i,!1),uI&&invokeArrayFns(uI),!xI&&(NI=HI&&HI.onVnodeBeforeMount)&&invokeVNodeHook(NI,zI,W),toggleRecurse(i,!0),hI&&U){const vI=()=>{i.subTree=renderComponentRoot(i),U(hI,i.subTree,i,s,null)};xI?W.type.__asyncLoader().then(()=>!i.isUnmounted&&vI()):vI()}else{const vI=i.subTree=renderComponentRoot(i);M(null,vI,Z,c,i,s,Y),W.el=vI.el}if(KI&&queuePostRenderEffect(KI,s),!xI&&(NI=HI&&HI.onVnodeMounted)){const vI=W;queuePostRenderEffect(()=>invokeVNodeHook(NI,zI,vI),s)}(W.shapeFlag&256||zI&&isAsyncWrapper(zI.vnode)&&zI.vnode.shapeFlag&256)&&i.a&&queuePostRenderEffect(i.a,s),i.isMounted=!0,W=Z=c=null}},oI=i.effect=new ReactiveEffect(j,()=>queueJob(f),i.scope),f=i.update=()=>oI.run();f.id=i.uid,toggleRecurse(i,!0),f()},FI=(i,W,Z)=>{W.component=i;const c=i.vnode.props;i.vnode=W,i.next=null,updateProps(i,W.props,c,Z),updateSlots(i,W.children,Z),pauseTracking(),flushPreFlushCbs(),resetTracking()},JI=(i,W,Z,c,s,Y,N,j,oI=!1)=>{const f=i&&i.children,NI=i?i.shapeFlag:0,hI=W.children,{patchFlag:HI,shapeFlag:uI}=W;if(HI>0){if(HI&128){UI(f,hI,Z,c,s,Y,N,j,oI);return}else if(HI&256){LI(f,hI,Z,c,s,Y,N,j,oI);return}}uI&8?(NI&16&&X(f,s,Y),hI!==f&&w(Z,hI)):NI&16?uI&16?UI(f,hI,Z,c,s,Y,N,j,oI):X(f,s,Y,!0):(NI&8&&w(Z,""),uI&16&&d(hI,Z,c,s,Y,N,j,oI))},LI=(i,W,Z,c,s,Y,N,j,oI)=>{i=i||EMPTY_ARR,W=W||EMPTY_ARR;const f=i.length,NI=W.length,hI=Math.min(f,NI);let HI;for(HI=0;HI<hI;HI++){const uI=W[HI]=oI?cloneIfMounted(W[HI]):normalizeVNode(W[HI]);M(i[HI],uI,Z,null,s,Y,N,j,oI)}f>NI?X(i,s,Y,!0,!1,hI):d(W,Z,c,s,Y,N,j,oI,hI)},UI=(i,W,Z,c,s,Y,N,j,oI)=>{let f=0;const NI=W.length;let hI=i.length-1,HI=NI-1;for(;f<=hI&&f<=HI;){const uI=i[f],KI=W[f]=oI?cloneIfMounted(W[f]):normalizeVNode(W[f]);if(isSameVNodeType(uI,KI))M(uI,KI,Z,null,s,Y,N,j,oI);else break;f++}for(;f<=hI&&f<=HI;){const uI=i[hI],KI=W[HI]=oI?cloneIfMounted(W[HI]):normalizeVNode(W[HI]);if(isSameVNodeType(uI,KI))M(uI,KI,Z,null,s,Y,N,j,oI);else break;hI--,HI--}if(f>hI){if(f<=HI){const uI=HI+1,KI=uI<NI?W[uI].el:c;for(;f<=HI;)M(null,W[f]=oI?cloneIfMounted(W[f]):normalizeVNode(W[f]),Z,KI,s,Y,N,j,oI),f++}}else if(f>HI)for(;f<=hI;)QI(i[f],s,Y,!0),f++;else{const uI=f,KI=f,zI=new Map;for(f=KI;f<=HI;f++){const pI=W[f]=oI?cloneIfMounted(W[f]):normalizeVNode(W[f]);pI.key!=null&&zI.set(pI.key,f)}let xI,vI=0;const _I=HI-KI+1;let yI=!1,rI=0;const Ig=new Array(_I);for(f=0;f<_I;f++)Ig[f]=0;for(f=uI;f<=hI;f++){const pI=i[f];if(vI>=_I){QI(pI,s,Y,!0);continue}let nI;if(pI.key!=null)nI=zI.get(pI.key);else for(xI=KI;xI<=HI;xI++)if(Ig[xI-KI]===0&&isSameVNodeType(pI,W[xI])){nI=xI;break}nI===void 0?QI(pI,s,Y,!0):(Ig[nI-KI]=f+1,nI>=rI?rI=nI:yI=!0,M(pI,W[nI],Z,null,s,Y,N,j,oI),vI++)}const Ag=yI?getSequence(Ig):EMPTY_ARR;for(xI=Ag.length-1,f=_I-1;f>=0;f--){const pI=KI+f,nI=W[pI],MI=pI+1<NI?W[pI+1].el:c;Ig[f]===0?M(null,nI,Z,MI,s,Y,N,j,oI):yI&&(xI<0||f!==Ag[xI]?TI(nI,Z,MI,2):xI--)}}},TI=(i,W,Z,c,s=null)=>{const{el:Y,type:N,transition:j,children:oI,shapeFlag:f}=i;if(f&6){TI(i.component.subTree,W,Z,c);return}if(f&128){i.suspense.move(W,Z,c);return}if(f&64){N.move(i,W,Z,v);return}if(N===Fragment){C(Y,W,Z);for(let hI=0;hI<oI.length;hI++)TI(oI[hI],W,Z,c);C(i.anchor,W,Z);return}if(N===Static){D(i,W,Z);return}if(c!==2&&f&1&&j)if(c===0)j.beforeEnter(Y),C(Y,W,Z),queuePostRenderEffect(()=>j.enter(Y),s);else{const{leave:hI,delayLeave:HI,afterLeave:uI}=j,KI=()=>C(Y,W,Z),zI=()=>{hI(Y,()=>{KI(),uI&&uI()})};HI?HI(Y,KI,zI):zI()}else C(Y,W,Z)},QI=(i,W,Z,c=!1,s=!1)=>{const{type:Y,props:N,ref:j,children:oI,dynamicChildren:f,shapeFlag:NI,patchFlag:hI,dirs:HI}=i;if(j!=null&&setRef(j,null,Z,i,!0),NI&256){W.ctx.deactivate(i);return}const uI=NI&1&&HI,KI=!isAsyncWrapper(i);let zI;if(KI&&(zI=N&&N.onVnodeBeforeUnmount)&&invokeVNodeHook(zI,W,i),NI&6)o(i.component,Z,c);else{if(NI&128){i.suspense.unmount(Z,c);return}uI&&invokeDirectiveHook(i,null,W,"beforeUnmount"),NI&64?i.type.remove(i,W,Z,s,v,c):f&&(Y!==Fragment||hI>0&&hI&64)?X(f,W,Z,!1,!0):(Y===Fragment&&hI&384||!s&&NI&16)&&X(oI,W,Z),c&&fI(i)}(KI&&(zI=N&&N.onVnodeUnmounted)||uI)&&queuePostRenderEffect(()=>{zI&&invokeVNodeHook(zI,W,i),uI&&invokeDirectiveHook(i,null,W,"unmounted")},Z)},fI=i=>{const{type:W,el:Z,anchor:c,transition:s}=i;if(W===Fragment){sI(Z,c);return}if(W===Static){R(i);return}const Y=()=>{l(Z),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(i.shapeFlag&1&&s&&!s.persisted){const{leave:N,delayLeave:j}=s,oI=()=>N(Z,Y);j?j(i.el,Y,oI):oI()}else Y()},sI=(i,W)=>{let Z;for(;i!==W;)Z=Q(i),l(i),i=Z;l(W)},o=(i,W,Z)=>{const{bum:c,scope:s,update:Y,subTree:N,um:j}=i;c&&invokeArrayFns(c),s.stop(),Y&&(Y.active=!1,QI(N,i,W,Z)),j&&queuePostRenderEffect(j,W),queuePostRenderEffect(()=>{i.isUnmounted=!0},W),W&&W.pendingBranch&&!W.isUnmounted&&i.asyncDep&&!i.asyncResolved&&i.suspenseId===W.pendingId&&(W.deps--,W.deps===0&&W.resolve())},X=(i,W,Z,c=!1,s=!1,Y=0)=>{for(let N=Y;N<i.length;N++)QI(i[N],W,Z,c,s)},T=i=>i.shapeFlag&6?T(i.component.subTree):i.shapeFlag&128?i.suspense.next():Q(i.anchor||i.el),P=(i,W,Z)=>{i==null?W._vnode&&QI(W._vnode,null,null,!0):M(W._vnode||null,i,W,null,null,null,Z),flushPreFlushCbs(),flushPostFlushCbs(),W._vnode=i},v={p:M,um:QI,m:TI,r:fI,mt:XI,mc:d,pc:JI,pbc:u,n:T,o:I};let aI,U;return g&&([aI,U]=g(v)),{render:P,hydrate:aI,createApp:createAppAPI(P,aI)}}function toggleRecurse({effect:I,update:g},A){I.allowRecurse=g.allowRecurse=A}function traverseStaticChildren(I,g,A=!1){const C=I.children,l=g.children;if(isArray(C)&&isArray(l))for(let G=0;G<C.length;G++){const B=C[G];let k=l[G];k.shapeFlag&1&&!k.dynamicChildren&&((k.patchFlag<=0||k.patchFlag===32)&&(k=l[G]=cloneIfMounted(l[G]),k.el=B.el),A||traverseStaticChildren(B,k)),k.type===Text&&(k.el=B.el)}}function getSequence(I){const g=I.slice(),A=[0];let C,l,G,B,k;const n=I.length;for(C=0;C<n;C++){const a=I[C];if(a!==0){if(l=A[A.length-1],I[l]<a){g[C]=l,A.push(C);continue}for(G=0,B=A.length-1;G<B;)k=G+B>>1,I[A[k]]<a?G=k+1:B=k;a<I[A[G]]&&(G>0&&(g[C]=A[G-1]),A[G]=C)}}for(G=A.length,B=A[G-1];G-- >0;)A[G]=B,B=g[B];return A}const isTeleport=I=>I.__isTeleport,Fragment=Symbol.for("v-fgt"),Text=Symbol.for("v-txt"),Comment=Symbol.for("v-cmt"),Static=Symbol.for("v-stc"),blockStack=[];let currentBlock=null;function openBlock(I=!1){blockStack.push(currentBlock=I?null:[])}function closeBlock(){blockStack.pop(),currentBlock=blockStack[blockStack.length-1]||null}let isBlockTreeEnabled=1;function setBlockTracking(I){isBlockTreeEnabled+=I}function setupBlock(I){return I.dynamicChildren=isBlockTreeEnabled>0?currentBlock||EMPTY_ARR:null,closeBlock(),isBlockTreeEnabled>0&&currentBlock&&currentBlock.push(I),I}function createElementBlock(I,g,A,C,l,G){return setupBlock(createBaseVNode(I,g,A,C,l,G,!0))}function createBlock(I,g,A,C,l){return setupBlock(createVNode(I,g,A,C,l,!0))}function isVNode(I){return I?I.__v_isVNode===!0:!1}function isSameVNodeType(I,g){return I.type===g.type&&I.key===g.key}const InternalObjectKey="__vInternal",normalizeKey=({key:I})=>I??null,normalizeRef=({ref:I,ref_key:g,ref_for:A})=>(typeof I=="number"&&(I=""+I),I!=null?isString(I)||isRef(I)||isFunction(I)?{i:currentRenderingInstance,r:I,k:g,f:!!A}:I:null);function createBaseVNode(I,g=null,A=null,C=0,l=null,G=I===Fragment?0:1,B=!1,k=!1){const n={__v_isVNode:!0,__v_skip:!0,type:I,props:g,key:g&&normalizeKey(g),ref:g&&normalizeRef(g),scopeId:currentScopeId,slotScopeIds:null,children:A,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:G,patchFlag:C,dynamicProps:l,dynamicChildren:null,appContext:null,ctx:currentRenderingInstance};return k?(normalizeChildren(n,A),G&128&&I.normalize(n)):A&&(n.shapeFlag|=isString(A)?8:16),isBlockTreeEnabled>0&&!B&&currentBlock&&(n.patchFlag>0||G&6)&&n.patchFlag!==32&&currentBlock.push(n),n}const createVNode=_createVNode;function _createVNode(I,g=null,A=null,C=0,l=null,G=!1){if((!I||I===NULL_DYNAMIC_COMPONENT)&&(I=Comment),isVNode(I)){const k=cloneVNode(I,g,!0);return A&&normalizeChildren(k,A),isBlockTreeEnabled>0&&!G&&currentBlock&&(k.shapeFlag&6?currentBlock[currentBlock.indexOf(I)]=k:currentBlock.push(k)),k.patchFlag|=-2,k}if(isClassComponent(I)&&(I=I.__vccOpts),g){g=guardReactiveProps(g);let{class:k,style:n}=g;k&&!isString(k)&&(g.class=normalizeClass(k)),isObject(n)&&(isProxy(n)&&!isArray(n)&&(n=extend({},n)),g.style=normalizeStyle(n))}const B=isString(I)?1:isSuspense(I)?128:isTeleport(I)?64:isObject(I)?4:isFunction(I)?2:0;return createBaseVNode(I,g,A,C,l,B,G,!0)}function guardReactiveProps(I){return I?isProxy(I)||InternalObjectKey in I?extend({},I):I:null}function cloneVNode(I,g,A=!1){const{props:C,ref:l,patchFlag:G,children:B}=I,k=g?mergeProps(C||{},g):C;return{__v_isVNode:!0,__v_skip:!0,type:I.type,props:k,key:k&&normalizeKey(k),ref:g&&g.ref?A&&l?isArray(l)?l.concat(normalizeRef(g)):[l,normalizeRef(g)]:normalizeRef(g):l,scopeId:I.scopeId,slotScopeIds:I.slotScopeIds,children:B,target:I.target,targetAnchor:I.targetAnchor,staticCount:I.staticCount,shapeFlag:I.shapeFlag,patchFlag:g&&I.type!==Fragment?G===-1?16:G|16:G,dynamicProps:I.dynamicProps,dynamicChildren:I.dynamicChildren,appContext:I.appContext,dirs:I.dirs,transition:I.transition,component:I.component,suspense:I.suspense,ssContent:I.ssContent&&cloneVNode(I.ssContent),ssFallback:I.ssFallback&&cloneVNode(I.ssFallback),el:I.el,anchor:I.anchor,ctx:I.ctx,ce:I.ce}}function createTextVNode(I=" ",g=0){return createVNode(Text,null,I,g)}function createStaticVNode(I,g){const A=createVNode(Static,null,I);return A.staticCount=g,A}function normalizeVNode(I){return I==null||typeof I=="boolean"?createVNode(Comment):isArray(I)?createVNode(Fragment,null,I.slice()):typeof I=="object"?cloneIfMounted(I):createVNode(Text,null,String(I))}function cloneIfMounted(I){return I.el===null&&I.patchFlag!==-1||I.memo?I:cloneVNode(I)}function normalizeChildren(I,g){let A=0;const{shapeFlag:C}=I;if(g==null)g=null;else if(isArray(g))A=16;else if(typeof g=="object")if(C&65){const l=g.default;l&&(l._c&&(l._d=!1),normalizeChildren(I,l()),l._c&&(l._d=!0));return}else{A=32;const l=g._;!l&&!(InternalObjectKey in g)?g._ctx=currentRenderingInstance:l===3&&currentRenderingInstance&&(currentRenderingInstance.slots._===1?g._=1:(g._=2,I.patchFlag|=1024))}else isFunction(g)?(g={default:g,_ctx:currentRenderingInstance},A=32):(g=String(g),C&64?(A=16,g=[createTextVNode(g)]):A=8);I.children=g,I.shapeFlag|=A}function mergeProps(...I){const g={};for(let A=0;A<I.length;A++){const C=I[A];for(const l in C)if(l==="class")g.class!==C.class&&(g.class=normalizeClass([g.class,C.class]));else if(l==="style")g.style=normalizeStyle([g.style,C.style]);else if(isOn(l)){const G=g[l],B=C[l];B&&G!==B&&!(isArray(G)&&G.includes(B))&&(g[l]=G?[].concat(G,B):B)}else l!==""&&(g[l]=C[l])}return g}function invokeVNodeHook(I,g,A,C=null){callWithAsyncErrorHandling(I,g,7,[A,C])}const emptyAppContext=createAppContext();let uid=0;function createComponentInstance(I,g,A){const C=I.type,l=(g?g.appContext:I.appContext)||emptyAppContext,G={uid:uid++,vnode:I,type:C,parent:g,appContext:l,root:null,next:null,subTree:null,effect:null,update:null,scope:new EffectScope(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:g?g.provides:Object.create(l.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:normalizePropsOptions(C,l),emitsOptions:normalizeEmitsOptions(C,l),emit:null,emitted:null,propsDefaults:EMPTY_OBJ,inheritAttrs:C.inheritAttrs,ctx:EMPTY_OBJ,data:EMPTY_OBJ,props:EMPTY_OBJ,attrs:EMPTY_OBJ,slots:EMPTY_OBJ,refs:EMPTY_OBJ,setupState:EMPTY_OBJ,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:A,suspenseId:A?A.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return G.ctx={_:G},G.root=g?g.root:G,G.emit=emit.bind(null,G),I.ce&&I.ce(G),G}let currentInstance=null,internalSetCurrentInstance,globalCurrentInstanceSetters,settersKey="__VUE_INSTANCE_SETTERS__";(globalCurrentInstanceSetters=getGlobalThis()[settersKey])||(globalCurrentInstanceSetters=getGlobalThis()[settersKey]=[]),globalCurrentInstanceSetters.push(I=>currentInstance=I),internalSetCurrentInstance=I=>{globalCurrentInstanceSetters.length>1?globalCurrentInstanceSetters.forEach(g=>g(I)):globalCurrentInstanceSetters[0](I)};const setCurrentInstance=I=>{internalSetCurrentInstance(I),I.scope.on()},unsetCurrentInstance=()=>{currentInstance&&currentInstance.scope.off(),internalSetCurrentInstance(null)};function isStatefulComponent(I){return I.vnode.shapeFlag&4}let isInSSRComponentSetup=!1;function setupComponent(I,g=!1){isInSSRComponentSetup=g;const{props:A,children:C}=I.vnode,l=isStatefulComponent(I);initProps(I,A,l,g),initSlots(I,C);const G=l?setupStatefulComponent(I,g):void 0;return isInSSRComponentSetup=!1,G}function setupStatefulComponent(I,g){const A=I.type;I.accessCache=Object.create(null),I.proxy=markRaw(new Proxy(I.ctx,PublicInstanceProxyHandlers));const{setup:C}=A;if(C){const l=I.setupContext=C.length>1?createSetupContext(I):null;setCurrentInstance(I),pauseTracking();const G=callWithErrorHandling(C,I,0,[I.props,l]);if(resetTracking(),unsetCurrentInstance(),isPromise(G)){if(G.then(unsetCurrentInstance,unsetCurrentInstance),g)return G.then(B=>{handleSetupResult(I,B,g)}).catch(B=>{handleError(B,I,0)});I.asyncDep=G}else handleSetupResult(I,G,g)}else finishComponentSetup(I,g)}function handleSetupResult(I,g,A){isFunction(g)?I.type.__ssrInlineRender?I.ssrRender=g:I.render=g:isObject(g)&&(I.setupState=proxyRefs(g)),finishComponentSetup(I,A)}let compile;function finishComponentSetup(I,g,A){const C=I.type;if(!I.render){if(!g&&compile&&!C.render){const l=C.template||resolveMergedOptions(I).template;if(l){const{isCustomElement:G,compilerOptions:B}=I.appContext.config,{delimiters:k,compilerOptions:n}=C,a=extend(extend({isCustomElement:G,delimiters:k},B),n);C.render=compile(l,a)}}I.render=C.render||NOOP}setCurrentInstance(I),pauseTracking(),applyOptions(I),resetTracking(),unsetCurrentInstance()}function getAttrsProxy(I){return I.attrsProxy||(I.attrsProxy=new Proxy(I.attrs,{get(g,A){return track(I,"get","$attrs"),g[A]}}))}function createSetupContext(I){const g=A=>{I.exposed=A||{}};return{get attrs(){return getAttrsProxy(I)},slots:I.slots,emit:I.emit,expose:g}}function getExposeProxy(I){if(I.exposed)return I.exposeProxy||(I.exposeProxy=new Proxy(proxyRefs(markRaw(I.exposed)),{get(g,A){if(A in g)return g[A];if(A in publicPropertiesMap)return publicPropertiesMap[A](I)},has(g,A){return A in g||A in publicPropertiesMap}}))}function isClassComponent(I){return isFunction(I)&&"__vccOpts"in I}const computed=(I,g)=>computed$1(I,g,isInSSRComponentSetup),ssrContextKey=Symbol.for("v-scx"),useSSRContext=()=>inject(ssrContextKey),version="3.3.4",svgNS="http://www.w3.org/2000/svg",doc=typeof document<"u"?document:null,templateContainer=doc&&doc.createElement("template"),nodeOps={insert:(I,g,A)=>{g.insertBefore(I,A||null)},remove:I=>{const g=I.parentNode;g&&g.removeChild(I)},createElement:(I,g,A,C)=>{const l=g?doc.createElementNS(svgNS,I):doc.createElement(I,A?{is:A}:void 0);return I==="select"&&C&&C.multiple!=null&&l.setAttribute("multiple",C.multiple),l},createText:I=>doc.createTextNode(I),createComment:I=>doc.createComment(I),setText:(I,g)=>{I.nodeValue=g},setElementText:(I,g)=>{I.textContent=g},parentNode:I=>I.parentNode,nextSibling:I=>I.nextSibling,querySelector:I=>doc.querySelector(I),setScopeId(I,g){I.setAttribute(g,"")},insertStaticContent(I,g,A,C,l,G){const B=A?A.previousSibling:g.lastChild;if(l&&(l===G||l.nextSibling))for(;g.insertBefore(l.cloneNode(!0),A),!(l===G||!(l=l.nextSibling)););else{templateContainer.innerHTML=C?`<svg>${I}</svg>`:I;const k=templateContainer.content;if(C){const n=k.firstChild;for(;n.firstChild;)k.appendChild(n.firstChild);k.removeChild(n)}g.insertBefore(k,A)}return[B?B.nextSibling:g.firstChild,A?A.previousSibling:g.lastChild]}};function patchClass(I,g,A){const C=I._vtc;C&&(g=(g?[g,...C]:[...C]).join(" ")),g==null?I.removeAttribute("class"):A?I.setAttribute("class",g):I.className=g}function patchStyle(I,g,A){const C=I.style,l=isString(A);if(A&&!l){if(g&&!isString(g))for(const G in g)A[G]==null&&setStyle(C,G,"");for(const G in A)setStyle(C,G,A[G])}else{const G=C.display;l?g!==A&&(C.cssText=A):g&&I.removeAttribute("style"),"_vod"in I&&(C.display=G)}}const importantRE=/\s*!important$/;function setStyle(I,g,A){if(isArray(A))A.forEach(C=>setStyle(I,g,C));else if(A==null&&(A=""),g.startsWith("--"))I.setProperty(g,A);else{const C=autoPrefix(I,g);importantRE.test(A)?I.setProperty(hyphenate(C),A.replace(importantRE,""),"important"):I[C]=A}}const prefixes=["Webkit","Moz","ms"],prefixCache={};function autoPrefix(I,g){const A=prefixCache[g];if(A)return A;let C=camelize(g);if(C!=="filter"&&C in I)return prefixCache[g]=C;C=capitalize(C);for(let l=0;l<prefixes.length;l++){const G=prefixes[l]+C;if(G in I)return prefixCache[g]=G}return g}const xlinkNS="http://www.w3.org/1999/xlink";function patchAttr(I,g,A,C,l){if(C&&g.startsWith("xlink:"))A==null?I.removeAttributeNS(xlinkNS,g.slice(6,g.length)):I.setAttributeNS(xlinkNS,g,A);else{const G=isSpecialBooleanAttr(g);A==null||G&&!includeBooleanAttr(A)?I.removeAttribute(g):I.setAttribute(g,G?"":A)}}function patchDOMProp(I,g,A,C,l,G,B){if(g==="innerHTML"||g==="textContent"){C&&B(C,l,G),I[g]=A??"";return}const k=I.tagName;if(g==="value"&&k!=="PROGRESS"&&!k.includes("-")){I._value=A;const a=k==="OPTION"?I.getAttribute("value"):I.value,w=A??"";a!==w&&(I.value=w),A==null&&I.removeAttribute(g);return}let n=!1;if(A===""||A==null){const a=typeof I[g];a==="boolean"?A=includeBooleanAttr(A):A==null&&a==="string"?(A="",n=!0):a==="number"&&(A=0,n=!0)}try{I[g]=A}catch{}n&&I.removeAttribute(g)}function addEventListener(I,g,A,C){I.addEventListener(g,A,C)}function removeEventListener(I,g,A,C){I.removeEventListener(g,A,C)}function patchEvent(I,g,A,C,l=null){const G=I._vei||(I._vei={}),B=G[g];if(C&&B)B.value=C;else{const[k,n]=parseName(g);if(C){const a=G[g]=createInvoker(C,l);addEventListener(I,k,a,n)}else B&&(removeEventListener(I,k,B,n),G[g]=void 0)}}const optionsModifierRE=/(?:Once|Passive|Capture)$/;function parseName(I){let g;if(optionsModifierRE.test(I)){g={};let C;for(;C=I.match(optionsModifierRE);)I=I.slice(0,I.length-C[0].length),g[C[0].toLowerCase()]=!0}return[I[2]===":"?I.slice(3):hyphenate(I.slice(2)),g]}let cachedNow=0;const p=Promise.resolve(),getNow=()=>cachedNow||(p.then(()=>cachedNow=0),cachedNow=Date.now());function createInvoker(I,g){const A=C=>{if(!C._vts)C._vts=Date.now();else if(C._vts<=A.attached)return;callWithAsyncErrorHandling(patchStopImmediatePropagation(C,A.value),g,5,[C])};return A.value=I,A.attached=getNow(),A}function patchStopImmediatePropagation(I,g){if(isArray(g)){const A=I.stopImmediatePropagation;return I.stopImmediatePropagation=()=>{A.call(I),I._stopped=!0},g.map(C=>l=>!l._stopped&&C&&C(l))}else return g}const nativeOnRE=/^on[a-z]/,patchProp=(I,g,A,C,l=!1,G,B,k,n)=>{g==="class"?patchClass(I,C,l):g==="style"?patchStyle(I,A,C):isOn(g)?isModelListener(g)||patchEvent(I,g,A,C,B):(g[0]==="."?(g=g.slice(1),!0):g[0]==="^"?(g=g.slice(1),!1):shouldSetAsProp(I,g,C,l))?patchDOMProp(I,g,C,G,B,k,n):(g==="true-value"?I._trueValue=C:g==="false-value"&&(I._falseValue=C),patchAttr(I,g,C,l))};function shouldSetAsProp(I,g,A,C){return C?!!(g==="innerHTML"||g==="textContent"||g in I&&nativeOnRE.test(g)&&isFunction(A)):g==="spellcheck"||g==="draggable"||g==="translate"||g==="form"||g==="list"&&I.tagName==="INPUT"||g==="type"&&I.tagName==="TEXTAREA"||nativeOnRE.test(g)&&isString(A)?!1:g in I}const vShow={beforeMount(I,{value:g},{transition:A}){I._vod=I.style.display==="none"?"":I.style.display,A&&g?A.beforeEnter(I):setDisplay(I,g)},mounted(I,{value:g},{transition:A}){A&&g&&A.enter(I)},updated(I,{value:g,oldValue:A},{transition:C}){!g!=!A&&(C?g?(C.beforeEnter(I),setDisplay(I,!0),C.enter(I)):C.leave(I,()=>{setDisplay(I,!1)}):setDisplay(I,g))},beforeUnmount(I,{value:g}){setDisplay(I,g)}};function setDisplay(I,g){I.style.display=g?I._vod:"none"}const rendererOptions=extend({patchProp},nodeOps);let renderer;function ensureRenderer(){return renderer||(renderer=createRenderer(rendererOptions))}const createApp=(...I)=>{const g=ensureRenderer().createApp(...I),{mount:A}=g;return g.mount=C=>{const l=normalizeContainer(C);if(!l)return;const G=g._component;!isFunction(G)&&!G.render&&!G.template&&(G.template=l.innerHTML),l.innerHTML="";const B=A(l,!1,l instanceof SVGElement);return l instanceof Element&&(l.removeAttribute("v-cloak"),l.setAttribute("data-v-app","")),B},g};function normalizeContainer(I){return isString(I)?document.querySelector(I):I}const style="",HelloWorld_vue_vue_type_style_index_0_scoped_4b8d1567_lang="",_export_sfc=(I,g)=>{const A=I.__vccOpts||I;for(const[C,l]of g)A[C]=l;return A},_imports_0="/portfolio/assets/self-579eaa7e.jpg",Profile_vue_vue_type_style_index_0_lang="",_sfc_main$4={},_hoisted_1$4=createBaseVNode("h1",null,"Profile",-1),_hoisted_2$2=createBaseVNode("figure",{class:"profile-image"},[createBaseVNode("img",{src:_imports_0})],-1),_hoisted_3$1=createBaseVNode("h2",null,"松尾　早一朗",-1),_hoisted_4$1=createBaseVNode("p",null,"九州大学大学院　システム情報科学府　情報理工学専攻　修士2年(24卒)",-1),_hoisted_5$1=createBaseVNode("h3",null,"自己紹介",-1),_hoisted_6=createBaseVNode("p",null,[createTextVNode("研究分野はラーニングアナリティクスで，教育データの関連付けに関する研究に取り組んでいる． "),createBaseVNode("br"),createTextVNode("研究では，自然言語処理によるデータ間の類似度の可視化を行なっている． "),createBaseVNode("br"),createTextVNode("使用言語はPython，DBとしてMySQL，MongoDB，Neo4jを利用している． "),createBaseVNode("br"),createTextVNode("最近フロント(Vue.js)を独学で勉強中．．． ")],-1);function _sfc_render$2(I,g){return openBlock(),createElementBlock(Fragment,null,[_hoisted_1$4,_hoisted_2$2,_hoisted_3$1,_hoisted_4$1,_hoisted_5$1,_hoisted_6],64)}const Profile=_export_sfc(_sfc_main$4,[["render",_sfc_render$2]]);function getAugmentedNamespace(I){if(I.__esModule)return I;var g=I.default;if(typeof g=="function"){var A=function C(){if(this instanceof C){var l=[null];l.push.apply(l,arguments);var G=Function.bind.apply(g,l);return new G}return g.apply(this,arguments)};A.prototype=g.prototype}else A={};return Object.defineProperty(A,"__esModule",{value:!0}),Object.keys(I).forEach(function(C){var l=Object.getOwnPropertyDescriptor(I,C);Object.defineProperty(A,C,l.get?l:{enumerable:!0,get:function(){return I[C]}})}),A}function commonjsRequire(I){throw new Error('Could not dynamically require "'+I+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var pdf={exports:{}};const __viteBrowserExternal={},__viteBrowserExternal$1=Object.freeze(Object.defineProperty({__proto__:null,default:__viteBrowserExternal},Symbol.toStringTag,{value:"Module"})),require$$5=getAugmentedNamespace(__viteBrowserExternal$1);(function(module,exports){(function(g,A){module.exports=A()})(globalThis,()=>(()=>{var __webpack_modules__=[,(I,g)=>{var Ag;Object.defineProperty(g,"__esModule",{value:!0}),g.VerbosityLevel=g.Util=g.UnknownErrorException=g.UnexpectedResponseException=g.TextRenderingMode=g.RenderingIntentFlag=g.PromiseCapability=g.PermissionFlag=g.PasswordResponses=g.PasswordException=g.PageActionEventType=g.OPS=g.MissingPDFException=g.MAX_IMAGE_SIZE_TO_CACHE=g.LINE_FACTOR=g.LINE_DESCENT_FACTOR=g.InvalidPDFException=g.ImageKind=g.IDENTITY_MATRIX=g.FormatError=g.FeatureTest=g.FONT_IDENTITY_MATRIX=g.DocumentActionEventType=g.CMapCompressionType=g.BaseException=g.BASELINE_FACTOR=g.AnnotationType=g.AnnotationStateModelType=g.AnnotationReviewState=g.AnnotationReplyType=g.AnnotationMode=g.AnnotationMarkedState=g.AnnotationFlag=g.AnnotationFieldFlag=g.AnnotationEditorType=g.AnnotationEditorPrefix=g.AnnotationEditorParamsType=g.AnnotationBorderStyleType=g.AnnotationActionEventType=g.AbortException=void 0,g.assert=TI,g.bytesToString=W,g.createValidAbsoluteUrl=fI,g.getModificationDate=vI,g.getVerbosityLevel=FI,g.info=JI,g.isArrayBuffer=zI,g.isArrayEqual=xI,g.normalizeUnicode=Ig,g.objectFromMap=Y,g.objectSize=s,g.setVerbosityLevel=kI,g.shadow=sI,g.string32=c,g.stringToBytes=Z,g.stringToPDFString=HI,g.stringToUTF8String=uI,g.unreachable=UI,g.utf8StringToString=KI,g.warn=LI;const A=[1,0,0,1,0,0];g.IDENTITY_MATRIX=A;const C=[.001,0,0,.001,0,0];g.FONT_IDENTITY_MATRIX=C;const l=1e7;g.MAX_IMAGE_SIZE_TO_CACHE=l;const G=1.35;g.LINE_FACTOR=G;const B=.35;g.LINE_DESCENT_FACTOR=B;const k=B/G;g.BASELINE_FACTOR=k;const n={ANY:1,DISPLAY:2,PRINT:4,SAVE:8,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,OPLIST:256};g.RenderingIntentFlag=n;const a={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3};g.AnnotationMode=a;const w="pdfjs_internal_editor_";g.AnnotationEditorPrefix=w;const L={DISABLE:-1,NONE:0,FREETEXT:3,INK:15};g.AnnotationEditorType=L;const Q={FREETEXT_SIZE:1,FREETEXT_COLOR:2,FREETEXT_OPACITY:3,INK_COLOR:11,INK_THICKNESS:12,INK_OPACITY:13};g.AnnotationEditorParamsType=Q;const S={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048};g.PermissionFlag=S;const y={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4};g.TextRenderingMode=y;const M={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3};g.ImageKind=M;const F={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26};g.AnnotationType=F;const z={MARKED:"Marked",REVIEW:"Review"};g.AnnotationStateModelType=z;const O={MARKED:"Marked",UNMARKED:"Unmarked"};g.AnnotationMarkedState=O;const D={ACCEPTED:"Accepted",REJECTED:"Rejected",CANCELLED:"Cancelled",COMPLETED:"Completed",NONE:"None"};g.AnnotationReviewState=D;const R={GROUP:"Group",REPLY:"R"};g.AnnotationReplyType=R;const q={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512};g.AnnotationFlag=q;const II={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864};g.AnnotationFieldFlag=II;const t={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5};g.AnnotationBorderStyleType=t;const d={E:"Mouse Enter",X:"Mouse Exit",D:"Mouse Down",U:"Mouse Up",Fo:"Focus",Bl:"Blur",PO:"PageOpen",PC:"PageClose",PV:"PageVisible",PI:"PageInvisible",K:"Keystroke",F:"Format",V:"Validate",C:"Calculate"};g.AnnotationActionEventType=d;const b={WC:"WillClose",WS:"WillSave",DS:"DidSave",WP:"WillPrint",DP:"DidPrint"};g.DocumentActionEventType=b;const u={O:"PageOpen",C:"PageClose"};g.PageActionEventType=u;const m={ERRORS:0,WARNINGS:1,INFOS:5};g.VerbosityLevel=m;const J={NONE:0,BINARY:1};g.CMapCompressionType=J;const r={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotation:80,endAnnotation:81,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91};g.OPS=r;const XI={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};g.PasswordResponses=XI;let SI=m.WARNINGS;function kI(pI){Number.isInteger(pI)&&(SI=pI)}function FI(){return SI}function JI(pI){SI>=m.INFOS&&console.log(`Info: ${pI}`)}function LI(pI){SI>=m.WARNINGS&&console.log(`Warning: ${pI}`)}function UI(pI){throw new Error(pI)}function TI(pI,nI){pI||UI(nI)}function QI(pI){switch(pI==null?void 0:pI.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}function fI(pI,nI=null,MI=null){if(!pI)return null;try{if(MI&&typeof pI=="string"){if(MI.addDefaultProtocol&&pI.startsWith("www.")){const cg=pI.match(/\./g);(cg==null?void 0:cg.length)>=2&&(pI=`http://${pI}`)}if(MI.tryConvertEncoding)try{pI=uI(pI)}catch{}}const EI=nI?new URL(pI,nI):new URL(pI);if(QI(EI))return EI}catch{}return null}function sI(pI,nI,MI,EI=!1){return Object.defineProperty(pI,nI,{value:MI,enumerable:!EI,configurable:!0,writable:!1}),MI}const o=function(){function nI(MI,EI){this.constructor===nI&&UI("Cannot initialize BaseException."),this.message=MI,this.name=EI}return nI.prototype=new Error,nI.constructor=nI,nI}();g.BaseException=o;class X extends o{constructor(nI,MI){super(nI,"PasswordException"),this.code=MI}}g.PasswordException=X;class T extends o{constructor(nI,MI){super(nI,"UnknownErrorException"),this.details=MI}}g.UnknownErrorException=T;class P extends o{constructor(nI){super(nI,"InvalidPDFException")}}g.InvalidPDFException=P;class v extends o{constructor(nI){super(nI,"MissingPDFException")}}g.MissingPDFException=v;class aI extends o{constructor(nI,MI){super(nI,"UnexpectedResponseException"),this.status=MI}}g.UnexpectedResponseException=aI;class U extends o{constructor(nI){super(nI,"FormatError")}}g.FormatError=U;class i extends o{constructor(nI){super(nI,"AbortException")}}g.AbortException=i;function W(pI){(typeof pI!="object"||(pI==null?void 0:pI.length)===void 0)&&UI("Invalid argument for bytesToString");const nI=pI.length,MI=8192;if(nI<MI)return String.fromCharCode.apply(null,pI);const EI=[];for(let cg=0;cg<nI;cg+=MI){const mg=Math.min(cg+MI,nI),wg=pI.subarray(cg,mg);EI.push(String.fromCharCode.apply(null,wg))}return EI.join("")}function Z(pI){typeof pI!="string"&&UI("Invalid argument for stringToBytes");const nI=pI.length,MI=new Uint8Array(nI);for(let EI=0;EI<nI;++EI)MI[EI]=pI.charCodeAt(EI)&255;return MI}function c(pI){return String.fromCharCode(pI>>24&255,pI>>16&255,pI>>8&255,pI&255)}function s(pI){return Object.keys(pI).length}function Y(pI){const nI=Object.create(null);for(const[MI,EI]of pI)nI[MI]=EI;return nI}function N(){const pI=new Uint8Array(4);return pI[0]=1,new Uint32Array(pI.buffer,0,1)[0]===1}function j(){try{return new Function(""),!0}catch{return!1}}class oI{static get isLittleEndian(){return sI(this,"isLittleEndian",N())}static get isEvalSupported(){return sI(this,"isEvalSupported",j())}static get isOffscreenCanvasSupported(){return sI(this,"isOffscreenCanvasSupported",typeof OffscreenCanvas<"u")}static get platform(){return typeof navigator>"u"?sI(this,"platform",{isWin:!1,isMac:!1}):sI(this,"platform",{isWin:navigator.platform.includes("Win"),isMac:navigator.platform.includes("Mac")})}}g.FeatureTest=oI;const f=[...Array(256).keys()].map(pI=>pI.toString(16).padStart(2,"0"));class NI{static makeHexColor(nI,MI,EI){return`#${f[nI]}${f[MI]}${f[EI]}`}static scaleMinMax(nI,MI){let EI;nI[0]?(nI[0]<0&&(EI=MI[0],MI[0]=MI[1],MI[1]=EI),MI[0]*=nI[0],MI[1]*=nI[0],nI[3]<0&&(EI=MI[2],MI[2]=MI[3],MI[3]=EI),MI[2]*=nI[3],MI[3]*=nI[3]):(EI=MI[0],MI[0]=MI[2],MI[2]=EI,EI=MI[1],MI[1]=MI[3],MI[3]=EI,nI[1]<0&&(EI=MI[2],MI[2]=MI[3],MI[3]=EI),MI[2]*=nI[1],MI[3]*=nI[1],nI[2]<0&&(EI=MI[0],MI[0]=MI[1],MI[1]=EI),MI[0]*=nI[2],MI[1]*=nI[2]),MI[0]+=nI[4],MI[1]+=nI[4],MI[2]+=nI[5],MI[3]+=nI[5]}static transform(nI,MI){return[nI[0]*MI[0]+nI[2]*MI[1],nI[1]*MI[0]+nI[3]*MI[1],nI[0]*MI[2]+nI[2]*MI[3],nI[1]*MI[2]+nI[3]*MI[3],nI[0]*MI[4]+nI[2]*MI[5]+nI[4],nI[1]*MI[4]+nI[3]*MI[5]+nI[5]]}static applyTransform(nI,MI){const EI=nI[0]*MI[0]+nI[1]*MI[2]+MI[4],cg=nI[0]*MI[1]+nI[1]*MI[3]+MI[5];return[EI,cg]}static applyInverseTransform(nI,MI){const EI=MI[0]*MI[3]-MI[1]*MI[2],cg=(nI[0]*MI[3]-nI[1]*MI[2]+MI[2]*MI[5]-MI[4]*MI[3])/EI,mg=(-nI[0]*MI[1]+nI[1]*MI[0]+MI[4]*MI[1]-MI[5]*MI[0])/EI;return[cg,mg]}static getAxialAlignedBoundingBox(nI,MI){const EI=NI.applyTransform(nI,MI),cg=NI.applyTransform(nI.slice(2,4),MI),mg=NI.applyTransform([nI[0],nI[3]],MI),wg=NI.applyTransform([nI[2],nI[1]],MI);return[Math.min(EI[0],cg[0],mg[0],wg[0]),Math.min(EI[1],cg[1],mg[1],wg[1]),Math.max(EI[0],cg[0],mg[0],wg[0]),Math.max(EI[1],cg[1],mg[1],wg[1])]}static inverseTransform(nI){const MI=nI[0]*nI[3]-nI[1]*nI[2];return[nI[3]/MI,-nI[1]/MI,-nI[2]/MI,nI[0]/MI,(nI[2]*nI[5]-nI[4]*nI[3])/MI,(nI[4]*nI[1]-nI[5]*nI[0])/MI]}static singularValueDecompose2dScale(nI){const MI=[nI[0],nI[2],nI[1],nI[3]],EI=nI[0]*MI[0]+nI[1]*MI[2],cg=nI[0]*MI[1]+nI[1]*MI[3],mg=nI[2]*MI[0]+nI[3]*MI[2],wg=nI[2]*MI[1]+nI[3]*MI[3],Wg=(EI+wg)/2,Hg=Math.sqrt((EI+wg)**2-4*(EI*wg-mg*cg))/2,yg=Wg+Hg||1,eI=Wg-Hg||1;return[Math.sqrt(yg),Math.sqrt(eI)]}static normalizeRect(nI){const MI=nI.slice(0);return nI[0]>nI[2]&&(MI[0]=nI[2],MI[2]=nI[0]),nI[1]>nI[3]&&(MI[1]=nI[3],MI[3]=nI[1]),MI}static intersect(nI,MI){const EI=Math.max(Math.min(nI[0],nI[2]),Math.min(MI[0],MI[2])),cg=Math.min(Math.max(nI[0],nI[2]),Math.max(MI[0],MI[2]));if(EI>cg)return null;const mg=Math.max(Math.min(nI[1],nI[3]),Math.min(MI[1],MI[3])),wg=Math.min(Math.max(nI[1],nI[3]),Math.max(MI[1],MI[3]));return mg>wg?null:[EI,mg,cg,wg]}static bezierBoundingBox(nI,MI,EI,cg,mg,wg,Wg,Hg){const yg=[],eI=[[],[]];let jI,PI,qI,$I,Cg,lg,gg,Gg;for(let bg=0;bg<2;++bg){if(bg===0?(PI=6*nI-12*EI+6*mg,jI=-3*nI+9*EI-9*mg+3*Wg,qI=3*EI-3*nI):(PI=6*MI-12*cg+6*wg,jI=-3*MI+9*cg-9*wg+3*Hg,qI=3*cg-3*MI),Math.abs(jI)<1e-12){if(Math.abs(PI)<1e-12)continue;$I=-qI/PI,0<$I&&$I<1&&yg.push($I);continue}gg=PI*PI-4*qI*jI,Gg=Math.sqrt(gg),!(gg<0)&&(Cg=(-PI+Gg)/(2*jI),0<Cg&&Cg<1&&yg.push(Cg),lg=(-PI-Gg)/(2*jI),0<lg&&lg<1&&yg.push(lg))}let Zg=yg.length,dg;const ig=Zg;for(;Zg--;)$I=yg[Zg],dg=1-$I,eI[0][Zg]=dg*dg*dg*nI+3*dg*dg*$I*EI+3*dg*$I*$I*mg+$I*$I*$I*Wg,eI[1][Zg]=dg*dg*dg*MI+3*dg*dg*$I*cg+3*dg*$I*$I*wg+$I*$I*$I*Hg;return eI[0][ig]=nI,eI[1][ig]=MI,eI[0][ig+1]=Wg,eI[1][ig+1]=Hg,eI[0].length=eI[1].length=ig+2,[Math.min(...eI[0]),Math.min(...eI[1]),Math.max(...eI[0]),Math.max(...eI[1])]}}g.Util=NI;const hI=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364];function HI(pI){if(pI[0]>="ï"){let MI;if(pI[0]==="þ"&&pI[1]==="ÿ"?MI="utf-16be":pI[0]==="ÿ"&&pI[1]==="þ"?MI="utf-16le":pI[0]==="ï"&&pI[1]==="»"&&pI[2]==="¿"&&(MI="utf-8"),MI)try{const EI=new TextDecoder(MI,{fatal:!0}),cg=Z(pI);return EI.decode(cg)}catch(EI){LI(`stringToPDFString: "${EI}".`)}}const nI=[];for(let MI=0,EI=pI.length;MI<EI;MI++){const cg=hI[pI.charCodeAt(MI)];nI.push(cg?String.fromCharCode(cg):pI.charAt(MI))}return nI.join("")}function uI(pI){return decodeURIComponent(escape(pI))}function KI(pI){return unescape(encodeURIComponent(pI))}function zI(pI){return typeof pI=="object"&&(pI==null?void 0:pI.byteLength)!==void 0}function xI(pI,nI){if(pI.length!==nI.length)return!1;for(let MI=0,EI=pI.length;MI<EI;MI++)if(pI[MI]!==nI[MI])return!1;return!0}function vI(pI=new Date){return[pI.getUTCFullYear().toString(),(pI.getUTCMonth()+1).toString().padStart(2,"0"),pI.getUTCDate().toString().padStart(2,"0"),pI.getUTCHours().toString().padStart(2,"0"),pI.getUTCMinutes().toString().padStart(2,"0"),pI.getUTCSeconds().toString().padStart(2,"0")].join("")}class _I{constructor(){DI(this,Ag,!1);this.promise=new Promise((nI,MI)=>{this.resolve=EI=>{OI(this,Ag,!0),nI(EI)},this.reject=EI=>{OI(this,Ag,!0),MI(EI)}})}get settled(){return V(this,Ag)}}Ag=new WeakMap,g.PromiseCapability=_I;let yI=null,rI=null;function Ig(pI){return yI||(yI=/([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu,rI=new Map([["ﬅ","ſt"]])),pI.replaceAll(yI,(nI,MI,EI)=>MI?MI.normalize("NFKC"):rI.get(EI))}},(__unused_webpack_module,exports,__w_pdfjs_require__)=>{var I,A,C,l,ug,B,Tg,n,a,w,L,Q,S,y,M,rg,z,O,Eg,R,q;Object.defineProperty(exports,"__esModule",{value:!0}),exports.build=exports.RenderTask=exports.PDFWorkerUtil=exports.PDFWorker=exports.PDFPageProxy=exports.PDFDocumentProxy=exports.PDFDocumentLoadingTask=exports.PDFDataRangeTransport=exports.LoopbackPort=exports.DefaultStandardFontDataFactory=exports.DefaultFilterFactory=exports.DefaultCanvasFactory=exports.DefaultCMapReaderFactory=void 0,exports.getDocument=getDocument,exports.version=void 0;var _util=__w_pdfjs_require__(1),_annotation_storage=__w_pdfjs_require__(3),_display_utils=__w_pdfjs_require__(6),_font_loader=__w_pdfjs_require__(9),_canvas=__w_pdfjs_require__(11),_worker_options=__w_pdfjs_require__(14),_is_node=__w_pdfjs_require__(10),_message_handler=__w_pdfjs_require__(15),_metadata=__w_pdfjs_require__(16),_optional_content_config=__w_pdfjs_require__(17),_transport_stream=__w_pdfjs_require__(18),_xfa_text=__w_pdfjs_require__(19);const DEFAULT_RANGE_CHUNK_SIZE=65536,RENDERING_CANCELLED_TIMEOUT=100,DELAYED_CLEANUP_TIMEOUT=5e3;let DefaultCanvasFactory=_display_utils.DOMCanvasFactory;exports.DefaultCanvasFactory=DefaultCanvasFactory;let DefaultCMapReaderFactory=_display_utils.DOMCMapReaderFactory;exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory;let DefaultFilterFactory=_display_utils.DOMFilterFactory;exports.DefaultFilterFactory=DefaultFilterFactory;let DefaultStandardFontDataFactory=_display_utils.DOMStandardFontDataFactory;if(exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory,_is_node.isNodeJS){const{NodeCanvasFactory:t,NodeCMapReaderFactory:d,NodeFilterFactory:b,NodeStandardFontDataFactory:u}=__w_pdfjs_require__(20);exports.DefaultCanvasFactory=DefaultCanvasFactory=t,exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory=d,exports.DefaultFilterFactory=DefaultFilterFactory=b,exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory=u}let createPDFNetworkStream;if(_is_node.isNodeJS){const{PDFNodeStream:t}=__w_pdfjs_require__(21);createPDFNetworkStream=d=>new t(d)}else{const{PDFNetworkStream:t}=__w_pdfjs_require__(24),{PDFFetchStream:d}=__w_pdfjs_require__(25);createPDFNetworkStream=b=>(0,_display_utils.isValidFetchUrl)(b.url)?new d(b):new t(b)}function getDocument(t){if(typeof t=="string"||t instanceof URL?t={url:t}:(0,_util.isArrayBuffer)(t)&&(t={data:t}),typeof t!="object")throw new Error("Invalid parameter in getDocument, need parameter object.");if(!t.url&&!t.data&&!t.range)throw new Error("Invalid parameter object: need either .data, .range or .url");const d=new PDFDocumentLoadingTask,{docId:b}=d,u=t.url?getUrlProp(t.url):null,m=t.data?getDataProp(t.data):null,J=t.httpHeaders||null,r=t.withCredentials===!0,XI=t.password??null,SI=t.range instanceof PDFDataRangeTransport?t.range:null,kI=Number.isInteger(t.rangeChunkSize)&&t.rangeChunkSize>0?t.rangeChunkSize:DEFAULT_RANGE_CHUNK_SIZE;let FI=t.worker instanceof PDFWorker?t.worker:null;const JI=t.verbosity,LI=typeof t.docBaseUrl=="string"&&!(0,_display_utils.isDataScheme)(t.docBaseUrl)?t.docBaseUrl:null,UI=typeof t.cMapUrl=="string"?t.cMapUrl:null,TI=t.cMapPacked!==!1,QI=t.CMapReaderFactory||DefaultCMapReaderFactory,fI=typeof t.standardFontDataUrl=="string"?t.standardFontDataUrl:null,sI=t.StandardFontDataFactory||DefaultStandardFontDataFactory,o=t.stopAtErrors!==!0,X=Number.isInteger(t.maxImageSize)&&t.maxImageSize>-1?t.maxImageSize:-1,T=t.isEvalSupported!==!1,P=typeof t.isOffscreenCanvasSupported=="boolean"?t.isOffscreenCanvasSupported:!_is_node.isNodeJS,v=Number.isInteger(t.canvasMaxAreaInBytes)?t.canvasMaxAreaInBytes:-1,aI=typeof t.disableFontFace=="boolean"?t.disableFontFace:_is_node.isNodeJS,U=t.fontExtraProperties===!0,i=t.enableXfa===!0,W=t.ownerDocument||globalThis.document,Z=t.disableRange===!0,c=t.disableStream===!0,s=t.disableAutoFetch===!0,Y=t.pdfBug===!0,N=SI?SI.length:t.length??NaN,j=typeof t.useSystemFonts=="boolean"?t.useSystemFonts:!_is_node.isNodeJS&&!aI,oI=typeof t.useWorkerFetch=="boolean"?t.useWorkerFetch:QI===_display_utils.DOMCMapReaderFactory&&sI===_display_utils.DOMStandardFontDataFactory&&(0,_display_utils.isValidFetchUrl)(UI,document.baseURI)&&(0,_display_utils.isValidFetchUrl)(fI,document.baseURI),f=t.canvasFactory||new DefaultCanvasFactory({ownerDocument:W}),NI=t.filterFactory||new DefaultFilterFactory({docId:b,ownerDocument:W}),hI=null;(0,_util.setVerbosityLevel)(JI);const HI={canvasFactory:f,filterFactory:NI};if(oI||(HI.cMapReaderFactory=new QI({baseUrl:UI,isCompressed:TI}),HI.standardFontDataFactory=new sI({baseUrl:fI})),!FI){const zI={verbosity:JI,port:_worker_options.GlobalWorkerOptions.workerPort};FI=zI.port?PDFWorker.fromPort(zI):new PDFWorker(zI),d._worker=FI}const uI={docId:b,apiVersion:"3.7.107",data:m,password:XI,disableAutoFetch:s,rangeChunkSize:kI,length:N,docBaseUrl:LI,enableXfa:i,evaluatorOptions:{maxImageSize:X,disableFontFace:aI,ignoreErrors:o,isEvalSupported:T,isOffscreenCanvasSupported:P,canvasMaxAreaInBytes:v,fontExtraProperties:U,useSystemFonts:j,cMapUrl:oI?UI:null,standardFontDataUrl:oI?fI:null}},KI={ignoreErrors:o,isEvalSupported:T,disableFontFace:aI,fontExtraProperties:U,enableXfa:i,ownerDocument:W,disableAutoFetch:s,pdfBug:Y,styleElement:hI};return FI.promise.then(function(){if(d.destroyed)throw new Error("Loading aborted");const zI=_fetchDocument(FI,uI),xI=new Promise(function(vI){let _I;SI?_I=new _transport_stream.PDFDataTransportStream({length:N,initialData:SI.initialData,progressiveDone:SI.progressiveDone,contentDispositionFilename:SI.contentDispositionFilename,disableRange:Z,disableStream:c},SI):m||(_I=createPDFNetworkStream({url:u,length:N,httpHeaders:J,withCredentials:r,rangeChunkSize:kI,disableRange:Z,disableStream:c})),vI(_I)});return Promise.all([zI,xI]).then(function([vI,_I]){if(d.destroyed)throw new Error("Loading aborted");const yI=new _message_handler.MessageHandler(b,vI,FI.port),rI=new WorkerTransport(yI,d,_I,KI,HI);d._transport=rI,yI.send("Ready",null)})}).catch(d._capability.reject),d}async function _fetchDocument(t,d){if(t.destroyed)throw new Error("Worker was destroyed");const b=await t.messageHandler.sendWithPromise("GetDocRequest",d,d.data?[d.data.buffer]:null);if(t.destroyed)throw new Error("Worker was destroyed");return b}function getUrlProp(t){if(t instanceof URL)return t.href;try{return new URL(t,window.location).href}catch{if(_is_node.isNodeJS&&typeof t=="string")return t}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.")}function getDataProp(t){if(_is_node.isNodeJS&&typeof Buffer<"u"&&t instanceof Buffer)return(0,_display_utils.deprecated)("Please provide binary data as `Uint8Array`, rather than `Buffer`."),new Uint8Array(t);if(t instanceof Uint8Array&&t.byteLength===t.buffer.byteLength)return t;if(typeof t=="string")return(0,_util.stringToBytes)(t);if(typeof t=="object"&&!isNaN(t==null?void 0:t.length)||(0,_util.isArrayBuffer)(t))return new Uint8Array(t);throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.")}const g=class{constructor(){this._capability=new _util.PromiseCapability,this._transport=null,this._worker=null,this.docId=`d${Lg(g,I)._++}`,this.destroyed=!1,this.onPassword=null,this.onProgress=null}get promise(){return this._capability.promise}async destroy(){var d;this.destroyed=!0,await((d=this._transport)==null?void 0:d.destroy()),this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null)}};let PDFDocumentLoadingTask=g;I=new WeakMap,DI(PDFDocumentLoadingTask,I,0),exports.PDFDocumentLoadingTask=PDFDocumentLoadingTask;class PDFDataRangeTransport{constructor(d,b,u=!1,m=null){this.length=d,this.initialData=b,this.progressiveDone=u,this.contentDispositionFilename=m,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=new _util.PromiseCapability}addRangeListener(d){this._rangeListeners.push(d)}addProgressListener(d){this._progressListeners.push(d)}addProgressiveReadListener(d){this._progressiveReadListeners.push(d)}addProgressiveDoneListener(d){this._progressiveDoneListeners.push(d)}onDataRange(d,b){for(const u of this._rangeListeners)u(d,b)}onDataProgress(d,b){this._readyCapability.promise.then(()=>{for(const u of this._progressListeners)u(d,b)})}onDataProgressiveRead(d){this._readyCapability.promise.then(()=>{for(const b of this._progressiveReadListeners)b(d)})}onDataProgressiveDone(){this._readyCapability.promise.then(()=>{for(const d of this._progressiveDoneListeners)d()})}transportReady(){this._readyCapability.resolve()}requestDataRange(d,b){(0,_util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}exports.PDFDataRangeTransport=PDFDataRangeTransport;class PDFDocumentProxy{constructor(d,b){this._pdfInfo=d,this._transport=b}get annotationStorage(){return this._transport.annotationStorage}get filterFactory(){return this._transport.filterFactory}get numPages(){return this._pdfInfo.numPages}get fingerprints(){return this._pdfInfo.fingerprints}get isPureXfa(){return(0,_util.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}get allXfaHtml(){return this._transport._htmlForXfa}getPage(d){return this._transport.getPage(d)}getPageIndex(d){return this._transport.getPageIndex(d)}getDestinations(){return this._transport.getDestinations()}getDestination(d){return this._transport.getDestination(d)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getAttachments(){return this._transport.getAttachments()}getJavaScript(){return this._transport.getJavaScript()}getJSActions(){return this._transport.getDocJSActions()}getOutline(){return this._transport.getOutline()}getOptionalContentConfig(){return this._transport.getOptionalContentConfig()}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getMarkInfo(){return this._transport.getMarkInfo()}getData(){return this._transport.getData()}saveDocument(){return this._transport.saveDocument()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}cleanup(d=!1){return this._transport.startCleanup(d||this.isPureXfa)}destroy(){return this.loadingTask.destroy()}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}getFieldObjects(){return this._transport.getFieldObjects()}hasJSActions(){return this._transport.hasJSActions()}getCalculationOrderIds(){return this._transport.getCalculationOrderIds()}}exports.PDFDocumentProxy=PDFDocumentProxy;class PDFPageProxy{constructor(d,b,u,m=!1){DI(this,l);DI(this,B);DI(this,A,null);DI(this,C,!1);this._pageIndex=d,this._pageInfo=b,this._transport=u,this._stats=m?new _display_utils.StatTimer:null,this._pdfBug=m,this.commonObjs=u.commonObjs,this.objs=new PDFObjects,this._maybeCleanupAfterRender=!1,this._intentStates=new Map,this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:d,rotation:b=this.rotate,offsetX:u=0,offsetY:m=0,dontFlip:J=!1}={}){return new _display_utils.PageViewport({viewBox:this.view,scale:d,rotation:b,offsetX:u,offsetY:m,dontFlip:J})}getAnnotations({intent:d="display"}={}){const b=this._transport.getRenderingIntent(d);return this._transport.getAnnotations(this._pageIndex,b.renderingIntent)}getJSActions(){return this._transport.getPageJSActions(this._pageIndex)}get isPureXfa(){return(0,_util.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}async getXfa(){var d;return((d=this._transport._htmlForXfa)==null?void 0:d.children[this._pageIndex])||null}render({canvasContext:d,viewport:b,intent:u="display",annotationMode:m=_util.AnnotationMode.ENABLE,transform:J=null,background:r=null,optionalContentConfigPromise:XI=null,annotationCanvasMap:SI=null,pageColors:kI=null,printAnnotationStorage:FI=null}){var sI,o,X;if((sI=arguments[0])!=null&&sI.canvasFactory)throw new Error("render no longer accepts the `canvasFactory`-option, please pass it to the `getDocument`-function instead.");(o=this._stats)==null||o.time("Overall");const JI=this._transport.getRenderingIntent(u,m,FI);OI(this,C,!1),tI(this,B,Tg).call(this),XI||(XI=this._transport.getOptionalContentConfig());let LI=this._intentStates.get(JI.cacheKey);LI||(LI=Object.create(null),this._intentStates.set(JI.cacheKey,LI)),LI.streamReaderCancelTimeout&&(clearTimeout(LI.streamReaderCancelTimeout),LI.streamReaderCancelTimeout=null);const UI=!!(JI.renderingIntent&_util.RenderingIntentFlag.PRINT);LI.displayReadyCapability||(LI.displayReadyCapability=new _util.PromiseCapability,LI.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},(X=this._stats)==null||X.time("Page Request"),this._pumpOperatorList(JI));const TI=T=>{var P,v;LI.renderTasks.delete(QI),(this._maybeCleanupAfterRender||UI)&&OI(this,C,!0),tI(this,l,ug).call(this,!UI),T?(QI.capability.reject(T),this._abortOperatorList({intentState:LI,reason:T instanceof Error?T:new Error(T)})):QI.capability.resolve(),(P=this._stats)==null||P.timeEnd("Rendering"),(v=this._stats)==null||v.timeEnd("Overall")},QI=new InternalRenderTask({callback:TI,params:{canvasContext:d,viewport:b,transform:J,background:r},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:SI,operatorList:LI.operatorList,pageIndex:this._pageIndex,canvasFactory:this._transport.canvasFactory,filterFactory:this._transport.filterFactory,useRequestAnimationFrame:!UI,pdfBug:this._pdfBug,pageColors:kI});(LI.renderTasks||(LI.renderTasks=new Set)).add(QI);const fI=QI.task;return Promise.all([LI.displayReadyCapability.promise,XI]).then(([T,P])=>{var v;if(V(this,C)){TI();return}(v=this._stats)==null||v.time("Rendering"),QI.initializeGraphics({transparency:T,optionalContentConfig:P}),QI.operatorListChanged()}).catch(TI),fI}getOperatorList({intent:d="display",annotationMode:b=_util.AnnotationMode.ENABLE,printAnnotationStorage:u=null}={}){var SI;function m(){r.operatorList.lastChunk&&(r.opListReadCapability.resolve(r.operatorList),r.renderTasks.delete(XI))}const J=this._transport.getRenderingIntent(d,b,u,!0);let r=this._intentStates.get(J.cacheKey);r||(r=Object.create(null),this._intentStates.set(J.cacheKey,r));let XI;return r.opListReadCapability||(XI=Object.create(null),XI.operatorListChanged=m,r.opListReadCapability=new _util.PromiseCapability,(r.renderTasks||(r.renderTasks=new Set)).add(XI),r.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},(SI=this._stats)==null||SI.time("Page Request"),this._pumpOperatorList(J)),r.opListReadCapability.promise}streamTextContent({includeMarkedContent:d=!1,disableNormalization:b=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,includeMarkedContent:d===!0,disableNormalization:b===!0},{highWaterMark:100,size(m){return m.items.length}})}getTextContent(d={}){if(this._transport._htmlForXfa)return this.getXfa().then(u=>_xfa_text.XfaText.textContent(u));const b=this.streamTextContent(d);return new Promise(function(u,m){function J(){r.read().then(function({value:SI,done:kI}){if(kI){u(XI);return}Object.assign(XI.styles,SI.styles),XI.items.push(...SI.items),J()},m)}const r=b.getReader(),XI={items:[],styles:Object.create(null)};J()})}getStructTree(){return this._transport.getStructTree(this._pageIndex)}_destroy(){this.destroyed=!0;const d=[];for(const b of this._intentStates.values())if(this._abortOperatorList({intentState:b,reason:new Error("Page was destroyed."),force:!0}),!b.opListReadCapability)for(const u of b.renderTasks)d.push(u.completed),u.cancel();return this.objs.clear(),OI(this,C,!1),tI(this,B,Tg).call(this),Promise.all(d)}cleanup(d=!1){OI(this,C,!0);const b=tI(this,l,ug).call(this,!1);return d&&b&&this._stats&&(this._stats=new _display_utils.StatTimer),b}_startRenderPage(d,b){var m,J;const u=this._intentStates.get(b);u&&((m=this._stats)==null||m.timeEnd("Page Request"),(J=u.displayReadyCapability)==null||J.resolve(d))}_renderPageChunk(d,b){for(let u=0,m=d.length;u<m;u++)b.operatorList.fnArray.push(d.fnArray[u]),b.operatorList.argsArray.push(d.argsArray[u]);b.operatorList.lastChunk=d.lastChunk,b.operatorList.separateAnnots=d.separateAnnots;for(const u of b.renderTasks)u.operatorListChanged();d.lastChunk&&tI(this,l,ug).call(this,!0)}_pumpOperatorList({renderingIntent:d,cacheKey:b,annotationStorageMap:u}){const J=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:d,cacheKey:b,annotationStorage:u}).getReader(),r=this._intentStates.get(b);r.streamReader=J;const XI=()=>{J.read().then(({value:SI,done:kI})=>{if(kI){r.streamReader=null;return}this._transport.destroyed||(this._renderPageChunk(SI,r),XI())},SI=>{if(r.streamReader=null,!this._transport.destroyed){if(r.operatorList){r.operatorList.lastChunk=!0;for(const kI of r.renderTasks)kI.operatorListChanged();tI(this,l,ug).call(this,!0)}if(r.displayReadyCapability)r.displayReadyCapability.reject(SI);else if(r.opListReadCapability)r.opListReadCapability.reject(SI);else throw SI}})};XI()}_abortOperatorList({intentState:d,reason:b,force:u=!1}){if(d.streamReader){if(d.streamReaderCancelTimeout&&(clearTimeout(d.streamReaderCancelTimeout),d.streamReaderCancelTimeout=null),!u){if(d.renderTasks.size>0)return;if(b instanceof _display_utils.RenderingCancelledException){let m=RENDERING_CANCELLED_TIMEOUT;b.extraDelay>0&&b.extraDelay<1e3&&(m+=b.extraDelay),d.streamReaderCancelTimeout=setTimeout(()=>{d.streamReaderCancelTimeout=null,this._abortOperatorList({intentState:d,reason:b,force:!0})},m);return}}if(d.streamReader.cancel(new _util.AbortException(b.message)).catch(()=>{}),d.streamReader=null,!this._transport.destroyed){for(const[m,J]of this._intentStates)if(J===d){this._intentStates.delete(m);break}this.cleanup()}}}get stats(){return this._stats}}A=new WeakMap,C=new WeakMap,l=new WeakSet,ug=function(d=!1){if(tI(this,B,Tg).call(this),!V(this,C))return!1;if(d)return OI(this,A,setTimeout(()=>{OI(this,A,null),tI(this,l,ug).call(this,!1)},DELAYED_CLEANUP_TIMEOUT)),!1;for(const{renderTasks:b,operatorList:u}of this._intentStates.values())if(b.size>0||!u.lastChunk)return!1;return this._intentStates.clear(),this.objs.clear(),OI(this,C,!1),!0},B=new WeakSet,Tg=function(){V(this,A)&&(clearTimeout(V(this,A)),OI(this,A,null))},exports.PDFPageProxy=PDFPageProxy;class LoopbackPort{constructor(){DI(this,n,new Set);DI(this,a,Promise.resolve())}postMessage(d,b){const u={data:structuredClone(d,b?{transfer:b}:null)};V(this,a).then(()=>{for(const m of V(this,n))m.call(this,u)})}addEventListener(d,b){V(this,n).add(b)}removeEventListener(d,b){V(this,n).delete(b)}terminate(){V(this,n).clear()}}n=new WeakMap,a=new WeakMap,exports.LoopbackPort=LoopbackPort;const PDFWorkerUtil={isWorkerDisabled:!1,fallbackWorkerSrc:null,fakeWorkerId:0};exports.PDFWorkerUtil=PDFWorkerUtil;{if(_is_node.isNodeJS&&typeof commonjsRequire=="function")PDFWorkerUtil.isWorkerDisabled=!0,PDFWorkerUtil.fallbackWorkerSrc="./pdf.worker.js";else if(typeof document=="object"){const t=(w=document==null?void 0:document.currentScript)==null?void 0:w.src;t&&(PDFWorkerUtil.fallbackWorkerSrc=t.replace(/(\.(?:min\.)?js)(\?.*)?$/i,".worker$1$2"))}PDFWorkerUtil.isSameOrigin=function(t,d){let b;try{if(b=new URL(t),!b.origin||b.origin==="null")return!1}catch{return!1}const u=new URL(d,b);return b.origin===u.origin},PDFWorkerUtil.createCDNWrapper=function(t){const d=`importScripts("${t}");`;return URL.createObjectURL(new Blob([d]))}}const _PDFWorker=class{constructor({name:t=null,port:d=null,verbosity:b=(0,_util.getVerbosityLevel)()}={}){if(d&&V(_PDFWorker,L).has(d))throw new Error("Cannot use more than one PDFWorker per port.");if(this.name=t,this.destroyed=!1,this.verbosity=b,this._readyCapability=new _util.PromiseCapability,this._port=null,this._webWorker=null,this._messageHandler=null,d){V(_PDFWorker,L).set(d,this),this._initializeFromPort(d);return}this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(t){this._port=t,this._messageHandler=new _message_handler.MessageHandler("main","worker",t),this._messageHandler.on("ready",function(){}),this._readyCapability.resolve(),this._messageHandler.send("configure",{verbosity:this.verbosity})}_initialize(){if(!PDFWorkerUtil.isWorkerDisabled&&!_PDFWorker._mainThreadWorkerMessageHandler){let{workerSrc:t}=_PDFWorker;try{PDFWorkerUtil.isSameOrigin(window.location.href,t)||(t=PDFWorkerUtil.createCDNWrapper(new URL(t,window.location).href));const d=new Worker(t),b=new _message_handler.MessageHandler("main","worker",d),u=()=>{d.removeEventListener("error",m),b.destroy(),d.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},m=()=>{this._webWorker||u()};d.addEventListener("error",m),b.on("test",r=>{if(d.removeEventListener("error",m),this.destroyed){u();return}r?(this._messageHandler=b,this._port=d,this._webWorker=d,this._readyCapability.resolve(),b.send("configure",{verbosity:this.verbosity})):(this._setupFakeWorker(),b.destroy(),d.terminate())}),b.on("ready",r=>{if(d.removeEventListener("error",m),this.destroyed){u();return}try{J()}catch{this._setupFakeWorker()}});const J=()=>{const r=new Uint8Array;b.send("test",r,[r.buffer])};J();return}catch{(0,_util.info)("The worker has been disabled.")}}this._setupFakeWorker()}_setupFakeWorker(){PDFWorkerUtil.isWorkerDisabled||((0,_util.warn)("Setting up fake worker."),PDFWorkerUtil.isWorkerDisabled=!0),_PDFWorker._setupFakeWorkerGlobal.then(t=>{if(this.destroyed){this._readyCapability.reject(new Error("Worker was destroyed"));return}const d=new LoopbackPort;this._port=d;const b=`fake${PDFWorkerUtil.fakeWorkerId++}`,u=new _message_handler.MessageHandler(b+"_worker",b,d);t.setup(u,d);const m=new _message_handler.MessageHandler(b,b+"_worker",d);this._messageHandler=m,this._readyCapability.resolve(),m.send("configure",{verbosity:this.verbosity})}).catch(t=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${t.message}".`))})}destroy(){this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),V(_PDFWorker,L).delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}static fromPort(t){if(!(t!=null&&t.port))throw new Error("PDFWorker.fromPort - invalid method signature.");return V(this,L).has(t.port)?V(this,L).get(t.port):new _PDFWorker(t)}static get workerSrc(){if(_worker_options.GlobalWorkerOptions.workerSrc)return _worker_options.GlobalWorkerOptions.workerSrc;if(PDFWorkerUtil.fallbackWorkerSrc!==null)return _is_node.isNodeJS||(0,_display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'),PDFWorkerUtil.fallbackWorkerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}static get _mainThreadWorkerMessageHandler(){var t;try{return((t=globalThis.pdfjsWorker)==null?void 0:t.WorkerMessageHandler)||null}catch{return null}}static get _setupFakeWorkerGlobal(){const loader=async()=>{const mainWorkerMessageHandler=this._mainThreadWorkerMessageHandler;if(mainWorkerMessageHandler)return mainWorkerMessageHandler;if(_is_node.isNodeJS&&typeof commonjsRequire=="function"){const worker=eval("require")(this.workerSrc);return worker.WorkerMessageHandler}return await(0,_display_utils.loadScript)(this.workerSrc),window.pdfjsWorker.WorkerMessageHandler};return(0,_util.shadow)(this,"_setupFakeWorkerGlobal",loader())}};let PDFWorker=_PDFWorker;L=new WeakMap,DI(PDFWorker,L,new WeakMap),exports.PDFWorker=PDFWorker;class WorkerTransport{constructor(d,b,u,m,J){DI(this,M);DI(this,Q,new Map);DI(this,S,new Map);DI(this,y,new Map);this.messageHandler=d,this.loadingTask=b,this.commonObjs=new PDFObjects,this.fontLoader=new _font_loader.FontLoader({ownerDocument:m.ownerDocument,styleElement:m.styleElement}),this._params=m,this.canvasFactory=J.canvasFactory,this.filterFactory=J.filterFactory,this.cMapReaderFactory=J.cMapReaderFactory,this.standardFontDataFactory=J.standardFontDataFactory,this.destroyed=!1,this.destroyCapability=null,this._passwordCapability=null,this._networkStream=u,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=new _util.PromiseCapability,this.setupMessageHandler()}get annotationStorage(){return(0,_util.shadow)(this,"annotationStorage",new _annotation_storage.AnnotationStorage)}getRenderingIntent(d,b=_util.AnnotationMode.ENABLE,u=null,m=!1){let J=_util.RenderingIntentFlag.DISPLAY,r=null;switch(d){case"any":J=_util.RenderingIntentFlag.ANY;break;case"display":break;case"print":J=_util.RenderingIntentFlag.PRINT;break;default:(0,_util.warn)(`getRenderingIntent - invalid intent: ${d}`)}switch(b){case _util.AnnotationMode.DISABLE:J+=_util.RenderingIntentFlag.ANNOTATIONS_DISABLE;break;case _util.AnnotationMode.ENABLE:break;case _util.AnnotationMode.ENABLE_FORMS:J+=_util.RenderingIntentFlag.ANNOTATIONS_FORMS;break;case _util.AnnotationMode.ENABLE_STORAGE:J+=_util.RenderingIntentFlag.ANNOTATIONS_STORAGE,r=(J&_util.RenderingIntentFlag.PRINT&&u instanceof _annotation_storage.PrintAnnotationStorage?u:this.annotationStorage).serializable;break;default:(0,_util.warn)(`getRenderingIntent - invalid annotationMode: ${b}`)}return m&&(J+=_util.RenderingIntentFlag.OPLIST),{renderingIntent:J,cacheKey:`${J}_${_annotation_storage.AnnotationStorage.getHash(r)}`,annotationStorageMap:r}}destroy(){if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=new _util.PromiseCapability,this._passwordCapability&&this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));const d=[];for(const u of V(this,S).values())d.push(u._destroy());V(this,S).clear(),V(this,y).clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();const b=this.messageHandler.sendWithPromise("Terminate",null);return d.push(b),Promise.all(d).then(()=>{this.commonObjs.clear(),this.fontLoader.clear(),V(this,Q).clear(),this.filterFactory.destroy(),this._networkStream&&this._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated.")),this.messageHandler&&(this.messageHandler.destroy(),this.messageHandler=null),this.destroyCapability.resolve()},this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:d,loadingTask:b}=this;d.on("GetReader",(u,m)=>{(0,_util.assert)(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=J=>{this._lastProgress={loaded:J.loaded,total:J.total}},m.onPull=()=>{this._fullReader.read().then(function({value:J,done:r}){if(r){m.close();return}(0,_util.assert)(J instanceof ArrayBuffer,"GetReader - expected an ArrayBuffer."),m.enqueue(new Uint8Array(J),1,[J])}).catch(J=>{m.error(J)})},m.onCancel=J=>{this._fullReader.cancel(J),m.ready.catch(r=>{if(!this.destroyed)throw r})}}),d.on("ReaderHeadersReady",u=>{const m=new _util.PromiseCapability,J=this._fullReader;return J.headersReady.then(()=>{var r;(!J.isStreamingSupported||!J.isRangeSupported)&&(this._lastProgress&&((r=b.onProgress)==null||r.call(b,this._lastProgress)),J.onProgress=XI=>{var SI;(SI=b.onProgress)==null||SI.call(b,{loaded:XI.loaded,total:XI.total})}),m.resolve({isStreamingSupported:J.isStreamingSupported,isRangeSupported:J.isRangeSupported,contentLength:J.contentLength})},m.reject),m.promise}),d.on("GetRangeReader",(u,m)=>{(0,_util.assert)(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const J=this._networkStream.getRangeReader(u.begin,u.end);if(!J){m.close();return}m.onPull=()=>{J.read().then(function({value:r,done:XI}){if(XI){m.close();return}(0,_util.assert)(r instanceof ArrayBuffer,"GetRangeReader - expected an ArrayBuffer."),m.enqueue(new Uint8Array(r),1,[r])}).catch(r=>{m.error(r)})},m.onCancel=r=>{J.cancel(r),m.ready.catch(XI=>{if(!this.destroyed)throw XI})}}),d.on("GetDoc",({pdfInfo:u})=>{this._numPages=u.numPages,this._htmlForXfa=u.htmlForXfa,delete u.htmlForXfa,b._capability.resolve(new PDFDocumentProxy(u,this))}),d.on("DocException",function(u){let m;switch(u.name){case"PasswordException":m=new _util.PasswordException(u.message,u.code);break;case"InvalidPDFException":m=new _util.InvalidPDFException(u.message);break;case"MissingPDFException":m=new _util.MissingPDFException(u.message);break;case"UnexpectedResponseException":m=new _util.UnexpectedResponseException(u.message,u.status);break;case"UnknownErrorException":m=new _util.UnknownErrorException(u.message,u.details);break;default:(0,_util.unreachable)("DocException - expected a valid Error.")}b._capability.reject(m)}),d.on("PasswordRequest",u=>{if(this._passwordCapability=new _util.PromiseCapability,b.onPassword){const m=J=>{J instanceof Error?this._passwordCapability.reject(J):this._passwordCapability.resolve({password:J})};try{b.onPassword(m,u.code)}catch(J){this._passwordCapability.reject(J)}}else this._passwordCapability.reject(new _util.PasswordException(u.message,u.code));return this._passwordCapability.promise}),d.on("DataLoaded",u=>{var m;(m=b.onProgress)==null||m.call(b,{loaded:u.length,total:u.length}),this.downloadInfoCapability.resolve(u)}),d.on("StartRenderPage",u=>{if(this.destroyed)return;V(this,S).get(u.pageIndex)._startRenderPage(u.transparency,u.cacheKey)}),d.on("commonobj",([u,m,J])=>{var r;if(!this.destroyed&&!this.commonObjs.has(u))switch(m){case"Font":const XI=this._params;if("error"in J){const FI=J.error;(0,_util.warn)(`Error during font loading: ${FI}`),this.commonObjs.resolve(u,FI);break}const SI=XI.pdfBug&&((r=globalThis.FontInspector)!=null&&r.enabled)?(FI,JI)=>globalThis.FontInspector.fontAdded(FI,JI):null,kI=new _font_loader.FontFaceObject(J,{isEvalSupported:XI.isEvalSupported,disableFontFace:XI.disableFontFace,ignoreErrors:XI.ignoreErrors,inspectFont:SI});this.fontLoader.bind(kI).catch(FI=>d.sendWithPromise("FontFallback",{id:u})).finally(()=>{!XI.fontExtraProperties&&kI.data&&(kI.data=null),this.commonObjs.resolve(u,kI)});break;case"FontPath":case"Image":case"Pattern":this.commonObjs.resolve(u,J);break;default:throw new Error(`Got unknown common object type ${m}`)}}),d.on("obj",([u,m,J,r])=>{var SI;if(this.destroyed)return;const XI=V(this,S).get(m);if(!XI.objs.has(u))switch(J){case"Image":if(XI.objs.resolve(u,r),r){let kI;if(r.bitmap){const{width:FI,height:JI}=r;kI=FI*JI*4}else kI=((SI=r.data)==null?void 0:SI.length)||0;kI>_util.MAX_IMAGE_SIZE_TO_CACHE&&(XI._maybeCleanupAfterRender=!0)}break;case"Pattern":XI.objs.resolve(u,r);break;default:throw new Error(`Got unknown object type ${J}`)}}),d.on("DocProgress",u=>{var m;this.destroyed||(m=b.onProgress)==null||m.call(b,{loaded:u.loaded,total:u.total})}),d.on("FetchBuiltInCMap",u=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.cMapReaderFactory?this.cMapReaderFactory.fetch(u):Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."))),d.on("FetchStandardFontData",u=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.standardFontDataFactory?this.standardFontDataFactory.fetch(u):Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.")))}getData(){return this.messageHandler.sendWithPromise("GetData",null)}saveDocument(){var d;return this.annotationStorage.size<=0&&(0,_util.warn)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead."),this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:this.annotationStorage.serializable,filename:((d=this._fullReader)==null?void 0:d.filename)??null}).finally(()=>{this.annotationStorage.resetModified()})}getPage(d){if(!Number.isInteger(d)||d<=0||d>this._numPages)return Promise.reject(new Error("Invalid page request."));const b=d-1,u=V(this,y).get(b);if(u)return u;const m=this.messageHandler.sendWithPromise("GetPage",{pageIndex:b}).then(J=>{if(this.destroyed)throw new Error("Transport destroyed");const r=new PDFPageProxy(b,J,this,this._params.pdfBug);return V(this,S).set(b,r),r});return V(this,y).set(b,m),m}getPageIndex(d){return typeof d!="object"||d===null||!Number.isInteger(d.num)||d.num<0||!Number.isInteger(d.gen)||d.gen<0?Promise.reject(new Error("Invalid pageIndex request.")):this.messageHandler.sendWithPromise("GetPageIndex",{num:d.num,gen:d.gen})}getAnnotations(d,b){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:d,intent:b})}getFieldObjects(){return tI(this,M,rg).call(this,"GetFieldObjects")}hasJSActions(){return tI(this,M,rg).call(this,"HasJSActions")}getCalculationOrderIds(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(d){return typeof d!="string"?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:d})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getJavaScript(){return this.messageHandler.sendWithPromise("GetJavaScript",null)}getDocJSActions(){return this.messageHandler.sendWithPromise("GetDocJSActions",null)}getPageJSActions(d){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:d})}getStructTree(d){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:d})}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getOptionalContentConfig(){return this.messageHandler.sendWithPromise("GetOptionalContentConfig",null).then(d=>new _optional_content_config.OptionalContentConfig(d))}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){const d="GetMetadata",b=V(this,Q).get(d);if(b)return b;const u=this.messageHandler.sendWithPromise(d,null).then(m=>{var J,r;return{info:m[0],metadata:m[1]?new _metadata.Metadata(m[1]):null,contentDispositionFilename:((J=this._fullReader)==null?void 0:J.filename)??null,contentLength:((r=this._fullReader)==null?void 0:r.contentLength)??null}});return V(this,Q).set(d,u),u}getMarkInfo(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}async startCleanup(d=!1){if(!this.destroyed){await this.messageHandler.sendWithPromise("Cleanup",null);for(const b of V(this,S).values())if(!b.cleanup())throw new Error(`startCleanup: Page ${b.pageNumber} is currently rendering.`);this.commonObjs.clear(),d||this.fontLoader.clear(),V(this,Q).clear(),this.filterFactory.destroy(!0)}}get loadingParams(){const{disableAutoFetch:d,enableXfa:b}=this._params;return(0,_util.shadow)(this,"loadingParams",{disableAutoFetch:d,enableXfa:b})}}Q=new WeakMap,S=new WeakMap,y=new WeakMap,M=new WeakSet,rg=function(d,b=null){const u=V(this,Q).get(d);if(u)return u;const m=this.messageHandler.sendWithPromise(d,b);return V(this,Q).set(d,m),m};class PDFObjects{constructor(){DI(this,O);DI(this,z,Object.create(null))}get(d,b=null){if(b){const m=tI(this,O,Eg).call(this,d);return m.capability.promise.then(()=>b(m.data)),null}const u=V(this,z)[d];if(!(u!=null&&u.capability.settled))throw new Error(`Requesting object that isn't resolved yet ${d}.`);return u.data}has(d){const b=V(this,z)[d];return(b==null?void 0:b.capability.settled)||!1}resolve(d,b=null){const u=tI(this,O,Eg).call(this,d);u.data=b,u.capability.resolve()}clear(){var d;for(const b in V(this,z)){const{data:u}=V(this,z)[b];(d=u==null?void 0:u.bitmap)==null||d.close()}OI(this,z,Object.create(null))}}z=new WeakMap,O=new WeakSet,Eg=function(d){const b=V(this,z)[d];return b||(V(this,z)[d]={capability:new _util.PromiseCapability,data:null})};class RenderTask{constructor(d){DI(this,R,null);OI(this,R,d),this.onContinue=null}get promise(){return V(this,R).capability.promise}cancel(d=0){V(this,R).cancel(null,d)}get separateAnnots(){const{separateAnnots:d}=V(this,R).operatorList;if(!d)return!1;const{annotationCanvasMap:b}=V(this,R);return d.form||d.canvas&&(b==null?void 0:b.size)>0}}R=new WeakMap,exports.RenderTask=RenderTask;const II=class{constructor({callback:d,params:b,objs:u,commonObjs:m,annotationCanvasMap:J,operatorList:r,pageIndex:XI,canvasFactory:SI,filterFactory:kI,useRequestAnimationFrame:FI=!1,pdfBug:JI=!1,pageColors:LI=null}){this.callback=d,this.params=b,this.objs=u,this.commonObjs=m,this.annotationCanvasMap=J,this.operatorListIdx=null,this.operatorList=r,this._pageIndex=XI,this.canvasFactory=SI,this.filterFactory=kI,this._pdfBug=JI,this.pageColors=LI,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=FI===!0&&typeof window<"u",this.cancelled=!1,this.capability=new _util.PromiseCapability,this.task=new RenderTask(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=b.canvasContext.canvas}get completed(){return this.capability.promise.catch(function(){})}initializeGraphics({transparency:d=!1,optionalContentConfig:b}){var XI,SI;if(this.cancelled)return;if(this._canvas){if(V(II,q).has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");V(II,q).add(this._canvas)}this._pdfBug&&((XI=globalThis.StepperManager)!=null&&XI.enabled)&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:u,viewport:m,transform:J,background:r}=this.params;this.gfx=new _canvas.CanvasGraphics(u,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:b},this.annotationCanvasMap,this.pageColors),this.gfx.beginDrawing({transform:J,viewport:m,transparency:d,background:r}),this.operatorListIdx=0,this.graphicsReady=!0,(SI=this.graphicsReadyCallback)==null||SI.call(this)}cancel(d=null,b=0){var u;this.running=!1,this.cancelled=!0,(u=this.gfx)==null||u.endDrawing(),this._canvas&&V(II,q).delete(this._canvas),this.callback(d||new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex+1}`,"canvas",b))}operatorListChanged(){var d;if(!this.graphicsReady){this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound);return}(d=this.stepper)==null||d.updateOperatorList(this.operatorList),!this.running&&this._continue()}_continue(){this.running=!0,!this.cancelled&&(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?window.requestAnimationFrame(()=>{this._nextBound().catch(this._cancelBound)}):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(this.pageColors),this._canvas&&V(II,q).delete(this._canvas),this.callback())))}};let InternalRenderTask=II;q=new WeakMap,DI(InternalRenderTask,q,new WeakSet);const version="3.7.107";exports.version=version;const build="036f855dc";exports.build=build},(I,g,A)=>{var n,a,w,wC,Q;Object.defineProperty(g,"__esModule",{value:!0}),g.PrintAnnotationStorage=g.AnnotationStorage=void 0;var C=A(1),l=A(4),G=A(8);class B{constructor(){DI(this,w);DI(this,n,!1);DI(this,a,new Map);this.onSetModified=null,this.onResetModified=null,this.onAnnotationEditor=null}getValue(y,M){const F=V(this,a).get(y);return F===void 0?M:Object.assign(M,F)}getRawValue(y){return V(this,a).get(y)}remove(y){if(V(this,a).delete(y),V(this,a).size===0&&this.resetModified(),typeof this.onAnnotationEditor=="function"){for(const M of V(this,a).values())if(M instanceof l.AnnotationEditor)return;this.onAnnotationEditor(null)}}setValue(y,M){const F=V(this,a).get(y);let z=!1;if(F!==void 0)for(const[O,D]of Object.entries(M))F[O]!==D&&(z=!0,F[O]=D);else z=!0,V(this,a).set(y,M);z&&tI(this,w,wC).call(this),M instanceof l.AnnotationEditor&&typeof this.onAnnotationEditor=="function"&&this.onAnnotationEditor(M.constructor._type)}has(y){return V(this,a).has(y)}getAll(){return V(this,a).size>0?(0,C.objectFromMap)(V(this,a)):null}setAll(y){for(const[M,F]of Object.entries(y))this.setValue(M,F)}get size(){return V(this,a).size}resetModified(){V(this,n)&&(OI(this,n,!1),typeof this.onResetModified=="function"&&this.onResetModified())}get print(){return new k(this)}get serializable(){if(V(this,a).size===0)return null;const y=new Map;for(const[M,F]of V(this,a)){const z=F instanceof l.AnnotationEditor?F.serialize():F;z&&y.set(M,z)}return y}static getHash(y){if(!y)return"";const M=new G.MurmurHash3_64;for(const[F,z]of y)M.update(`${F}:${JSON.stringify(z)}`);return M.hexdigest()}}n=new WeakMap,a=new WeakMap,w=new WeakSet,wC=function(){V(this,n)||(OI(this,n,!0),typeof this.onSetModified=="function"&&this.onSetModified())},g.AnnotationStorage=B;class k extends B{constructor(M){super();DI(this,Q,null);OI(this,Q,structuredClone(M.serializable))}get print(){(0,C.unreachable)("Should not call PrintAnnotationStorage.print")}get serializable(){return V(this,Q)}}Q=new WeakMap,g.PrintAnnotationStorage=k},(I,g,A)=>{var B,k,n,a,w,L;Object.defineProperty(g,"__esModule",{value:!0}),g.AnnotationEditor=void 0;var C=A(5),l=A(1);const Q=class{constructor(y){DI(this,B,this.focusin.bind(this));DI(this,k,this.focusout.bind(this));DI(this,n,!1);DI(this,a,!1);DI(this,w,!1);sg(this,"_uiManager",null);DI(this,L,Q._zIndex++);this.constructor===Q&&(0,l.unreachable)("Cannot initialize AnnotationEditor."),this.parent=y.parent,this.id=y.id,this.width=this.height=null,this.pageIndex=y.parent.pageIndex,this.name=y.name,this.div=null,this._uiManager=y.uiManager;const{rotation:M,rawDims:{pageWidth:F,pageHeight:z,pageX:O,pageY:D}}=this.parent.viewport;this.rotation=M,this.pageRotation=(360+M-this._uiManager.viewParameters.rotation)%360,this.pageDimensions=[F,z],this.pageTranslation=[O,D];const[R,q]=this.parentDimensions;this.x=y.x/R,this.y=y.y/q,this.isAttachedToDOM=!1}static get _defaultLineColor(){return(0,l.shadow)(this,"_defaultLineColor",this._colorManager.getHexCode("CanvasText"))}addCommands(y){this._uiManager.addCommands(y)}get currentLayer(){return this._uiManager.currentLayer}setInBackground(){this.div.style.zIndex=0}setInForeground(){this.div.style.zIndex=V(this,L)}setParent(y){y!==null&&(this.pageIndex=y.pageIndex,this.pageDimensions=y.pageDimensions),this.parent=y}focusin(y){V(this,n)?OI(this,n,!1):this.parent.setSelected(this)}focusout(y){var F;if(!this.isAttachedToDOM)return;const M=y.relatedTarget;M!=null&&M.closest(`#${this.id}`)||(y.preventDefault(),(F=this.parent)!=null&&F.isMultipleSelection||this.commitOrRemove())}commitOrRemove(){this.isEmpty()?this.remove():this.commit()}commit(){this.addToAnnotationStorage()}addToAnnotationStorage(){this._uiManager.addToAnnotationStorage(this)}dragstart(y){const M=this.parent.div.getBoundingClientRect();this.startX=y.clientX-M.x,this.startY=y.clientY-M.y,y.dataTransfer.setData("text/plain",this.id),y.dataTransfer.effectAllowed="move"}setAt(y,M,F,z){const[O,D]=this.parentDimensions;[F,z]=this.screenToPageTranslation(F,z),this.x=(y+F)/O,this.y=(M+z)/D,this.div.style.left=`${100*this.x}%`,this.div.style.top=`${100*this.y}%`}translate(y,M){const[F,z]=this.parentDimensions;[y,M]=this.screenToPageTranslation(y,M),this.x+=y/F,this.y+=M/z,this.div.style.left=`${100*this.x}%`,this.div.style.top=`${100*this.y}%`}screenToPageTranslation(y,M){switch(this.parentRotation){case 90:return[M,-y];case 180:return[-y,-M];case 270:return[-M,y];default:return[y,M]}}get parentScale(){return this._uiManager.viewParameters.realScale}get parentRotation(){return(this._uiManager.viewParameters.rotation+this.pageRotation)%360}get parentDimensions(){const{realScale:y}=this._uiManager.viewParameters,[M,F]=this.pageDimensions;return[M*y,F*y]}setDims(y,M){const[F,z]=this.parentDimensions;this.div.style.width=`${100*y/F}%`,this.div.style.height=`${100*M/z}%`}fixDims(){const{style:y}=this.div,{height:M,width:F}=y,z=F.endsWith("%"),O=M.endsWith("%");if(z&&O)return;const[D,R]=this.parentDimensions;z||(y.width=`${100*parseFloat(F)/D}%`),O||(y.height=`${100*parseFloat(M)/R}%`)}getInitialTranslation(){return[0,0]}render(){this.div=document.createElement("div"),this.div.setAttribute("data-editor-rotation",(360-this.rotation)%360),this.div.className=this.name,this.div.setAttribute("id",this.id),this.div.setAttribute("tabIndex",0),this.setInForeground(),this.div.addEventListener("focusin",V(this,B)),this.div.addEventListener("focusout",V(this,k));const[y,M]=this.getInitialTranslation();return this.translate(y,M),(0,C.bindEvents)(this,this.div,["dragstart","pointerdown"]),this.div}pointerdown(y){const{isMac:M}=l.FeatureTest.platform;if(y.button!==0||y.ctrlKey&&M){y.preventDefault();return}y.ctrlKey&&!M||y.shiftKey||y.metaKey&&M?this.parent.toggleSelected(this):this.parent.setSelected(this),OI(this,n,!0)}getRect(y,M){const F=this.parentScale,[z,O]=this.pageDimensions,[D,R]=this.pageTranslation,q=y/F,II=M/F,t=this.x*z,d=this.y*O,b=this.width*z,u=this.height*O;switch(this.rotation){case 0:return[t+q+D,O-d-II-u+R,t+q+b+D,O-d-II+R];case 90:return[t+II+D,O-d+q+R,t+II+u+D,O-d+q+b+R];case 180:return[t-q-b+D,O-d+II+R,t-q+D,O-d+II+u+R];case 270:return[t-II-u+D,O-d-q-b+R,t-II+D,O-d-q+R];default:throw new Error("Invalid rotation")}}getRectInCurrentCoords(y,M){const[F,z,O,D]=y,R=O-F,q=D-z;switch(this.rotation){case 0:return[F,M-D,R,q];case 90:return[F,M-z,q,R];case 180:return[O,M-z,R,q];case 270:return[O,M-D,q,R];default:throw new Error("Invalid rotation")}}onceAdded(){}isEmpty(){return!1}enableEditMode(){OI(this,w,!0)}disableEditMode(){OI(this,w,!1)}isInEditMode(){return V(this,w)}shouldGetKeyboardEvents(){return!1}needsToBeRebuilt(){return this.div&&!this.isAttachedToDOM}rebuild(){var y;(y=this.div)==null||y.addEventListener("focusin",V(this,B))}serialize(){(0,l.unreachable)("An editor must be serializable")}static deserialize(y,M,F){const z=new this.prototype.constructor({parent:M,id:M.getNextId(),uiManager:F});z.rotation=y.rotation;const[O,D]=z.pageDimensions,[R,q,II,t]=z.getRectInCurrentCoords(y.rect,D);return z.x=R/O,z.y=q/D,z.width=II/O,z.height=t/D,z}remove(){this.div.removeEventListener("focusin",V(this,B)),this.div.removeEventListener("focusout",V(this,k)),this.isEmpty()||this.commit(),this.parent.remove(this)}select(){var y;(y=this.div)==null||y.classList.add("selectedEditor")}unselect(){var y;(y=this.div)==null||y.classList.remove("selectedEditor")}updateParams(y,M){}disableEditing(){}enableEditing(){}get propertiesToUpdate(){return{}}get contentDiv(){return this.div}get isEditing(){return V(this,a)}set isEditing(y){OI(this,a,y),y?(this.parent.setSelected(this),this.parent.setActiveEditor(this)):this.parent.setActiveEditor(null)}};let G=Q;B=new WeakMap,k=new WeakMap,n=new WeakMap,a=new WeakMap,w=new WeakMap,L=new WeakMap,sg(G,"_colorManager",new C.ColorManager),sg(G,"_zIndex",1),g.AnnotationEditor=G},(I,g,A)=>{var Q,S,y,M,F,z,oC,R,q,II,t,d,b,u,m,J,r,XI,SI,kI,FI,JI,LI,UI,TI,QI,fI,sI,o,X,T,YC,v,fg,U,VC,W,aC,c,hg,Y,tg,j,hC,f,XC,hI,Pg,uI,pg,zI,qg;Object.defineProperty(g,"__esModule",{value:!0}),g.KeyboardManager=g.CommandManager=g.ColorManager=g.AnnotationEditorUIManager=void 0,g.bindEvents=G,g.opacityToHex=B;var C=A(1),l=A(6);function G(_I,yI,rI){for(const Ig of rI)yI.addEventListener(Ig,_I[Ig].bind(_I))}function B(_I){return Math.round(Math.min(255,Math.max(1,255*_I))).toString(16).padStart(2,"0")}class k{constructor(){DI(this,Q,0)}getId(){return`${C.AnnotationEditorPrefix}${Lg(this,Q)._++}`}}Q=new WeakMap;class n{constructor(yI=128){DI(this,S,[]);DI(this,y,!1);DI(this,M,void 0);DI(this,F,-1);OI(this,M,yI)}add({cmd:yI,undo:rI,mustExec:Ig,type:Ag=NaN,overwriteIfSameType:pI=!1,keepUndo:nI=!1}){if(Ig&&yI(),V(this,y))return;const MI={cmd:yI,undo:rI,type:Ag};if(V(this,F)===-1){V(this,S).length>0&&(V(this,S).length=0),OI(this,F,0),V(this,S).push(MI);return}if(pI&&V(this,S)[V(this,F)].type===Ag){nI&&(MI.undo=V(this,S)[V(this,F)].undo),V(this,S)[V(this,F)]=MI;return}const EI=V(this,F)+1;EI===V(this,M)?V(this,S).splice(0,1):(OI(this,F,EI),EI<V(this,S).length&&V(this,S).splice(EI)),V(this,S).push(MI)}undo(){V(this,F)!==-1&&(OI(this,y,!0),V(this,S)[V(this,F)].undo(),OI(this,y,!1),OI(this,F,V(this,F)-1))}redo(){V(this,F)<V(this,S).length-1&&(OI(this,F,V(this,F)+1),OI(this,y,!0),V(this,S)[V(this,F)].cmd(),OI(this,y,!1))}hasSomethingToUndo(){return V(this,F)!==-1}hasSomethingToRedo(){return V(this,F)<V(this,S).length-1}destroy(){OI(this,S,null)}}S=new WeakMap,y=new WeakMap,M=new WeakMap,F=new WeakMap,g.CommandManager=n;class a{constructor(yI){DI(this,z);this.buffer=[],this.callbacks=new Map,this.allKeys=new Set;const{isMac:rI}=C.FeatureTest.platform;for(const[Ig,Ag]of yI)for(const pI of Ig){const nI=pI.startsWith("mac+");rI&&nI?(this.callbacks.set(pI.slice(4),Ag),this.allKeys.add(pI.split("+").at(-1))):!rI&&!nI&&(this.callbacks.set(pI,Ag),this.allKeys.add(pI.split("+").at(-1)))}}exec(yI,rI){if(!this.allKeys.has(rI.key))return;const Ig=this.callbacks.get(tI(this,z,oC).call(this,rI));Ig&&(Ig.bind(yI)(),rI.stopPropagation(),rI.preventDefault())}}z=new WeakSet,oC=function(yI){yI.altKey&&this.buffer.push("alt"),yI.ctrlKey&&this.buffer.push("ctrl"),yI.metaKey&&this.buffer.push("meta"),yI.shiftKey&&this.buffer.push("shift"),this.buffer.push(yI.key);const rI=this.buffer.join("+");return this.buffer.length=0,rI},g.KeyboardManager=a;const D=class{get _colors(){const yI=new Map([["CanvasText",null],["Canvas",null]]);return(0,l.getColorValues)(yI),(0,C.shadow)(this,"_colors",yI)}convert(yI){const rI=(0,l.getRGB)(yI);if(!window.matchMedia("(forced-colors: active)").matches)return rI;for(const[Ig,Ag]of this._colors)if(Ag.every((pI,nI)=>pI===rI[nI]))return D._colorsMapping.get(Ig);return rI}getHexCode(yI){const rI=this._colors.get(yI);return rI?C.Util.makeHexColor(...rI):yI}};let w=D;sg(w,"_colorsMapping",new Map([["CanvasText",[0,0,0]],["Canvas",[255,255,255]]])),g.ColorManager=w;const vI=class{constructor(yI,rI,Ig){DI(this,T);DI(this,v);DI(this,U);DI(this,W);DI(this,c);DI(this,Y);DI(this,j);DI(this,f);DI(this,hI);DI(this,uI);DI(this,zI);DI(this,R,null);DI(this,q,new Map);DI(this,II,new Map);DI(this,t,null);DI(this,d,new n);DI(this,b,0);DI(this,u,null);DI(this,m,new Set);DI(this,J,null);DI(this,r,new k);DI(this,XI,!1);DI(this,SI,C.AnnotationEditorType.NONE);DI(this,kI,new Set);DI(this,FI,this.copy.bind(this));DI(this,JI,this.cut.bind(this));DI(this,LI,this.paste.bind(this));DI(this,UI,this.keydown.bind(this));DI(this,TI,this.onEditingAction.bind(this));DI(this,QI,this.onPageChanging.bind(this));DI(this,fI,this.onScaleChanging.bind(this));DI(this,sI,this.onRotationChanging.bind(this));DI(this,o,{isEditing:!1,isEmpty:!0,hasSomethingToUndo:!1,hasSomethingToRedo:!1,hasSelectedEditor:!1});DI(this,X,null);OI(this,X,yI),OI(this,J,rI),V(this,J)._on("editingaction",V(this,TI)),V(this,J)._on("pagechanging",V(this,QI)),V(this,J)._on("scalechanging",V(this,fI)),V(this,J)._on("rotationchanging",V(this,sI)),OI(this,t,Ig),this.viewParameters={realScale:l.PixelsPerInch.PDF_TO_CSS_UNITS,rotation:0}}destroy(){tI(this,v,fg).call(this),V(this,J)._off("editingaction",V(this,TI)),V(this,J)._off("pagechanging",V(this,QI)),V(this,J)._off("scalechanging",V(this,fI)),V(this,J)._off("rotationchanging",V(this,sI));for(const yI of V(this,II).values())yI.destroy();V(this,II).clear(),V(this,q).clear(),V(this,m).clear(),OI(this,R,null),V(this,kI).clear(),V(this,d).destroy()}onPageChanging({pageNumber:yI}){OI(this,b,yI-1)}focusMainContainer(){V(this,X).focus()}addShouldRescale(yI){V(this,m).add(yI)}removeShouldRescale(yI){V(this,m).delete(yI)}onScaleChanging({scale:yI}){this.commitOrRemove(),this.viewParameters.realScale=yI*l.PixelsPerInch.PDF_TO_CSS_UNITS;for(const rI of V(this,m))rI.onScaleChanging()}onRotationChanging({pagesRotation:yI}){this.commitOrRemove(),this.viewParameters.rotation=yI}addToAnnotationStorage(yI){!yI.isEmpty()&&V(this,t)&&!V(this,t).has(yI.id)&&V(this,t).setValue(yI.id,yI)}copy(yI){if(yI.preventDefault(),V(this,R)&&V(this,R).commitOrRemove(),!this.hasSelection)return;const rI=[];for(const Ig of V(this,kI))Ig.isEmpty()||rI.push(Ig.serialize());rI.length!==0&&yI.clipboardData.setData("application/pdfjs",JSON.stringify(rI))}cut(yI){this.copy(yI),this.delete()}paste(yI){yI.preventDefault();let rI=yI.clipboardData.getData("application/pdfjs");if(!rI)return;try{rI=JSON.parse(rI)}catch(Ag){(0,C.warn)(`paste: "${Ag.message}".`);return}if(!Array.isArray(rI))return;this.unselectAll();const Ig=V(this,II).get(V(this,b));try{const Ag=[];for(const MI of rI){const EI=Ig.deserialize(MI);if(!EI)return;Ag.push(EI)}const pI=()=>{for(const MI of Ag)tI(this,hI,Pg).call(this,MI);tI(this,zI,qg).call(this,Ag)},nI=()=>{for(const MI of Ag)MI.remove()};this.addCommands({cmd:pI,undo:nI,mustExec:!0})}catch(Ag){(0,C.warn)(`paste: "${Ag.message}".`)}}keydown(yI){var rI;(rI=this.getActive())!=null&&rI.shouldGetKeyboardEvents()||vI._keyboardManager.exec(this,yI)}onEditingAction(yI){["undo","redo","delete","selectAll"].includes(yI.name)&&this[yI.name]()}setEditingState(yI){yI?(tI(this,T,YC).call(this),tI(this,U,VC).call(this),tI(this,c,hg).call(this,{isEditing:V(this,SI)!==C.AnnotationEditorType.NONE,isEmpty:tI(this,uI,pg).call(this),hasSomethingToUndo:V(this,d).hasSomethingToUndo(),hasSomethingToRedo:V(this,d).hasSomethingToRedo(),hasSelectedEditor:!1})):(tI(this,v,fg).call(this),tI(this,W,aC).call(this),tI(this,c,hg).call(this,{isEditing:!1}))}registerEditorTypes(yI){if(!V(this,u)){OI(this,u,yI);for(const rI of V(this,u))tI(this,Y,tg).call(this,rI.defaultPropertiesToUpdate)}}getId(){return V(this,r).getId()}get currentLayer(){return V(this,II).get(V(this,b))}get currentPageIndex(){return V(this,b)}addLayer(yI){V(this,II).set(yI.pageIndex,yI),V(this,XI)?yI.enable():yI.disable()}removeLayer(yI){V(this,II).delete(yI.pageIndex)}updateMode(yI){if(OI(this,SI,yI),yI===C.AnnotationEditorType.NONE)this.setEditingState(!1),tI(this,f,XC).call(this);else{this.setEditingState(!0),tI(this,j,hC).call(this);for(const rI of V(this,II).values())rI.updateMode(yI)}}updateToolbar(yI){yI!==V(this,SI)&&V(this,J).dispatch("switchannotationeditormode",{source:this,mode:yI})}updateParams(yI,rI){if(V(this,u)){for(const Ig of V(this,kI))Ig.updateParams(yI,rI);for(const Ig of V(this,u))Ig.updateDefaultParams(yI,rI)}}getEditors(yI){const rI=[];for(const Ig of V(this,q).values())Ig.pageIndex===yI&&rI.push(Ig);return rI}getEditor(yI){return V(this,q).get(yI)}addEditor(yI){V(this,q).set(yI.id,yI)}removeEditor(yI){var rI;V(this,q).delete(yI.id),this.unselect(yI),(rI=V(this,t))==null||rI.remove(yI.id)}setActiveEditor(yI){V(this,R)!==yI&&(OI(this,R,yI),yI&&tI(this,Y,tg).call(this,yI.propertiesToUpdate))}toggleSelected(yI){if(V(this,kI).has(yI)){V(this,kI).delete(yI),yI.unselect(),tI(this,c,hg).call(this,{hasSelectedEditor:this.hasSelection});return}V(this,kI).add(yI),yI.select(),tI(this,Y,tg).call(this,yI.propertiesToUpdate),tI(this,c,hg).call(this,{hasSelectedEditor:!0})}setSelected(yI){for(const rI of V(this,kI))rI!==yI&&rI.unselect();V(this,kI).clear(),V(this,kI).add(yI),yI.select(),tI(this,Y,tg).call(this,yI.propertiesToUpdate),tI(this,c,hg).call(this,{hasSelectedEditor:!0})}isSelected(yI){return V(this,kI).has(yI)}unselect(yI){yI.unselect(),V(this,kI).delete(yI),tI(this,c,hg).call(this,{hasSelectedEditor:this.hasSelection})}get hasSelection(){return V(this,kI).size!==0}undo(){V(this,d).undo(),tI(this,c,hg).call(this,{hasSomethingToUndo:V(this,d).hasSomethingToUndo(),hasSomethingToRedo:!0,isEmpty:tI(this,uI,pg).call(this)})}redo(){V(this,d).redo(),tI(this,c,hg).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:V(this,d).hasSomethingToRedo(),isEmpty:tI(this,uI,pg).call(this)})}addCommands(yI){V(this,d).add(yI),tI(this,c,hg).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:!1,isEmpty:tI(this,uI,pg).call(this)})}delete(){if(this.commitOrRemove(),!this.hasSelection)return;const yI=[...V(this,kI)],rI=()=>{for(const Ag of yI)Ag.remove()},Ig=()=>{for(const Ag of yI)tI(this,hI,Pg).call(this,Ag)};this.addCommands({cmd:rI,undo:Ig,mustExec:!0})}commitOrRemove(){var yI;(yI=V(this,R))==null||yI.commitOrRemove()}selectAll(){for(const yI of V(this,kI))yI.commit();tI(this,zI,qg).call(this,V(this,q).values())}unselectAll(){if(V(this,R)){V(this,R).commitOrRemove();return}if(V(this,kI).size!==0){for(const yI of V(this,kI))yI.unselect();V(this,kI).clear(),tI(this,c,hg).call(this,{hasSelectedEditor:!1})}}isActive(yI){return V(this,R)===yI}getActive(){return V(this,R)}getMode(){return V(this,SI)}};let L=vI;R=new WeakMap,q=new WeakMap,II=new WeakMap,t=new WeakMap,d=new WeakMap,b=new WeakMap,u=new WeakMap,m=new WeakMap,J=new WeakMap,r=new WeakMap,XI=new WeakMap,SI=new WeakMap,kI=new WeakMap,FI=new WeakMap,JI=new WeakMap,LI=new WeakMap,UI=new WeakMap,TI=new WeakMap,QI=new WeakMap,fI=new WeakMap,sI=new WeakMap,o=new WeakMap,X=new WeakMap,T=new WeakSet,YC=function(){V(this,X).addEventListener("keydown",V(this,UI))},v=new WeakSet,fg=function(){V(this,X).removeEventListener("keydown",V(this,UI))},U=new WeakSet,VC=function(){document.addEventListener("copy",V(this,FI)),document.addEventListener("cut",V(this,JI)),document.addEventListener("paste",V(this,LI))},W=new WeakSet,aC=function(){document.removeEventListener("copy",V(this,FI)),document.removeEventListener("cut",V(this,JI)),document.removeEventListener("paste",V(this,LI))},c=new WeakSet,hg=function(yI){Object.entries(yI).some(([Ig,Ag])=>V(this,o)[Ig]!==Ag)&&V(this,J).dispatch("annotationeditorstateschanged",{source:this,details:Object.assign(V(this,o),yI)})},Y=new WeakSet,tg=function(yI){V(this,J).dispatch("annotationeditorparamschanged",{source:this,details:yI})},j=new WeakSet,hC=function(){if(!V(this,XI)){OI(this,XI,!0);for(const yI of V(this,II).values())yI.enable()}},f=new WeakSet,XC=function(){if(this.unselectAll(),V(this,XI)){OI(this,XI,!1);for(const yI of V(this,II).values())yI.disable()}},hI=new WeakSet,Pg=function(yI){const rI=V(this,II).get(yI.pageIndex);rI?rI.addOrRebuild(yI):this.addEditor(yI)},uI=new WeakSet,pg=function(){if(V(this,q).size===0)return!0;if(V(this,q).size===1)for(const yI of V(this,q).values())return yI.isEmpty();return!1},zI=new WeakSet,qg=function(yI){V(this,kI).clear();for(const rI of yI)rI.isEmpty()||(V(this,kI).add(rI),rI.select());tI(this,c,hg).call(this,{hasSelectedEditor:!0})},sg(L,"_keyboardManager",new a([[["ctrl+a","mac+meta+a"],vI.prototype.selectAll],[["ctrl+z","mac+meta+z"],vI.prototype.undo],[["ctrl+y","ctrl+shift+Z","mac+meta+shift+Z"],vI.prototype.redo],[["Backspace","alt+Backspace","ctrl+Backspace","shift+Backspace","mac+Backspace","mac+alt+Backspace","mac+ctrl+Backspace","Delete","ctrl+Delete","shift+Delete"],vI.prototype.delete],[["Escape","mac+Escape"],vI.prototype.unselectAll]])),g.AnnotationEditorUIManager=L},(I,g,A)=>{var FI,JI,LI,UI,TI,QI,fI,sI,o,eg,T,ng,v,Xg;Object.defineProperty(g,"__esModule",{value:!0}),g.StatTimer=g.RenderingCancelledException=g.PixelsPerInch=g.PageViewport=g.PDFDateString=g.DOMStandardFontDataFactory=g.DOMSVGFactory=g.DOMFilterFactory=g.DOMCanvasFactory=g.DOMCMapReaderFactory=g.AnnotationPrefix=void 0,g.deprecated=t,g.getColorValues=J,g.getCurrentTransform=r,g.getCurrentTransformInverse=XI,g.getFilenameFromUrl=O,g.getPdfFilenameFromUrl=D,g.getRGB=m,g.getXfaPageViewport=u,g.isDataScheme=F,g.isPdfFile=z,g.isValidFetchUrl=q,g.loadScript=II,g.setLayerDimensions=SI;var C=A(7),l=A(1);const G="http://www.w3.org/2000/svg",B="pdfjs_internal_id_";g.AnnotationPrefix=B;const kI=class{};let k=kI;sg(k,"CSS",96),sg(k,"PDF",72),sg(k,"PDF_TO_CSS_UNITS",kI.CSS/kI.PDF),g.PixelsPerInch=k;class n extends C.BaseFilterFactory{constructor({docId:W,ownerDocument:Z=globalThis.document}={}){super();DI(this,o);DI(this,T);DI(this,v);DI(this,FI,void 0);DI(this,JI,void 0);DI(this,LI,void 0);DI(this,UI,void 0);DI(this,TI,void 0);DI(this,QI,void 0);DI(this,fI,void 0);DI(this,sI,0);OI(this,LI,W),OI(this,UI,Z)}addFilter(W){if(!W)return"none";let Z=V(this,o,eg).get(W);if(Z)return Z;let c,s,Y,N;if(W.length===1){const hI=W[0],HI=new Array(256);for(let uI=0;uI<256;uI++)HI[uI]=hI[uI]/255;N=c=s=Y=HI.join(",")}else{const[hI,HI,uI]=W,KI=new Array(256),zI=new Array(256),xI=new Array(256);for(let vI=0;vI<256;vI++)KI[vI]=hI[vI]/255,zI[vI]=HI[vI]/255,xI[vI]=uI[vI]/255;c=KI.join(","),s=zI.join(","),Y=xI.join(","),N=`${c}${s}${Y}`}if(Z=V(this,o,eg).get(N),Z)return V(this,o,eg).set(W,Z),Z;const j=`g_${V(this,LI)}_transfer_map_${Lg(this,sI)._++}`,oI=`url(#${j})`;V(this,o,eg).set(W,oI),V(this,o,eg).set(N,oI);const f=V(this,UI).createElementNS(G,"filter",G);f.setAttribute("id",j),f.setAttribute("color-interpolation-filters","sRGB");const NI=V(this,UI).createElementNS(G,"feComponentTransfer");return f.append(NI),tI(this,v,Xg).call(this,NI,"feFuncR",c),tI(this,v,Xg).call(this,NI,"feFuncG",s),tI(this,v,Xg).call(this,NI,"feFuncB",Y),V(this,T,ng).append(f),oI}addHCMFilter(W,Z){var uI;const c=`${W}-${Z}`;if(V(this,QI)===c)return V(this,fI);if(OI(this,QI,c),OI(this,fI,"none"),(uI=V(this,TI))==null||uI.remove(),!W||!Z)return V(this,fI);V(this,T,ng).style.color=W,W=getComputedStyle(V(this,T,ng)).getPropertyValue("color");const s=m(W);W=l.Util.makeHexColor(...s),V(this,T,ng).style.color=Z,Z=getComputedStyle(V(this,T,ng)).getPropertyValue("color");const Y=m(Z);if(Z=l.Util.makeHexColor(...Y),V(this,T,ng).style.color="",W==="#000000"&&Z==="#ffffff"||W===Z)return V(this,fI);const N=new Array(256);for(let KI=0;KI<=255;KI++){const zI=KI/255;N[KI]=zI<=.03928?zI/12.92:((zI+.055)/1.055)**2.4}const j=N.join(","),oI=`g_${V(this,LI)}_hcm_filter`,f=OI(this,TI,V(this,UI).createElementNS(G,"filter",G));f.setAttribute("id",oI),f.setAttribute("color-interpolation-filters","sRGB");let NI=V(this,UI).createElementNS(G,"feComponentTransfer");f.append(NI),tI(this,v,Xg).call(this,NI,"feFuncR",j),tI(this,v,Xg).call(this,NI,"feFuncG",j),tI(this,v,Xg).call(this,NI,"feFuncB",j);const hI=V(this,UI).createElementNS(G,"feColorMatrix");hI.setAttribute("type","matrix"),hI.setAttribute("values","0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"),f.append(hI),NI=V(this,UI).createElementNS(G,"feComponentTransfer"),f.append(NI);const HI=(KI,zI)=>{const xI=s[KI]/255,vI=Y[KI]/255,_I=new Array(zI+1);for(let yI=0;yI<=zI;yI++)_I[yI]=xI+yI/zI*(vI-xI);return _I.join(",")};return tI(this,v,Xg).call(this,NI,"feFuncR",HI(0,5)),tI(this,v,Xg).call(this,NI,"feFuncG",HI(1,5)),tI(this,v,Xg).call(this,NI,"feFuncB",HI(2,5)),V(this,T,ng).append(f),OI(this,fI,`url(#${oI})`),V(this,fI)}destroy(W=!1){W&&V(this,fI)||(V(this,JI)&&(V(this,JI).parentNode.parentNode.remove(),OI(this,JI,null)),V(this,FI)&&(V(this,FI).clear(),OI(this,FI,null)),OI(this,sI,0))}}FI=new WeakMap,JI=new WeakMap,LI=new WeakMap,UI=new WeakMap,TI=new WeakMap,QI=new WeakMap,fI=new WeakMap,sI=new WeakMap,o=new WeakSet,eg=function(){return V(this,FI)||OI(this,FI,new Map)},T=new WeakSet,ng=function(){if(!V(this,JI)){const W=V(this,UI).createElement("div"),{style:Z}=W;Z.visibility="hidden",Z.contain="strict",Z.width=Z.height=0,Z.position="absolute",Z.top=Z.left=0,Z.zIndex=-1;const c=V(this,UI).createElementNS(G,"svg");c.setAttribute("width",0),c.setAttribute("height",0),OI(this,JI,V(this,UI).createElementNS(G,"defs")),W.append(c),c.append(V(this,JI)),V(this,UI).body.append(W)}return V(this,JI)},v=new WeakSet,Xg=function(W,Z,c){const s=V(this,UI).createElementNS(G,Z);s.setAttribute("type","discrete"),s.setAttribute("tableValues",c),W.append(s)},g.DOMFilterFactory=n;class a extends C.BaseCanvasFactory{constructor({ownerDocument:i=globalThis.document}={}){super(),this._document=i}_createCanvas(i,W){const Z=this._document.createElement("canvas");return Z.width=i,Z.height=W,Z}}g.DOMCanvasFactory=a;async function w(U,i=!1){if(q(U,document.baseURI)){const W=await fetch(U);if(!W.ok)throw new Error(W.statusText);return i?new Uint8Array(await W.arrayBuffer()):(0,l.stringToBytes)(await W.text())}return new Promise((W,Z)=>{const c=new XMLHttpRequest;c.open("GET",U,!0),i&&(c.responseType="arraybuffer"),c.onreadystatechange=()=>{if(c.readyState===XMLHttpRequest.DONE){if(c.status===200||c.status===0){let s;if(i&&c.response?s=new Uint8Array(c.response):!i&&c.responseText&&(s=(0,l.stringToBytes)(c.responseText)),s){W(s);return}}Z(new Error(c.statusText))}},c.send(null)})}class L extends C.BaseCMapReaderFactory{_fetchData(i,W){return w(i,this.isCompressed).then(Z=>({cMapData:Z,compressionType:W}))}}g.DOMCMapReaderFactory=L;class Q extends C.BaseStandardFontDataFactory{_fetchData(i){return w(i,!0)}}g.DOMStandardFontDataFactory=Q;class S extends C.BaseSVGFactory{_createSVG(i){return document.createElementNS(G,i)}}g.DOMSVGFactory=S;class y{constructor({viewBox:i,scale:W,rotation:Z,offsetX:c=0,offsetY:s=0,dontFlip:Y=!1}){this.viewBox=i,this.scale=W,this.rotation=Z,this.offsetX=c,this.offsetY=s;const N=(i[2]+i[0])/2,j=(i[3]+i[1])/2;let oI,f,NI,hI;switch(Z%=360,Z<0&&(Z+=360),Z){case 180:oI=-1,f=0,NI=0,hI=1;break;case 90:oI=0,f=1,NI=1,hI=0;break;case 270:oI=0,f=-1,NI=-1,hI=0;break;case 0:oI=1,f=0,NI=0,hI=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}Y&&(NI=-NI,hI=-hI);let HI,uI,KI,zI;oI===0?(HI=Math.abs(j-i[1])*W+c,uI=Math.abs(N-i[0])*W+s,KI=(i[3]-i[1])*W,zI=(i[2]-i[0])*W):(HI=Math.abs(N-i[0])*W+c,uI=Math.abs(j-i[1])*W+s,KI=(i[2]-i[0])*W,zI=(i[3]-i[1])*W),this.transform=[oI*W,f*W,NI*W,hI*W,HI-oI*W*N-NI*W*j,uI-f*W*N-hI*W*j],this.width=KI,this.height=zI}get rawDims(){const{viewBox:i}=this;return(0,l.shadow)(this,"rawDims",{pageWidth:i[2]-i[0],pageHeight:i[3]-i[1],pageX:i[0],pageY:i[1]})}clone({scale:i=this.scale,rotation:W=this.rotation,offsetX:Z=this.offsetX,offsetY:c=this.offsetY,dontFlip:s=!1}={}){return new y({viewBox:this.viewBox.slice(),scale:i,rotation:W,offsetX:Z,offsetY:c,dontFlip:s})}convertToViewportPoint(i,W){return l.Util.applyTransform([i,W],this.transform)}convertToViewportRectangle(i){const W=l.Util.applyTransform([i[0],i[1]],this.transform),Z=l.Util.applyTransform([i[2],i[3]],this.transform);return[W[0],W[1],Z[0],Z[1]]}convertToPdfPoint(i,W){return l.Util.applyInverseTransform([i,W],this.transform)}}g.PageViewport=y;class M extends l.BaseException{constructor(i,W,Z=0){super(i,"RenderingCancelledException"),this.type=W,this.extraDelay=Z}}g.RenderingCancelledException=M;function F(U){const i=U.length;let W=0;for(;W<i&&U[W].trim()==="";)W++;return U.substring(W,W+5).toLowerCase()==="data:"}function z(U){return typeof U=="string"&&/\.pdf$/i.test(U)}function O(U,i=!1){return i||([U]=U.split(/[#?]/,1)),U.substring(U.lastIndexOf("/")+1)}function D(U,i="document.pdf"){if(typeof U!="string")return i;if(F(U))return(0,l.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),i;const W=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/,Z=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,c=W.exec(U);let s=Z.exec(c[1])||Z.exec(c[2])||Z.exec(c[3]);if(s&&(s=s[0],s.includes("%")))try{s=Z.exec(decodeURIComponent(s))[0]}catch{}return s||i}class R{constructor(){sg(this,"started",Object.create(null));sg(this,"times",[])}time(i){i in this.started&&(0,l.warn)(`Timer is already running for ${i}`),this.started[i]=Date.now()}timeEnd(i){i in this.started||(0,l.warn)(`Timer has not been started for ${i}`),this.times.push({name:i,start:this.started[i],end:Date.now()}),delete this.started[i]}toString(){const i=[];let W=0;for(const{name:Z}of this.times)W=Math.max(Z.length,W);for(const{name:Z,start:c,end:s}of this.times)i.push(`${Z.padEnd(W)} ${s-c}ms
`);return i.join("")}}g.StatTimer=R;function q(U,i){try{const{protocol:W}=i?new URL(U,i):new URL(U);return W==="http:"||W==="https:"}catch{return!1}}function II(U,i=!1){return new Promise((W,Z)=>{const c=document.createElement("script");c.src=U,c.onload=function(s){i&&c.remove(),W(s)},c.onerror=function(){Z(new Error(`Cannot load script at: ${c.src}`))},(document.head||document.documentElement).append(c)})}function t(U){console.log("Deprecated API usage: "+U)}let d;class b{static toDateObject(i){if(!i||typeof i!="string")return null;d||(d=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));const W=d.exec(i);if(!W)return null;const Z=parseInt(W[1],10);let c=parseInt(W[2],10);c=c>=1&&c<=12?c-1:0;let s=parseInt(W[3],10);s=s>=1&&s<=31?s:1;let Y=parseInt(W[4],10);Y=Y>=0&&Y<=23?Y:0;let N=parseInt(W[5],10);N=N>=0&&N<=59?N:0;let j=parseInt(W[6],10);j=j>=0&&j<=59?j:0;const oI=W[7]||"Z";let f=parseInt(W[8],10);f=f>=0&&f<=23?f:0;let NI=parseInt(W[9],10)||0;return NI=NI>=0&&NI<=59?NI:0,oI==="-"?(Y+=f,N+=NI):oI==="+"&&(Y-=f,N-=NI),new Date(Date.UTC(Z,c,s,Y,N,j))}}g.PDFDateString=b;function u(U,{scale:i=1,rotation:W=0}){const{width:Z,height:c}=U.attributes.style,s=[0,0,parseInt(Z),parseInt(c)];return new y({viewBox:s,scale:i,rotation:W})}function m(U){if(U.startsWith("#")){const i=parseInt(U.slice(1),16);return[(i&16711680)>>16,(i&65280)>>8,i&255]}return U.startsWith("rgb(")?U.slice(4,-1).split(",").map(i=>parseInt(i)):U.startsWith("rgba(")?U.slice(5,-1).split(",").map(i=>parseInt(i)).slice(0,3):((0,l.warn)(`Not a valid color format: "${U}"`),[0,0,0])}function J(U){const i=document.createElement("span");i.style.visibility="hidden",document.body.append(i);for(const W of U.keys()){i.style.color=W;const Z=window.getComputedStyle(i).color;U.set(W,m(Z))}i.remove()}function r(U){const{a:i,b:W,c:Z,d:c,e:s,f:Y}=U.getTransform();return[i,W,Z,c,s,Y]}function XI(U){const{a:i,b:W,c:Z,d:c,e:s,f:Y}=U.getTransform().invertSelf();return[i,W,Z,c,s,Y]}function SI(U,i,W=!1,Z=!0){if(i instanceof y){const{pageWidth:c,pageHeight:s}=i.rawDims,{style:Y}=U,N=`calc(var(--scale-factor) * ${c}px)`,j=`calc(var(--scale-factor) * ${s}px)`;!W||i.rotation%180===0?(Y.width=N,Y.height=j):(Y.width=j,Y.height=N)}Z&&U.setAttribute("data-main-rotation",i.rotation)}},(I,g,A)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.BaseStandardFontDataFactory=g.BaseSVGFactory=g.BaseFilterFactory=g.BaseCanvasFactory=g.BaseCMapReaderFactory=void 0;var C=A(1);class l{constructor(){this.constructor===l&&(0,C.unreachable)("Cannot initialize BaseFilterFactory.")}addFilter(w){return"none"}addHCMFilter(w,L){return"none"}destroy(w=!1){}}g.BaseFilterFactory=l;class G{constructor(){this.constructor===G&&(0,C.unreachable)("Cannot initialize BaseCanvasFactory.")}create(w,L){if(w<=0||L<=0)throw new Error("Invalid canvas size");const Q=this._createCanvas(w,L);return{canvas:Q,context:Q.getContext("2d")}}reset(w,L,Q){if(!w.canvas)throw new Error("Canvas is not specified");if(L<=0||Q<=0)throw new Error("Invalid canvas size");w.canvas.width=L,w.canvas.height=Q}destroy(w){if(!w.canvas)throw new Error("Canvas is not specified");w.canvas.width=0,w.canvas.height=0,w.canvas=null,w.context=null}_createCanvas(w,L){(0,C.unreachable)("Abstract method `_createCanvas` called.")}}g.BaseCanvasFactory=G;class B{constructor({baseUrl:w=null,isCompressed:L=!0}){this.constructor===B&&(0,C.unreachable)("Cannot initialize BaseCMapReaderFactory."),this.baseUrl=w,this.isCompressed=L}async fetch({name:w}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!w)throw new Error("CMap name must be specified.");const L=this.baseUrl+w+(this.isCompressed?".bcmap":""),Q=this.isCompressed?C.CMapCompressionType.BINARY:C.CMapCompressionType.NONE;return this._fetchData(L,Q).catch(S=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${L}`)})}_fetchData(w,L){(0,C.unreachable)("Abstract method `_fetchData` called.")}}g.BaseCMapReaderFactory=B;class k{constructor({baseUrl:w=null}){this.constructor===k&&(0,C.unreachable)("Cannot initialize BaseStandardFontDataFactory."),this.baseUrl=w}async fetch({filename:w}){if(!this.baseUrl)throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');if(!w)throw new Error("Font filename must be specified.");const L=`${this.baseUrl}${w}`;return this._fetchData(L).catch(Q=>{throw new Error(`Unable to load font data at: ${L}`)})}_fetchData(w){(0,C.unreachable)("Abstract method `_fetchData` called.")}}g.BaseStandardFontDataFactory=k;class n{constructor(){this.constructor===n&&(0,C.unreachable)("Cannot initialize BaseSVGFactory.")}create(w,L,Q=!1){if(w<=0||L<=0)throw new Error("Invalid SVG dimensions");const S=this._createSVG("svg:svg");return S.setAttribute("version","1.1"),Q||(S.setAttribute("width",`${w}px`),S.setAttribute("height",`${L}px`)),S.setAttribute("preserveAspectRatio","none"),S.setAttribute("viewBox",`0 0 ${w} ${L}`),S}createElement(w){if(typeof w!="string")throw new Error("Invalid SVG element type");return this._createSVG(w)}_createSVG(w){(0,C.unreachable)("Abstract method `_createSVG` called.")}}g.BaseSVGFactory=n},(I,g,A)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.MurmurHash3_64=void 0;var C=A(1);const l=3285377520,G=4294901760,B=65535;class k{constructor(a){this.h1=a?a&4294967295:l,this.h2=a?a&4294967295:l}update(a){let w,L;if(typeof a=="string"){w=new Uint8Array(a.length*2),L=0;for(let t=0,d=a.length;t<d;t++){const b=a.charCodeAt(t);b<=255?w[L++]=b:(w[L++]=b>>>8,w[L++]=b&255)}}else if((0,C.isArrayBuffer)(a))w=a.slice(),L=w.byteLength;else throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");const Q=L>>2,S=L-Q*4,y=new Uint32Array(w.buffer,0,Q);let M=0,F=0,z=this.h1,O=this.h2;const D=3432918353,R=461845907,q=D&B,II=R&B;for(let t=0;t<Q;t++)t&1?(M=y[t],M=M*D&G|M*q&B,M=M<<15|M>>>17,M=M*R&G|M*II&B,z^=M,z=z<<13|z>>>19,z=z*5+3864292196):(F=y[t],F=F*D&G|F*q&B,F=F<<15|F>>>17,F=F*R&G|F*II&B,O^=F,O=O<<13|O>>>19,O=O*5+3864292196);switch(M=0,S){case 3:M^=w[Q*4+2]<<16;case 2:M^=w[Q*4+1]<<8;case 1:M^=w[Q*4],M=M*D&G|M*q&B,M=M<<15|M>>>17,M=M*R&G|M*II&B,Q&1?z^=M:O^=M}this.h1=z,this.h2=O}hexdigest(){let a=this.h1,w=this.h2;return a^=w>>>1,a=a*3981806797&G|a*36045&B,w=w*4283543511&G|((w<<16|a>>>16)*2950163797&G)>>>16,a^=w>>>1,a=a*444984403&G|a*60499&B,w=w*3301882366&G|((w<<16|a>>>16)*3120437893&G)>>>16,a^=w>>>1,(a>>>0).toString(16).padStart(8,"0")+(w>>>0).toString(16).padStart(8,"0")}}g.MurmurHash3_64=k},(I,g,A)=>{var k;Object.defineProperty(g,"__esModule",{value:!0}),g.FontLoader=g.FontFaceObject=void 0;var C=A(1),l=A(10);class G{constructor({ownerDocument:a=globalThis.document,styleElement:w=null}){DI(this,k,new Set);this._document=a,this.nativeFontFaces=new Set,this.styleElement=null,this.loadingRequests=[],this.loadTestFontId=0}addNativeFontFace(a){this.nativeFontFaces.add(a),this._document.fonts.add(a)}removeNativeFontFace(a){this.nativeFontFaces.delete(a),this._document.fonts.delete(a)}insertRule(a){this.styleElement||(this.styleElement=this._document.createElement("style"),this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));const w=this.styleElement.sheet;w.insertRule(a,w.cssRules.length)}clear(){for(const a of this.nativeFontFaces)this._document.fonts.delete(a);this.nativeFontFaces.clear(),V(this,k).clear(),this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async loadSystemFont(a){if(!(!a||V(this,k).has(a.loadedName))){if((0,C.assert)(!this.disableFontFace,"loadSystemFont shouldn't be called when `disableFontFace` is set."),this.isFontLoadingAPISupported){const{loadedName:w,src:L,style:Q}=a,S=new FontFace(w,L,Q);this.addNativeFontFace(S);try{await S.load(),V(this,k).add(w)}catch{(0,C.warn)(`Cannot load system font: ${a.baseFontName}, installing it could help to improve PDF rendering.`),this.removeNativeFontFace(S)}return}(0,C.unreachable)("Not implemented: loadSystemFont without the Font Loading API.")}}async bind(a){if(a.attached||a.missingFile&&!a.systemFontInfo)return;if(a.attached=!0,a.systemFontInfo){await this.loadSystemFont(a.systemFontInfo);return}if(this.isFontLoadingAPISupported){const L=a.createNativeFontFace();if(L){this.addNativeFontFace(L);try{await L.loaded}catch(Q){throw(0,C.warn)(`Failed to load font '${L.family}': '${Q}'.`),a.disableFontFace=!0,Q}}return}const w=a.createFontFaceRule();if(w){if(this.insertRule(w),this.isSyncFontLoadingSupported)return;await new Promise(L=>{const Q=this._queueLoadingCallback(L);this._prepareFontLoadEvent(a,Q)})}}get isFontLoadingAPISupported(){var w;const a=!!((w=this._document)!=null&&w.fonts);return(0,C.shadow)(this,"isFontLoadingAPISupported",a)}get isSyncFontLoadingSupported(){let a=!1;return(l.isNodeJS||typeof navigator<"u"&&/Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent))&&(a=!0),(0,C.shadow)(this,"isSyncFontLoadingSupported",a)}_queueLoadingCallback(a){function w(){for((0,C.assert)(!Q.done,"completeRequest() cannot be called twice."),Q.done=!0;L.length>0&&L[0].done;){const S=L.shift();setTimeout(S.callback,0)}}const{loadingRequests:L}=this,Q={done:!1,complete:w,callback:a};return L.push(Q),Q}get _loadTestFont(){const a=atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");return(0,C.shadow)(this,"_loadTestFont",a)}_prepareFontLoadEvent(a,w){function L(J,r){return J.charCodeAt(r)<<24|J.charCodeAt(r+1)<<16|J.charCodeAt(r+2)<<8|J.charCodeAt(r+3)&255}function Q(J,r,XI,SI){const kI=J.substring(0,r),FI=J.substring(r+XI);return kI+SI+FI}let S,y;const M=this._document.createElement("canvas");M.width=1,M.height=1;const F=M.getContext("2d");let z=0;function O(J,r){if(++z>30){(0,C.warn)("Load test font never loaded."),r();return}if(F.font="30px "+J,F.fillText(".",0,20),F.getImageData(0,0,1,1).data[3]>0){r();return}setTimeout(O.bind(null,J,r))}const D=`lt${Date.now()}${this.loadTestFontId++}`;let R=this._loadTestFont;R=Q(R,976,D.length,D);const II=16,t=1482184792;let d=L(R,II);for(S=0,y=D.length-3;S<y;S+=4)d=d-t+L(D,S)|0;S<D.length&&(d=d-t+L(D+"XXX",S)|0),R=Q(R,II,4,(0,C.string32)(d));const b=`url(data:font/opentype;base64,${btoa(R)});`,u=`@font-face {font-family:"${D}";src:${b}}`;this.insertRule(u);const m=this._document.createElement("div");m.style.visibility="hidden",m.style.width=m.style.height="10px",m.style.position="absolute",m.style.top=m.style.left="0px";for(const J of[a.loadedName,D]){const r=this._document.createElement("span");r.textContent="Hi",r.style.fontFamily=J,m.append(r)}this._document.body.append(m),O(D,()=>{m.remove(),w.complete()})}}k=new WeakMap,g.FontLoader=G;class B{constructor(a,{isEvalSupported:w=!0,disableFontFace:L=!1,ignoreErrors:Q=!1,inspectFont:S=null}){this.compiledGlyphs=Object.create(null);for(const y in a)this[y]=a[y];this.isEvalSupported=w!==!1,this.disableFontFace=L===!0,this.ignoreErrors=Q===!0,this._inspectFont=S}createNativeFontFace(){var w;if(!this.data||this.disableFontFace)return null;let a;if(!this.cssFontInfo)a=new FontFace(this.loadedName,this.data,{});else{const L={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(L.style=`oblique ${this.cssFontInfo.italicAngle}deg`),a=new FontFace(this.cssFontInfo.fontFamily,this.data,L)}return(w=this._inspectFont)==null||w.call(this,this),a}createFontFaceRule(){var Q;if(!this.data||this.disableFontFace)return null;const a=(0,C.bytesToString)(this.data),w=`url(data:${this.mimetype};base64,${btoa(a)});`;let L;if(!this.cssFontInfo)L=`@font-face {font-family:"${this.loadedName}";src:${w}}`;else{let S=`font-weight: ${this.cssFontInfo.fontWeight};`;this.cssFontInfo.italicAngle&&(S+=`font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),L=`@font-face {font-family:"${this.cssFontInfo.fontFamily}";${S}src:${w}}`}return(Q=this._inspectFont)==null||Q.call(this,this,w),L}getPathGenerator(a,w){if(this.compiledGlyphs[w]!==void 0)return this.compiledGlyphs[w];let L;try{L=a.get(this.loadedName+"_path_"+w)}catch(Q){if(!this.ignoreErrors)throw Q;return(0,C.warn)(`getPathGenerator - ignoring character: "${Q}".`),this.compiledGlyphs[w]=function(S,y){}}if(this.isEvalSupported&&C.FeatureTest.isEvalSupported){const Q=[];for(const S of L){const y=S.args!==void 0?S.args.join(","):"";Q.push("c.",S.cmd,"(",y,`);
`)}return this.compiledGlyphs[w]=new Function("c","size",Q.join(""))}return this.compiledGlyphs[w]=function(Q,S){for(const y of L)y.cmd==="scale"&&(y.args=[S,-S]),Q[y.cmd].apply(Q,y.args)}}}g.FontFaceObject=B},(I,g)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.isNodeJS=void 0;const A=typeof process=="object"&&process+""=="[object process]"&&!process.versions.nw&&!(process.versions.electron&&process.type&&process.type!=="browser");g.isNodeJS=A},(I,g,A)=>{var LI,_g,TI,$g;Object.defineProperty(g,"__esModule",{value:!0}),g.CanvasGraphics=void 0;var C=A(1),l=A(6),G=A(12),B=A(13),k=A(10);const n=16,a=100,w=4096,L=15,Q=10,S=1e3,y=16;function M(sI,o){if(sI._removeMirroring)throw new Error("Context is already forwarding operations.");sI.__originalSave=sI.save,sI.__originalRestore=sI.restore,sI.__originalRotate=sI.rotate,sI.__originalScale=sI.scale,sI.__originalTranslate=sI.translate,sI.__originalTransform=sI.transform,sI.__originalSetTransform=sI.setTransform,sI.__originalResetTransform=sI.resetTransform,sI.__originalClip=sI.clip,sI.__originalMoveTo=sI.moveTo,sI.__originalLineTo=sI.lineTo,sI.__originalBezierCurveTo=sI.bezierCurveTo,sI.__originalRect=sI.rect,sI.__originalClosePath=sI.closePath,sI.__originalBeginPath=sI.beginPath,sI._removeMirroring=()=>{sI.save=sI.__originalSave,sI.restore=sI.__originalRestore,sI.rotate=sI.__originalRotate,sI.scale=sI.__originalScale,sI.translate=sI.__originalTranslate,sI.transform=sI.__originalTransform,sI.setTransform=sI.__originalSetTransform,sI.resetTransform=sI.__originalResetTransform,sI.clip=sI.__originalClip,sI.moveTo=sI.__originalMoveTo,sI.lineTo=sI.__originalLineTo,sI.bezierCurveTo=sI.__originalBezierCurveTo,sI.rect=sI.__originalRect,sI.closePath=sI.__originalClosePath,sI.beginPath=sI.__originalBeginPath,delete sI._removeMirroring},sI.save=function(){o.save(),this.__originalSave()},sI.restore=function(){o.restore(),this.__originalRestore()},sI.translate=function(T,P){o.translate(T,P),this.__originalTranslate(T,P)},sI.scale=function(T,P){o.scale(T,P),this.__originalScale(T,P)},sI.transform=function(T,P,v,aI,U,i){o.transform(T,P,v,aI,U,i),this.__originalTransform(T,P,v,aI,U,i)},sI.setTransform=function(T,P,v,aI,U,i){o.setTransform(T,P,v,aI,U,i),this.__originalSetTransform(T,P,v,aI,U,i)},sI.resetTransform=function(){o.resetTransform(),this.__originalResetTransform()},sI.rotate=function(T){o.rotate(T),this.__originalRotate(T)},sI.clip=function(T){o.clip(T),this.__originalClip(T)},sI.moveTo=function(X,T){o.moveTo(X,T),this.__originalMoveTo(X,T)},sI.lineTo=function(X,T){o.lineTo(X,T),this.__originalLineTo(X,T)},sI.bezierCurveTo=function(X,T,P,v,aI,U){o.bezierCurveTo(X,T,P,v,aI,U),this.__originalBezierCurveTo(X,T,P,v,aI,U)},sI.rect=function(X,T,P,v){o.rect(X,T,P,v),this.__originalRect(X,T,P,v)},sI.closePath=function(){o.closePath(),this.__originalClosePath()},sI.beginPath=function(){o.beginPath(),this.__originalBeginPath()}}class F{constructor(o){this.canvasFactory=o,this.cache=Object.create(null)}getCanvas(o,X,T){let P;return this.cache[o]!==void 0?(P=this.cache[o],this.canvasFactory.reset(P,X,T)):(P=this.canvasFactory.create(X,T),this.cache[o]=P),P}delete(o){delete this.cache[o]}clear(){for(const o in this.cache){const X=this.cache[o];this.canvasFactory.destroy(X),delete this.cache[o]}}}function z(sI,o,X,T,P,v,aI,U,i,W){const[Z,c,s,Y,N,j]=(0,l.getCurrentTransform)(sI);if(c===0&&s===0){const NI=aI*Z+N,hI=Math.round(NI),HI=U*Y+j,uI=Math.round(HI),KI=(aI+i)*Z+N,zI=Math.abs(Math.round(KI)-hI)||1,xI=(U+W)*Y+j,vI=Math.abs(Math.round(xI)-uI)||1;return sI.setTransform(Math.sign(Z),0,0,Math.sign(Y),hI,uI),sI.drawImage(o,X,T,P,v,0,0,zI,vI),sI.setTransform(Z,c,s,Y,N,j),[zI,vI]}if(Z===0&&Y===0){const NI=U*s+N,hI=Math.round(NI),HI=aI*c+j,uI=Math.round(HI),KI=(U+W)*s+N,zI=Math.abs(Math.round(KI)-hI)||1,xI=(aI+i)*c+j,vI=Math.abs(Math.round(xI)-uI)||1;return sI.setTransform(0,Math.sign(c),Math.sign(s),0,hI,uI),sI.drawImage(o,X,T,P,v,0,0,vI,zI),sI.setTransform(Z,c,s,Y,N,j),[vI,zI]}sI.drawImage(o,X,T,P,v,aI,U,i,W);const oI=Math.hypot(Z,c),f=Math.hypot(s,Y);return[oI*i,f*W]}function O(sI){const{width:o,height:X}=sI;if(o>S||X>S)return null;const T=1e3,P=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),v=o+1;let aI=new Uint8Array(v*(X+1)),U,i,W;const Z=o+7&-8;let c=new Uint8Array(Z*X),s=0;for(const f of sI.data){let NI=128;for(;NI>0;)c[s++]=f&NI?0:255,NI>>=1}let Y=0;for(s=0,c[s]!==0&&(aI[0]=1,++Y),i=1;i<o;i++)c[s]!==c[s+1]&&(aI[i]=c[s]?2:1,++Y),s++;for(c[s]!==0&&(aI[i]=2,++Y),U=1;U<X;U++){s=U*Z,W=U*v,c[s-Z]!==c[s]&&(aI[W]=c[s]?1:8,++Y);let f=(c[s]?4:0)+(c[s-Z]?8:0);for(i=1;i<o;i++)f=(f>>2)+(c[s+1]?4:0)+(c[s-Z+1]?8:0),P[f]&&(aI[W+i]=P[f],++Y),s++;if(c[s-Z]!==c[s]&&(aI[W+i]=c[s]?2:4,++Y),Y>T)return null}for(s=Z*(X-1),W=U*v,c[s]!==0&&(aI[W]=8,++Y),i=1;i<o;i++)c[s]!==c[s+1]&&(aI[W+i]=c[s]?4:8,++Y),s++;if(c[s]!==0&&(aI[W+i]=4,++Y),Y>T)return null;const N=new Int32Array([0,v,-1,0,-v,0,0,0,1]),j=new Path2D;for(U=0;Y&&U<=X;U++){let f=U*v;const NI=f+o;for(;f<NI&&!aI[f];)f++;if(f===NI)continue;j.moveTo(f%v,U);const hI=f;let HI=aI[f];do{const uI=N[HI];do f+=uI;while(!aI[f]);const KI=aI[f];KI!==5&&KI!==10?(HI=KI,aI[f]=0):(HI=KI&51*HI>>4,aI[f]&=HI>>2|HI<<2),j.lineTo(f%v,f/v|0),aI[f]||--Y}while(hI!==f);--U}return c=null,aI=null,function(f){f.save(),f.scale(1/o,-1/X),f.translate(0,-X),f.fill(j),f.beginPath(),f.restore()}}class D{constructor(o,X){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=C.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=C.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=C.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.transferMaps="none",this.startNewPathAndClipBox([0,0,o,X])}clone(){const o=Object.create(this);return o.clipBox=this.clipBox.slice(),o}setCurrentPoint(o,X){this.x=o,this.y=X}updatePathMinMax(o,X,T){[X,T]=C.Util.applyTransform([X,T],o),this.minX=Math.min(this.minX,X),this.minY=Math.min(this.minY,T),this.maxX=Math.max(this.maxX,X),this.maxY=Math.max(this.maxY,T)}updateRectMinMax(o,X){const T=C.Util.applyTransform(X,o),P=C.Util.applyTransform(X.slice(2),o);this.minX=Math.min(this.minX,T[0],P[0]),this.minY=Math.min(this.minY,T[1],P[1]),this.maxX=Math.max(this.maxX,T[0],P[0]),this.maxY=Math.max(this.maxY,T[1],P[1])}updateScalingPathMinMax(o,X){C.Util.scaleMinMax(o,X),this.minX=Math.min(this.minX,X[0]),this.maxX=Math.max(this.maxX,X[1]),this.minY=Math.min(this.minY,X[2]),this.maxY=Math.max(this.maxY,X[3])}updateCurvePathMinMax(o,X,T,P,v,aI,U,i,W,Z){const c=C.Util.bezierBoundingBox(X,T,P,v,aI,U,i,W);if(Z){Z[0]=Math.min(Z[0],c[0],c[2]),Z[1]=Math.max(Z[1],c[0],c[2]),Z[2]=Math.min(Z[2],c[1],c[3]),Z[3]=Math.max(Z[3],c[1],c[3]);return}this.updateRectMinMax(o,c)}getPathBoundingBox(o=G.PathType.FILL,X=null){const T=[this.minX,this.minY,this.maxX,this.maxY];if(o===G.PathType.STROKE){X||(0,C.unreachable)("Stroke bounding box must include transform.");const P=C.Util.singularValueDecompose2dScale(X),v=P[0]*this.lineWidth/2,aI=P[1]*this.lineWidth/2;T[0]-=v,T[1]-=aI,T[2]+=v,T[3]+=aI}return T}updateClipFromPath(){const o=C.Util.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(o||[0,0,0,0])}isEmptyClip(){return this.minX===1/0}startNewPathAndClipBox(o){this.clipBox=o,this.minX=1/0,this.minY=1/0,this.maxX=0,this.maxY=0}getClippedPathBoundingBox(o=G.PathType.FILL,X=null){return C.Util.intersect(this.clipBox,this.getPathBoundingBox(o,X))}}function R(sI,o){if(typeof ImageData<"u"&&o instanceof ImageData){sI.putImageData(o,0,0);return}const X=o.height,T=o.width,P=X%y,v=(X-P)/y,aI=P===0?v:v+1,U=sI.createImageData(T,y);let i=0,W;const Z=o.data,c=U.data;let s,Y,N,j;if(o.kind===C.ImageKind.GRAYSCALE_1BPP){const oI=Z.byteLength,f=new Uint32Array(c.buffer,0,c.byteLength>>2),NI=f.length,hI=T+7>>3,HI=4294967295,uI=C.FeatureTest.isLittleEndian?4278190080:255;for(s=0;s<aI;s++){for(N=s<v?y:P,W=0,Y=0;Y<N;Y++){const KI=oI-i;let zI=0;const xI=KI>hI?T:KI*8-7,vI=xI&-8;let _I=0,yI=0;for(;zI<vI;zI+=8)yI=Z[i++],f[W++]=yI&128?HI:uI,f[W++]=yI&64?HI:uI,f[W++]=yI&32?HI:uI,f[W++]=yI&16?HI:uI,f[W++]=yI&8?HI:uI,f[W++]=yI&4?HI:uI,f[W++]=yI&2?HI:uI,f[W++]=yI&1?HI:uI;for(;zI<xI;zI++)_I===0&&(yI=Z[i++],_I=128),f[W++]=yI&_I?HI:uI,_I>>=1}for(;W<NI;)f[W++]=0;sI.putImageData(U,0,s*y)}}else if(o.kind===C.ImageKind.RGBA_32BPP){for(Y=0,j=T*y*4,s=0;s<v;s++)c.set(Z.subarray(i,i+j)),i+=j,sI.putImageData(U,0,Y),Y+=y;s<aI&&(j=T*P*4,c.set(Z.subarray(i,i+j)),sI.putImageData(U,0,Y))}else if(o.kind===C.ImageKind.RGB_24BPP)for(N=y,j=T*N,s=0;s<aI;s++){for(s>=v&&(N=P,j=T*N),W=0,Y=j;Y--;)c[W++]=Z[i++],c[W++]=Z[i++],c[W++]=Z[i++],c[W++]=255;sI.putImageData(U,0,s*y)}else throw new Error(`bad image kind: ${o.kind}`)}function q(sI,o){if(o.bitmap){sI.drawImage(o.bitmap,0,0);return}const X=o.height,T=o.width,P=X%y,v=(X-P)/y,aI=P===0?v:v+1,U=sI.createImageData(T,y);let i=0;const W=o.data,Z=U.data;for(let c=0;c<aI;c++){const s=c<v?y:P;({srcPos:i}=(0,B.convertBlackAndWhiteToRGBA)({src:W,srcPos:i,dest:Z,width:T,height:s,nonBlackColor:0})),sI.putImageData(U,0,c*y)}}function II(sI,o){const X=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font","filter"];for(const T of X)sI[T]!==void 0&&(o[T]=sI[T]);sI.setLineDash!==void 0&&(o.setLineDash(sI.getLineDash()),o.lineDashOffset=sI.lineDashOffset)}function t(sI){sI.strokeStyle=sI.fillStyle="#000000",sI.fillRule="nonzero",sI.globalAlpha=1,sI.lineWidth=1,sI.lineCap="butt",sI.lineJoin="miter",sI.miterLimit=10,sI.globalCompositeOperation="source-over",sI.font="10px sans-serif",sI.setLineDash!==void 0&&(sI.setLineDash([]),sI.lineDashOffset=0),k.isNodeJS||(sI.filter="none")}function d(sI,o,X,T){const P=sI.length;for(let v=3;v<P;v+=4){const aI=sI[v];if(aI===0)sI[v-3]=o,sI[v-2]=X,sI[v-1]=T;else if(aI<255){const U=255-aI;sI[v-3]=sI[v-3]*aI+o*U>>8,sI[v-2]=sI[v-2]*aI+X*U>>8,sI[v-1]=sI[v-1]*aI+T*U>>8}}}function b(sI,o,X){const T=sI.length,P=1/255;for(let v=3;v<T;v+=4){const aI=X?X[sI[v]]:sI[v];o[v]=o[v]*aI*P|0}}function u(sI,o,X){const T=sI.length;for(let P=3;P<T;P+=4){const v=sI[P-3]*77+sI[P-2]*152+sI[P-1]*28;o[P]=X?o[P]*X[v>>8]>>8:o[P]*v>>16}}function m(sI,o,X,T,P,v,aI,U,i,W,Z){const c=!!v,s=c?v[0]:0,Y=c?v[1]:0,N=c?v[2]:0;let j;P==="Luminosity"?j=u:j=b;const f=Math.min(T,Math.ceil(1048576/X));for(let NI=0;NI<T;NI+=f){const hI=Math.min(f,T-NI),HI=sI.getImageData(U-W,NI+(i-Z),X,hI),uI=o.getImageData(U,NI+i,X,hI);c&&d(HI.data,s,Y,N),j(HI.data,uI.data,aI),o.putImageData(uI,U,NI+i)}}function J(sI,o,X,T){const P=T[0],v=T[1],aI=T[2]-P,U=T[3]-v;aI===0||U===0||(m(o.context,X,aI,U,o.subtype,o.backdrop,o.transferMap,P,v,o.offsetX,o.offsetY),sI.save(),sI.globalAlpha=1,sI.globalCompositeOperation="source-over",sI.setTransform(1,0,0,1,0,0),sI.drawImage(X.canvas,0,0),sI.restore())}function r(sI,o){const X=C.Util.singularValueDecompose2dScale(sI);X[0]=Math.fround(X[0]),X[1]=Math.fround(X[1]);const T=Math.fround((globalThis.devicePixelRatio||1)*l.PixelsPerInch.PDF_TO_CSS_UNITS);return o!==void 0?o:X[0]<=T||X[1]<=T}const XI=["butt","round","square"],SI=["miter","round","bevel"],kI={},FI={},fI=class{constructor(o,X,T,P,v,{optionalContentConfig:aI,markedContentStack:U=null},i,W){DI(this,LI);DI(this,TI);this.ctx=o,this.current=new D(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=X,this.objs=T,this.canvasFactory=P,this.filterFactory=v,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=U||[],this.optionalContentConfig=aI,this.cachedCanvases=new F(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=i,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,this.pageColors=W,this._cachedScaleForStroking=[-1,0],this._cachedGetSinglePixelWidth=null,this._cachedBitmapsMap=new Map}getObject(o,X=null){return typeof o=="string"?o.startsWith("g_")?this.commonObjs.get(o):this.objs.get(o):X}beginDrawing({transform:o,viewport:X,transparency:T=!1,background:P=null}){const v=this.ctx.canvas.width,aI=this.ctx.canvas.height,U=this.ctx.fillStyle;if(this.ctx.fillStyle=P||"#ffffff",this.ctx.fillRect(0,0,v,aI),this.ctx.fillStyle=U,T){const i=this.cachedCanvases.getCanvas("transparent",v,aI);this.compositeCtx=this.ctx,this.transparentCanvas=i.canvas,this.ctx=i.context,this.ctx.save(),this.ctx.transform(...(0,l.getCurrentTransform)(this.compositeCtx))}this.ctx.save(),t(this.ctx),o&&(this.ctx.transform(...o),this.outputScaleX=o[0],this.outputScaleY=o[0]),this.ctx.transform(...X.transform),this.viewportScale=X.scale,this.baseTransform=(0,l.getCurrentTransform)(this.ctx)}executeOperatorList(o,X,T,P){const v=o.argsArray,aI=o.fnArray;let U=X||0;const i=v.length;if(i===U)return U;const W=i-U>Q&&typeof T=="function",Z=W?Date.now()+L:0;let c=0;const s=this.commonObjs,Y=this.objs;let N;for(;;){if(P!==void 0&&U===P.nextBreakPoint)return P.breakIt(U,T),U;if(N=aI[U],N!==C.OPS.dependency)this[N].apply(this,v[U]);else for(const j of v[U]){const oI=j.startsWith("g_")?s:Y;if(!oI.has(j))return oI.get(j,T),U}if(U++,U===i)return U;if(W&&++c>Q){if(Date.now()>Z)return T(),U;c=0}}}endDrawing(){tI(this,LI,_g).call(this),this.cachedCanvases.clear(),this.cachedPatterns.clear();for(const o of this._cachedBitmapsMap.values()){for(const X of o.values())typeof HTMLCanvasElement<"u"&&X instanceof HTMLCanvasElement&&(X.width=X.height=0);o.clear()}this._cachedBitmapsMap.clear(),tI(this,TI,$g).call(this)}_scaleImage(o,X){const T=o.width,P=o.height;let v=Math.max(Math.hypot(X[0],X[1]),1),aI=Math.max(Math.hypot(X[2],X[3]),1),U=T,i=P,W="prescale1",Z,c;for(;v>2&&U>1||aI>2&&i>1;){let s=U,Y=i;v>2&&U>1&&(s=U>=16384?Math.floor(U/2)-1||1:Math.ceil(U/2),v/=U/s),aI>2&&i>1&&(Y=i>=16384?Math.floor(i/2)-1||1:Math.ceil(i)/2,aI/=i/Y),Z=this.cachedCanvases.getCanvas(W,s,Y),c=Z.context,c.clearRect(0,0,s,Y),c.drawImage(o,0,0,U,i,0,0,s,Y),o=Z.canvas,U=s,i=Y,W=W==="prescale1"?"prescale2":"prescale1"}return{img:o,paintWidth:U,paintHeight:i}}_createMaskCanvas(o){const X=this.ctx,{width:T,height:P}=o,v=this.current.fillColor,aI=this.current.patternFill,U=(0,l.getCurrentTransform)(X);let i,W,Z,c;if((o.bitmap||o.data)&&o.count>1){const zI=o.bitmap||o.data.buffer;W=JSON.stringify(aI?U:[U.slice(0,4),v]),i=this._cachedBitmapsMap.get(zI),i||(i=new Map,this._cachedBitmapsMap.set(zI,i));const xI=i.get(W);if(xI&&!aI){const vI=Math.round(Math.min(U[0],U[2])+U[4]),_I=Math.round(Math.min(U[1],U[3])+U[5]);return{canvas:xI,offsetX:vI,offsetY:_I}}Z=xI}Z||(c=this.cachedCanvases.getCanvas("maskCanvas",T,P),q(c.context,o));let s=C.Util.transform(U,[1/T,0,0,-1/P,0,0]);s=C.Util.transform(s,[1,0,0,1,0,-P]);const Y=C.Util.applyTransform([0,0],s),N=C.Util.applyTransform([T,P],s),j=C.Util.normalizeRect([Y[0],Y[1],N[0],N[1]]),oI=Math.round(j[2]-j[0])||1,f=Math.round(j[3]-j[1])||1,NI=this.cachedCanvases.getCanvas("fillCanvas",oI,f),hI=NI.context,HI=Math.min(Y[0],N[0]),uI=Math.min(Y[1],N[1]);hI.translate(-HI,-uI),hI.transform(...s),Z||(Z=this._scaleImage(c.canvas,(0,l.getCurrentTransformInverse)(hI)),Z=Z.img,i&&aI&&i.set(W,Z)),hI.imageSmoothingEnabled=r((0,l.getCurrentTransform)(hI),o.interpolate),z(hI,Z,0,0,Z.width,Z.height,0,0,T,P),hI.globalCompositeOperation="source-in";const KI=C.Util.transform((0,l.getCurrentTransformInverse)(hI),[1,0,0,1,-HI,-uI]);return hI.fillStyle=aI?v.getPattern(X,this,KI,G.PathType.FILL):v,hI.fillRect(0,0,T,P),i&&!aI&&(this.cachedCanvases.delete("fillCanvas"),i.set(W,NI.canvas)),{canvas:NI.canvas,offsetX:Math.round(HI),offsetY:Math.round(uI)}}setLineWidth(o){o!==this.current.lineWidth&&(this._cachedScaleForStroking[0]=-1),this.current.lineWidth=o,this.ctx.lineWidth=o}setLineCap(o){this.ctx.lineCap=XI[o]}setLineJoin(o){this.ctx.lineJoin=SI[o]}setMiterLimit(o){this.ctx.miterLimit=o}setDash(o,X){const T=this.ctx;T.setLineDash!==void 0&&(T.setLineDash(o),T.lineDashOffset=X)}setRenderingIntent(o){}setFlatness(o){}setGState(o){for(const[X,T]of o)switch(X){case"LW":this.setLineWidth(T);break;case"LC":this.setLineCap(T);break;case"LJ":this.setLineJoin(T);break;case"ML":this.setMiterLimit(T);break;case"D":this.setDash(T[0],T[1]);break;case"RI":this.setRenderingIntent(T);break;case"FL":this.setFlatness(T);break;case"Font":this.setFont(T[0],T[1]);break;case"CA":this.current.strokeAlpha=T;break;case"ca":this.current.fillAlpha=T,this.ctx.globalAlpha=T;break;case"BM":this.ctx.globalCompositeOperation=T;break;case"SMask":this.current.activeSMask=T?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.ctx.filter=this.current.transferMaps=this.filterFactory.addFilter(T);break}}get inSMaskMode(){return!!this.suspendedCtx}checkSMaskState(){const o=this.inSMaskMode;this.current.activeSMask&&!o?this.beginSMaskMode():!this.current.activeSMask&&o&&this.endSMaskMode()}beginSMaskMode(){if(this.inSMaskMode)throw new Error("beginSMaskMode called while already in smask mode");const o=this.ctx.canvas.width,X=this.ctx.canvas.height,T="smaskGroupAt"+this.groupLevel,P=this.cachedCanvases.getCanvas(T,o,X);this.suspendedCtx=this.ctx,this.ctx=P.context;const v=this.ctx;v.setTransform(...(0,l.getCurrentTransform)(this.suspendedCtx)),II(this.suspendedCtx,v),M(v,this.suspendedCtx),this.setGState([["BM","source-over"],["ca",1],["CA",1]])}endSMaskMode(){if(!this.inSMaskMode)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),II(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.suspendedCtx=null}compose(o){if(!this.current.activeSMask)return;o?(o[0]=Math.floor(o[0]),o[1]=Math.floor(o[1]),o[2]=Math.ceil(o[2]),o[3]=Math.ceil(o[3])):o=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];const X=this.current.activeSMask,T=this.suspendedCtx;J(T,X,this.ctx,o),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}save(){this.inSMaskMode?(II(this.ctx,this.suspendedCtx),this.suspendedCtx.save()):this.ctx.save();const o=this.current;this.stateStack.push(o),this.current=o.clone()}restore(){this.stateStack.length===0&&this.inSMaskMode&&this.endSMaskMode(),this.stateStack.length!==0&&(this.current=this.stateStack.pop(),this.inSMaskMode?(this.suspendedCtx.restore(),II(this.suspendedCtx,this.ctx)):this.ctx.restore(),this.checkSMaskState(),this.pendingClip=null,this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null)}transform(o,X,T,P,v,aI){this.ctx.transform(o,X,T,P,v,aI),this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null}constructPath(o,X,T){const P=this.ctx,v=this.current;let aI=v.x,U=v.y,i,W;const Z=(0,l.getCurrentTransform)(P),c=Z[0]===0&&Z[3]===0||Z[1]===0&&Z[2]===0,s=c?T.slice(0):null;for(let Y=0,N=0,j=o.length;Y<j;Y++)switch(o[Y]|0){case C.OPS.rectangle:aI=X[N++],U=X[N++];const oI=X[N++],f=X[N++],NI=aI+oI,hI=U+f;P.moveTo(aI,U),oI===0||f===0?P.lineTo(NI,hI):(P.lineTo(NI,U),P.lineTo(NI,hI),P.lineTo(aI,hI)),c||v.updateRectMinMax(Z,[aI,U,NI,hI]),P.closePath();break;case C.OPS.moveTo:aI=X[N++],U=X[N++],P.moveTo(aI,U),c||v.updatePathMinMax(Z,aI,U);break;case C.OPS.lineTo:aI=X[N++],U=X[N++],P.lineTo(aI,U),c||v.updatePathMinMax(Z,aI,U);break;case C.OPS.curveTo:i=aI,W=U,aI=X[N+4],U=X[N+5],P.bezierCurveTo(X[N],X[N+1],X[N+2],X[N+3],aI,U),v.updateCurvePathMinMax(Z,i,W,X[N],X[N+1],X[N+2],X[N+3],aI,U,s),N+=6;break;case C.OPS.curveTo2:i=aI,W=U,P.bezierCurveTo(aI,U,X[N],X[N+1],X[N+2],X[N+3]),v.updateCurvePathMinMax(Z,i,W,aI,U,X[N],X[N+1],X[N+2],X[N+3],s),aI=X[N+2],U=X[N+3],N+=4;break;case C.OPS.curveTo3:i=aI,W=U,aI=X[N+2],U=X[N+3],P.bezierCurveTo(X[N],X[N+1],aI,U,aI,U),v.updateCurvePathMinMax(Z,i,W,X[N],X[N+1],aI,U,aI,U,s),N+=4;break;case C.OPS.closePath:P.closePath();break}c&&v.updateScalingPathMinMax(Z,s),v.setCurrentPoint(aI,U)}closePath(){this.ctx.closePath()}stroke(o=!0){const X=this.ctx,T=this.current.strokeColor;X.globalAlpha=this.current.strokeAlpha,this.contentVisible&&(typeof T=="object"&&(T!=null&&T.getPattern)?(X.save(),X.strokeStyle=T.getPattern(X,this,(0,l.getCurrentTransformInverse)(X),G.PathType.STROKE),this.rescaleAndStroke(!1),X.restore()):this.rescaleAndStroke(!0)),o&&this.consumePath(this.current.getClippedPathBoundingBox()),X.globalAlpha=this.current.fillAlpha}closeStroke(){this.closePath(),this.stroke()}fill(o=!0){const X=this.ctx,T=this.current.fillColor,P=this.current.patternFill;let v=!1;P&&(X.save(),X.fillStyle=T.getPattern(X,this,(0,l.getCurrentTransformInverse)(X),G.PathType.FILL),v=!0);const aI=this.current.getClippedPathBoundingBox();this.contentVisible&&aI!==null&&(this.pendingEOFill?(X.fill("evenodd"),this.pendingEOFill=!1):X.fill()),v&&X.restore(),o&&this.consumePath(aI)}eoFill(){this.pendingEOFill=!0,this.fill()}fillStroke(){this.fill(!1),this.stroke(!1),this.consumePath()}eoFillStroke(){this.pendingEOFill=!0,this.fillStroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()}endPath(){this.consumePath()}clip(){this.pendingClip=kI}eoClip(){this.pendingClip=FI}beginText(){this.current.textMatrix=C.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}endText(){const o=this.pendingTextPaths,X=this.ctx;if(o===void 0){X.beginPath();return}X.save(),X.beginPath();for(const T of o)X.setTransform(...T.transform),X.translate(T.x,T.y),T.addToPath(X,T.fontSize);X.restore(),X.clip(),X.beginPath(),delete this.pendingTextPaths}setCharSpacing(o){this.current.charSpacing=o}setWordSpacing(o){this.current.wordSpacing=o}setHScale(o){this.current.textHScale=o/100}setLeading(o){this.current.leading=-o}setFont(o,X){var Z;const T=this.commonObjs.get(o),P=this.current;if(!T)throw new Error(`Can't find font for ${o}`);if(P.fontMatrix=T.fontMatrix||C.FONT_IDENTITY_MATRIX,(P.fontMatrix[0]===0||P.fontMatrix[3]===0)&&(0,C.warn)("Invalid font matrix for font "+o),X<0?(X=-X,P.fontDirection=-1):P.fontDirection=1,this.current.font=T,this.current.fontSize=X,T.isType3Font)return;const v=T.loadedName||"sans-serif",aI=((Z=T.systemFontInfo)==null?void 0:Z.css)||`"${v}", ${T.fallbackName}`;let U="normal";T.black?U="900":T.bold&&(U="bold");const i=T.italic?"italic":"normal";let W=X;X<n?W=n:X>a&&(W=a),this.current.fontSizeScale=X/W,this.ctx.font=`${i} ${U} ${W}px ${aI}`}setTextRenderingMode(o){this.current.textRenderingMode=o}setTextRise(o){this.current.textRise=o}moveText(o,X){this.current.x=this.current.lineX+=o,this.current.y=this.current.lineY+=X}setLeadingMoveText(o,X){this.setLeading(-X),this.moveText(o,X)}setTextMatrix(o,X,T,P,v,aI){this.current.textMatrix=[o,X,T,P,v,aI],this.current.textMatrixScale=Math.hypot(o,X),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}nextLine(){this.moveText(0,this.current.leading)}paintChar(o,X,T,P){const v=this.ctx,aI=this.current,U=aI.font,i=aI.textRenderingMode,W=aI.fontSize/aI.fontSizeScale,Z=i&C.TextRenderingMode.FILL_STROKE_MASK,c=!!(i&C.TextRenderingMode.ADD_TO_PATH_FLAG),s=aI.patternFill&&!U.missingFile;let Y;(U.disableFontFace||c||s)&&(Y=U.getPathGenerator(this.commonObjs,o)),U.disableFontFace||s?(v.save(),v.translate(X,T),v.beginPath(),Y(v,W),P&&v.setTransform(...P),(Z===C.TextRenderingMode.FILL||Z===C.TextRenderingMode.FILL_STROKE)&&v.fill(),(Z===C.TextRenderingMode.STROKE||Z===C.TextRenderingMode.FILL_STROKE)&&v.stroke(),v.restore()):((Z===C.TextRenderingMode.FILL||Z===C.TextRenderingMode.FILL_STROKE)&&v.fillText(o,X,T),(Z===C.TextRenderingMode.STROKE||Z===C.TextRenderingMode.FILL_STROKE)&&v.strokeText(o,X,T)),c&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:(0,l.getCurrentTransform)(v),x:X,y:T,fontSize:W,addToPath:Y})}get isFontSubpixelAAEnabled(){const{context:o}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);o.scale(1.5,1),o.fillText("I",0,10);const X=o.getImageData(0,0,10,10).data;let T=!1;for(let P=3;P<X.length;P+=4)if(X[P]>0&&X[P]<255){T=!0;break}return(0,C.shadow)(this,"isFontSubpixelAAEnabled",T)}showText(o){const X=this.current,T=X.font;if(T.isType3Font)return this.showType3Text(o);const P=X.fontSize;if(P===0)return;const v=this.ctx,aI=X.fontSizeScale,U=X.charSpacing,i=X.wordSpacing,W=X.fontDirection,Z=X.textHScale*W,c=o.length,s=T.vertical,Y=s?1:-1,N=T.defaultVMetrics,j=P*X.fontMatrix[0],oI=X.textRenderingMode===C.TextRenderingMode.FILL&&!T.disableFontFace&&!X.patternFill;v.save(),v.transform(...X.textMatrix),v.translate(X.x,X.y+X.textRise),W>0?v.scale(Z,-1):v.scale(Z,1);let f;if(X.patternFill){v.save();const KI=X.fillColor.getPattern(v,this,(0,l.getCurrentTransformInverse)(v),G.PathType.FILL);f=(0,l.getCurrentTransform)(v),v.restore(),v.fillStyle=KI}let NI=X.lineWidth;const hI=X.textMatrixScale;if(hI===0||NI===0){const KI=X.textRenderingMode&C.TextRenderingMode.FILL_STROKE_MASK;(KI===C.TextRenderingMode.STROKE||KI===C.TextRenderingMode.FILL_STROKE)&&(NI=this.getSinglePixelWidth())}else NI/=hI;if(aI!==1&&(v.scale(aI,aI),NI/=aI),v.lineWidth=NI,T.isInvalidPDFjsFont){const KI=[];let zI=0;for(const xI of o)KI.push(xI.unicode),zI+=xI.width;v.fillText(KI.join(""),0,0),X.x+=zI*j*Z,v.restore(),this.compose();return}let HI=0,uI;for(uI=0;uI<c;++uI){const KI=o[uI];if(typeof KI=="number"){HI+=Y*KI*P/1e3;continue}let zI=!1;const xI=(KI.isSpace?i:0)+U,vI=KI.fontChar,_I=KI.accent;let yI,rI,Ig=KI.width;if(s){const pI=KI.vmetric||N,nI=-(KI.vmetric?pI[1]:Ig*.5)*j,MI=pI[2]*j;Ig=pI?-pI[0]:Ig,yI=nI/aI,rI=(HI+MI)/aI}else yI=HI/aI,rI=0;if(T.remeasure&&Ig>0){const pI=v.measureText(vI).width*1e3/P*aI;if(Ig<pI&&this.isFontSubpixelAAEnabled){const nI=Ig/pI;zI=!0,v.save(),v.scale(nI,1),yI/=nI}else Ig!==pI&&(yI+=(Ig-pI)/2e3*P/aI)}if(this.contentVisible&&(KI.isInFont||T.missingFile)){if(oI&&!_I)v.fillText(vI,yI,rI);else if(this.paintChar(vI,yI,rI,f),_I){const pI=yI+P*_I.offset.x/aI,nI=rI-P*_I.offset.y/aI;this.paintChar(_I.fontChar,pI,nI,f)}}let Ag;s?Ag=Ig*j-xI*W:Ag=Ig*j+xI*W,HI+=Ag,zI&&v.restore()}s?X.y-=HI:X.x+=HI*Z,v.restore(),this.compose()}showType3Text(o){const X=this.ctx,T=this.current,P=T.font,v=T.fontSize,aI=T.fontDirection,U=P.vertical?1:-1,i=T.charSpacing,W=T.wordSpacing,Z=T.textHScale*aI,c=T.fontMatrix||C.FONT_IDENTITY_MATRIX,s=o.length,Y=T.textRenderingMode===C.TextRenderingMode.INVISIBLE;let N,j,oI,f;if(!(Y||v===0)){for(this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null,X.save(),X.transform(...T.textMatrix),X.translate(T.x,T.y),X.scale(Z,aI),N=0;N<s;++N){if(j=o[N],typeof j=="number"){f=U*j*v/1e3,this.ctx.translate(f,0),T.x+=f*Z;continue}const NI=(j.isSpace?W:0)+i,hI=P.charProcOperatorList[j.operatorListId];if(!hI){(0,C.warn)(`Type3 character "${j.operatorListId}" is not available.`);continue}this.contentVisible&&(this.processingType3=j,this.save(),X.scale(v,v),X.transform(...c),this.executeOperatorList(hI),this.restore()),oI=C.Util.applyTransform([j.width,0],c)[0]*v+NI,X.translate(oI,0),T.x+=oI*Z}X.restore(),this.processingType3=null}}setCharWidth(o,X){}setCharWidthAndBounds(o,X,T,P,v,aI){this.ctx.rect(T,P,v-T,aI-P),this.ctx.clip(),this.endPath()}getColorN_Pattern(o){let X;if(o[0]==="TilingPattern"){const T=o[1],P=this.baseTransform||(0,l.getCurrentTransform)(this.ctx),v={createCanvasGraphics:aI=>new fI(aI,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:this.optionalContentConfig,markedContentStack:this.markedContentStack})};X=new G.TilingPattern(o,T,this.ctx,v,P)}else X=this._getPattern(o[1],o[2]);return X}setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments)}setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}setStrokeRGBColor(o,X,T){const P=C.Util.makeHexColor(o,X,T);this.ctx.strokeStyle=P,this.current.strokeColor=P}setFillRGBColor(o,X,T){const P=C.Util.makeHexColor(o,X,T);this.ctx.fillStyle=P,this.current.fillColor=P,this.current.patternFill=!1}_getPattern(o,X=null){let T;return this.cachedPatterns.has(o)?T=this.cachedPatterns.get(o):(T=(0,G.getShadingPattern)(this.getObject(o)),this.cachedPatterns.set(o,T)),X&&(T.matrix=X),T}shadingFill(o){if(!this.contentVisible)return;const X=this.ctx;this.save();const T=this._getPattern(o);X.fillStyle=T.getPattern(X,this,(0,l.getCurrentTransformInverse)(X),G.PathType.SHADING);const P=(0,l.getCurrentTransformInverse)(X);if(P){const v=X.canvas,aI=v.width,U=v.height,i=C.Util.applyTransform([0,0],P),W=C.Util.applyTransform([0,U],P),Z=C.Util.applyTransform([aI,0],P),c=C.Util.applyTransform([aI,U],P),s=Math.min(i[0],W[0],Z[0],c[0]),Y=Math.min(i[1],W[1],Z[1],c[1]),N=Math.max(i[0],W[0],Z[0],c[0]),j=Math.max(i[1],W[1],Z[1],c[1]);this.ctx.fillRect(s,Y,N-s,j-Y)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}beginInlineImage(){(0,C.unreachable)("Should not call beginInlineImage")}beginImageData(){(0,C.unreachable)("Should not call beginImageData")}paintFormXObjectBegin(o,X){if(this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(o)&&o.length===6&&this.transform(...o),this.baseTransform=(0,l.getCurrentTransform)(this.ctx),X)){const T=X[2]-X[0],P=X[3]-X[1];this.ctx.rect(X[0],X[1],T,P),this.current.updateRectMinMax((0,l.getCurrentTransform)(this.ctx),X),this.clip(),this.endPath()}}paintFormXObjectEnd(){this.contentVisible&&(this.restore(),this.baseTransform=this.baseTransformStack.pop())}beginGroup(o){if(!this.contentVisible)return;this.save(),this.inSMaskMode&&(this.endSMaskMode(),this.current.activeSMask=null);const X=this.ctx;o.isolated||(0,C.info)("TODO: Support non-isolated groups."),o.knockout&&(0,C.warn)("Knockout groups not supported.");const T=(0,l.getCurrentTransform)(X);if(o.matrix&&X.transform(...o.matrix),!o.bbox)throw new Error("Bounding box is required.");let P=C.Util.getAxialAlignedBoundingBox(o.bbox,(0,l.getCurrentTransform)(X));const v=[0,0,X.canvas.width,X.canvas.height];P=C.Util.intersect(P,v)||[0,0,0,0];const aI=Math.floor(P[0]),U=Math.floor(P[1]);let i=Math.max(Math.ceil(P[2])-aI,1),W=Math.max(Math.ceil(P[3])-U,1),Z=1,c=1;i>w&&(Z=i/w,i=w),W>w&&(c=W/w,W=w),this.current.startNewPathAndClipBox([0,0,i,W]);let s="groupAt"+this.groupLevel;o.smask&&(s+="_smask_"+this.smaskCounter++%2);const Y=this.cachedCanvases.getCanvas(s,i,W),N=Y.context;N.scale(1/Z,1/c),N.translate(-aI,-U),N.transform(...T),o.smask?this.smaskStack.push({canvas:Y.canvas,context:N,offsetX:aI,offsetY:U,scaleX:Z,scaleY:c,subtype:o.smask.subtype,backdrop:o.smask.backdrop,transferMap:o.smask.transferMap||null,startTransformInverse:null}):(X.setTransform(1,0,0,1,0,0),X.translate(aI,U),X.scale(Z,c),X.save()),II(X,N),this.ctx=N,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(X),this.groupLevel++}endGroup(o){if(!this.contentVisible)return;this.groupLevel--;const X=this.ctx,T=this.groupStack.pop();if(this.ctx=T,this.ctx.imageSmoothingEnabled=!1,o.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();const P=(0,l.getCurrentTransform)(this.ctx);this.restore(),this.ctx.save(),this.ctx.setTransform(...P);const v=C.Util.getAxialAlignedBoundingBox([0,0,X.canvas.width,X.canvas.height],P);this.ctx.drawImage(X.canvas,0,0),this.ctx.restore(),this.compose(v)}}beginAnnotation(o,X,T,P,v){if(tI(this,LI,_g).call(this),t(this.ctx),this.ctx.save(),this.save(),this.baseTransform&&this.ctx.setTransform(...this.baseTransform),Array.isArray(X)&&X.length===4){const aI=X[2]-X[0],U=X[3]-X[1];if(v&&this.annotationCanvasMap){T=T.slice(),T[4]-=X[0],T[5]-=X[1],X=X.slice(),X[0]=X[1]=0,X[2]=aI,X[3]=U;const[i,W]=C.Util.singularValueDecompose2dScale((0,l.getCurrentTransform)(this.ctx)),{viewportScale:Z}=this,c=Math.ceil(aI*this.outputScaleX*Z),s=Math.ceil(U*this.outputScaleY*Z);this.annotationCanvas=this.canvasFactory.create(c,s);const{canvas:Y,context:N}=this.annotationCanvas;this.annotationCanvasMap.set(o,Y),this.annotationCanvas.savedCtx=this.ctx,this.ctx=N,this.ctx.save(),this.ctx.setTransform(i,0,0,-W,0,U*W),t(this.ctx)}else t(this.ctx),this.ctx.rect(X[0],X[1],aI,U),this.ctx.clip(),this.endPath()}this.current=new D(this.ctx.canvas.width,this.ctx.canvas.height),this.transform(...T),this.transform(...P)}endAnnotation(){this.annotationCanvas&&(this.ctx.restore(),tI(this,TI,$g).call(this),this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas)}paintImageMaskXObject(o){if(!this.contentVisible)return;const X=o.count;o=this.getObject(o.data,o),o.count=X;const T=this.ctx,P=this.processingType3;if(P&&(P.compiled===void 0&&(P.compiled=O(o)),P.compiled)){P.compiled(T);return}const v=this._createMaskCanvas(o),aI=v.canvas;T.save(),T.setTransform(1,0,0,1,0,0),T.drawImage(aI,v.offsetX,v.offsetY),T.restore(),this.compose()}paintImageMaskXObjectRepeat(o,X,T=0,P=0,v,aI){if(!this.contentVisible)return;o=this.getObject(o.data,o);const U=this.ctx;U.save();const i=(0,l.getCurrentTransform)(U);U.transform(X,T,P,v,0,0);const W=this._createMaskCanvas(o);U.setTransform(1,0,0,1,W.offsetX-i[4],W.offsetY-i[5]);for(let Z=0,c=aI.length;Z<c;Z+=2){const s=C.Util.transform(i,[X,T,P,v,aI[Z],aI[Z+1]]),[Y,N]=C.Util.applyTransform([0,0],s);U.drawImage(W.canvas,Y,N)}U.restore(),this.compose()}paintImageMaskXObjectGroup(o){if(!this.contentVisible)return;const X=this.ctx,T=this.current.fillColor,P=this.current.patternFill;for(const v of o){const{data:aI,width:U,height:i,transform:W}=v,Z=this.cachedCanvases.getCanvas("maskCanvas",U,i),c=Z.context;c.save();const s=this.getObject(aI,v);q(c,s),c.globalCompositeOperation="source-in",c.fillStyle=P?T.getPattern(c,this,(0,l.getCurrentTransformInverse)(X),G.PathType.FILL):T,c.fillRect(0,0,U,i),c.restore(),X.save(),X.transform(...W),X.scale(1,-1),z(X,Z.canvas,0,0,U,i,0,-1,1,1),X.restore()}this.compose()}paintImageXObject(o){if(!this.contentVisible)return;const X=this.getObject(o);if(!X){(0,C.warn)("Dependent image isn't ready yet");return}this.paintInlineImageXObject(X)}paintImageXObjectRepeat(o,X,T,P){if(!this.contentVisible)return;const v=this.getObject(o);if(!v){(0,C.warn)("Dependent image isn't ready yet");return}const aI=v.width,U=v.height,i=[];for(let W=0,Z=P.length;W<Z;W+=2)i.push({transform:[X,0,0,T,P[W],P[W+1]],x:0,y:0,w:aI,h:U});this.paintInlineImageXObjectGroup(v,i)}applyTransferMapsToCanvas(o){return this.current.transferMaps!=="none"&&(o.filter=this.current.transferMaps,o.drawImage(o.canvas,0,0),o.filter="none"),o.canvas}applyTransferMapsToBitmap(o){if(this.current.transferMaps==="none")return o.bitmap;const{bitmap:X,width:T,height:P}=o,v=this.cachedCanvases.getCanvas("inlineImage",T,P),aI=v.context;return aI.filter=this.current.transferMaps,aI.drawImage(X,0,0),aI.filter="none",v.canvas}paintInlineImageXObject(o){if(!this.contentVisible)return;const X=o.width,T=o.height,P=this.ctx;this.save(),k.isNodeJS||(P.filter="none"),P.scale(1/X,-1/T);let v;if(o.bitmap)v=this.applyTransferMapsToBitmap(o);else if(typeof HTMLElement=="function"&&o instanceof HTMLElement||!o.data)v=o;else{const i=this.cachedCanvases.getCanvas("inlineImage",X,T).context;R(i,o),v=this.applyTransferMapsToCanvas(i)}const aI=this._scaleImage(v,(0,l.getCurrentTransformInverse)(P));P.imageSmoothingEnabled=r((0,l.getCurrentTransform)(P),o.interpolate),z(P,aI.img,0,0,aI.paintWidth,aI.paintHeight,0,-T,X,T),this.compose(),this.restore()}paintInlineImageXObjectGroup(o,X){if(!this.contentVisible)return;const T=this.ctx;let P;if(o.bitmap)P=o.bitmap;else{const v=o.width,aI=o.height,i=this.cachedCanvases.getCanvas("inlineImage",v,aI).context;R(i,o),P=this.applyTransferMapsToCanvas(i)}for(const v of X)T.save(),T.transform(...v.transform),T.scale(1,-1),z(T,P,v.x,v.y,v.w,v.h,0,-1,1,1),T.restore();this.compose()}paintSolidColorImageMask(){this.contentVisible&&(this.ctx.fillRect(0,0,1,1),this.compose())}markPoint(o){}markPointProps(o,X){}beginMarkedContent(o){this.markedContentStack.push({visible:!0})}beginMarkedContentProps(o,X){o==="OC"?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(X)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}endMarkedContent(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}beginCompat(){}endCompat(){}consumePath(o){const X=this.current.isEmptyClip();this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(o);const T=this.ctx;this.pendingClip&&(X||(this.pendingClip===FI?T.clip("evenodd"):T.clip()),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox),T.beginPath()}getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){const o=(0,l.getCurrentTransform)(this.ctx);if(o[1]===0&&o[2]===0)this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(o[0]),Math.abs(o[3]));else{const X=Math.abs(o[0]*o[3]-o[2]*o[1]),T=Math.hypot(o[0],o[2]),P=Math.hypot(o[1],o[3]);this._cachedGetSinglePixelWidth=Math.max(T,P)/X}}return this._cachedGetSinglePixelWidth}getScaleForStroking(){if(this._cachedScaleForStroking[0]===-1){const{lineWidth:o}=this.current,{a:X,b:T,c:P,d:v}=this.ctx.getTransform();let aI,U;if(T===0&&P===0){const i=Math.abs(X),W=Math.abs(v);if(i===W)if(o===0)aI=U=1/i;else{const Z=i*o;aI=U=Z<1?1/Z:1}else if(o===0)aI=1/i,U=1/W;else{const Z=i*o,c=W*o;aI=Z<1?1/Z:1,U=c<1?1/c:1}}else{const i=Math.abs(X*v-T*P),W=Math.hypot(X,T),Z=Math.hypot(P,v);if(o===0)aI=Z/i,U=W/i;else{const c=o*i;aI=Z>c?Z/c:1,U=W>c?W/c:1}}this._cachedScaleForStroking[0]=aI,this._cachedScaleForStroking[1]=U}return this._cachedScaleForStroking}rescaleAndStroke(o){const{ctx:X}=this,{lineWidth:T}=this.current,[P,v]=this.getScaleForStroking();if(X.lineWidth=T||1,P===1&&v===1){X.stroke();return}const aI=X.getLineDash();if(o&&X.save(),X.scale(P,v),aI.length>0){const U=Math.max(P,v);X.setLineDash(aI.map(i=>i/U)),X.lineDashOffset/=U}X.stroke(),o&&X.restore()}isContentVisible(){for(let o=this.markedContentStack.length-1;o>=0;o--)if(!this.markedContentStack[o].visible)return!1;return!0}};let JI=fI;LI=new WeakSet,_g=function(){for(;this.stateStack.length||this.inSMaskMode;)this.restore();this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null)},TI=new WeakSet,$g=function(){if(this.pageColors){const o=this.filterFactory.addHCMFilter(this.pageColors.foreground,this.pageColors.background);if(o!=="none"){const X=this.ctx.filter;this.ctx.filter=o,this.ctx.drawImage(this.ctx.canvas,0,0),this.ctx.filter=X}}},g.CanvasGraphics=JI;for(const sI in C.OPS)JI.prototype[sI]!==void 0&&(JI.prototype[C.OPS[sI]]=JI.prototype[sI])},(I,g,A)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.TilingPattern=g.PathType=void 0,g.getShadingPattern=S;var C=A(1),l=A(6);const G={FILL:"Fill",STROKE:"Stroke",SHADING:"Shading"};g.PathType=G;function B(z,O){if(!O)return;const D=O[2]-O[0],R=O[3]-O[1],q=new Path2D;q.rect(O[0],O[1],D,R),z.clip(q)}class k{constructor(){this.constructor===k&&(0,C.unreachable)("Cannot initialize BaseShadingPattern.")}getPattern(){(0,C.unreachable)("Abstract method `getPattern` called.")}}class n extends k{constructor(O){super(),this._type=O[1],this._bbox=O[2],this._colorStops=O[3],this._p0=O[4],this._p1=O[5],this._r0=O[6],this._r1=O[7],this.matrix=null}_createGradient(O){let D;this._type==="axial"?D=O.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):this._type==="radial"&&(D=O.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));for(const R of this._colorStops)D.addColorStop(R[0],R[1]);return D}getPattern(O,D,R,q){let II;if(q===G.STROKE||q===G.FILL){const t=D.current.getClippedPathBoundingBox(q,(0,l.getCurrentTransform)(O))||[0,0,0,0],d=Math.ceil(t[2]-t[0])||1,b=Math.ceil(t[3]-t[1])||1,u=D.cachedCanvases.getCanvas("pattern",d,b,!0),m=u.context;m.clearRect(0,0,m.canvas.width,m.canvas.height),m.beginPath(),m.rect(0,0,m.canvas.width,m.canvas.height),m.translate(-t[0],-t[1]),R=C.Util.transform(R,[1,0,0,1,t[0],t[1]]),m.transform(...D.baseTransform),this.matrix&&m.transform(...this.matrix),B(m,this._bbox),m.fillStyle=this._createGradient(m),m.fill(),II=O.createPattern(u.canvas,"no-repeat");const J=new DOMMatrix(R);II.setTransform(J)}else B(O,this._bbox),II=this._createGradient(O);return II}}function a(z,O,D,R,q,II,t,d){const b=O.coords,u=O.colors,m=z.data,J=z.width*4;let r;b[D+1]>b[R+1]&&(r=D,D=R,R=r,r=II,II=t,t=r),b[R+1]>b[q+1]&&(r=R,R=q,q=r,r=t,t=d,d=r),b[D+1]>b[R+1]&&(r=D,D=R,R=r,r=II,II=t,t=r);const XI=(b[D]+O.offsetX)*O.scaleX,SI=(b[D+1]+O.offsetY)*O.scaleY,kI=(b[R]+O.offsetX)*O.scaleX,FI=(b[R+1]+O.offsetY)*O.scaleY,JI=(b[q]+O.offsetX)*O.scaleX,LI=(b[q+1]+O.offsetY)*O.scaleY;if(SI>=LI)return;const UI=u[II],TI=u[II+1],QI=u[II+2],fI=u[t],sI=u[t+1],o=u[t+2],X=u[d],T=u[d+1],P=u[d+2],v=Math.round(SI),aI=Math.round(LI);let U,i,W,Z,c,s,Y,N;for(let j=v;j<=aI;j++){if(j<FI){let HI;j<SI?HI=0:HI=(SI-j)/(SI-FI),U=XI-(XI-kI)*HI,i=UI-(UI-fI)*HI,W=TI-(TI-sI)*HI,Z=QI-(QI-o)*HI}else{let HI;j>LI?HI=1:FI===LI?HI=0:HI=(FI-j)/(FI-LI),U=kI-(kI-JI)*HI,i=fI-(fI-X)*HI,W=sI-(sI-T)*HI,Z=o-(o-P)*HI}let oI;j<SI?oI=0:j>LI?oI=1:oI=(SI-j)/(SI-LI),c=XI-(XI-JI)*oI,s=UI-(UI-X)*oI,Y=TI-(TI-T)*oI,N=QI-(QI-P)*oI;const f=Math.round(Math.min(U,c)),NI=Math.round(Math.max(U,c));let hI=J*j+f*4;for(let HI=f;HI<=NI;HI++)oI=(U-HI)/(U-c),oI<0?oI=0:oI>1&&(oI=1),m[hI++]=i-(i-s)*oI|0,m[hI++]=W-(W-Y)*oI|0,m[hI++]=Z-(Z-N)*oI|0,m[hI++]=255}}function w(z,O,D){const R=O.coords,q=O.colors;let II,t;switch(O.type){case"lattice":const d=O.verticesPerRow,b=Math.floor(R.length/d)-1,u=d-1;for(II=0;II<b;II++){let m=II*d;for(let J=0;J<u;J++,m++)a(z,D,R[m],R[m+1],R[m+d],q[m],q[m+1],q[m+d]),a(z,D,R[m+d+1],R[m+1],R[m+d],q[m+d+1],q[m+1],q[m+d])}break;case"triangles":for(II=0,t=R.length;II<t;II+=3)a(z,D,R[II],R[II+1],R[II+2],q[II],q[II+1],q[II+2]);break;default:throw new Error("illegal figure")}}class L extends k{constructor(O){super(),this._coords=O[2],this._colors=O[3],this._figures=O[4],this._bounds=O[5],this._bbox=O[7],this._background=O[8],this.matrix=null}_createMeshCanvas(O,D,R){const d=Math.floor(this._bounds[0]),b=Math.floor(this._bounds[1]),u=Math.ceil(this._bounds[2])-d,m=Math.ceil(this._bounds[3])-b,J=Math.min(Math.ceil(Math.abs(u*O[0]*1.1)),3e3),r=Math.min(Math.ceil(Math.abs(m*O[1]*1.1)),3e3),XI=u/J,SI=m/r,kI={coords:this._coords,colors:this._colors,offsetX:-d,offsetY:-b,scaleX:1/XI,scaleY:1/SI},FI=J+2*2,JI=r+2*2,LI=R.getCanvas("mesh",FI,JI,!1),UI=LI.context,TI=UI.createImageData(J,r);if(D){const fI=TI.data;for(let sI=0,o=fI.length;sI<o;sI+=4)fI[sI]=D[0],fI[sI+1]=D[1],fI[sI+2]=D[2],fI[sI+3]=255}for(const fI of this._figures)w(TI,fI,kI);return UI.putImageData(TI,2,2),{canvas:LI.canvas,offsetX:d-2*XI,offsetY:b-2*SI,scaleX:XI,scaleY:SI}}getPattern(O,D,R,q){B(O,this._bbox);let II;if(q===G.SHADING)II=C.Util.singularValueDecompose2dScale((0,l.getCurrentTransform)(O));else if(II=C.Util.singularValueDecompose2dScale(D.baseTransform),this.matrix){const d=C.Util.singularValueDecompose2dScale(this.matrix);II=[II[0]*d[0],II[1]*d[1]]}const t=this._createMeshCanvas(II,q===G.SHADING?null:this._background,D.cachedCanvases);return q!==G.SHADING&&(O.setTransform(...D.baseTransform),this.matrix&&O.transform(...this.matrix)),O.translate(t.offsetX,t.offsetY),O.scale(t.scaleX,t.scaleY),O.createPattern(t.canvas,"no-repeat")}}class Q extends k{getPattern(){return"hotpink"}}function S(z){switch(z[0]){case"RadialAxial":return new n(z);case"Mesh":return new L(z);case"Dummy":return new Q}throw new Error(`Unknown IR type: ${z[0]}`)}const y={COLORED:1,UNCOLORED:2},F=class{constructor(O,D,R,q,II){this.operatorList=O[2],this.matrix=O[3]||[1,0,0,1,0,0],this.bbox=O[4],this.xstep=O[5],this.ystep=O[6],this.paintType=O[7],this.tilingType=O[8],this.color=D,this.ctx=R,this.canvasGraphicsFactory=q,this.baseTransform=II}createPatternCanvas(O){const D=this.operatorList,R=this.bbox,q=this.xstep,II=this.ystep,t=this.paintType,d=this.tilingType,b=this.color,u=this.canvasGraphicsFactory;(0,C.info)("TilingType: "+d);const m=R[0],J=R[1],r=R[2],XI=R[3],SI=C.Util.singularValueDecompose2dScale(this.matrix),kI=C.Util.singularValueDecompose2dScale(this.baseTransform),FI=[SI[0]*kI[0],SI[1]*kI[1]],JI=this.getSizeAndScale(q,this.ctx.canvas.width,FI[0]),LI=this.getSizeAndScale(II,this.ctx.canvas.height,FI[1]),UI=O.cachedCanvases.getCanvas("pattern",JI.size,LI.size,!0),TI=UI.context,QI=u.createCanvasGraphics(TI);QI.groupLevel=O.groupLevel,this.setFillAndStrokeStyleToContext(QI,t,b);let fI=m,sI=J,o=r,X=XI;return m<0&&(fI=0,o+=Math.abs(m)),J<0&&(sI=0,X+=Math.abs(J)),TI.translate(-(JI.scale*fI),-(LI.scale*sI)),QI.transform(JI.scale,0,0,LI.scale,0,0),TI.save(),this.clipBbox(QI,fI,sI,o,X),QI.baseTransform=(0,l.getCurrentTransform)(QI.ctx),QI.executeOperatorList(D),QI.endDrawing(),{canvas:UI.canvas,scaleX:JI.scale,scaleY:LI.scale,offsetX:fI,offsetY:sI}}getSizeAndScale(O,D,R){O=Math.abs(O);const q=Math.max(F.MAX_PATTERN_SIZE,D);let II=Math.ceil(O*R);return II>=q?II=q:R=II/O,{scale:R,size:II}}clipBbox(O,D,R,q,II){const t=q-D,d=II-R;O.ctx.rect(D,R,t,d),O.current.updateRectMinMax((0,l.getCurrentTransform)(O.ctx),[D,R,q,II]),O.clip(),O.endPath()}setFillAndStrokeStyleToContext(O,D,R){const q=O.ctx,II=O.current;switch(D){case y.COLORED:const t=this.ctx;q.fillStyle=t.fillStyle,q.strokeStyle=t.strokeStyle,II.fillColor=t.fillStyle,II.strokeColor=t.strokeStyle;break;case y.UNCOLORED:const d=C.Util.makeHexColor(R[0],R[1],R[2]);q.fillStyle=d,q.strokeStyle=d,II.fillColor=d,II.strokeColor=d;break;default:throw new C.FormatError(`Unsupported paint type: ${D}`)}}getPattern(O,D,R,q){let II=R;q!==G.SHADING&&(II=C.Util.transform(II,D.baseTransform),this.matrix&&(II=C.Util.transform(II,this.matrix)));const t=this.createPatternCanvas(D);let d=new DOMMatrix(II);d=d.translate(t.offsetX,t.offsetY),d=d.scale(1/t.scaleX,1/t.scaleY);const b=O.createPattern(t.canvas,"repeat");return b.setTransform(d),b}};let M=F;sg(M,"MAX_PATTERN_SIZE",3e3),g.TilingPattern=M},(I,g,A)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.convertBlackAndWhiteToRGBA=G,g.convertToRGBA=l,g.grayToRGBA=k;var C=A(1);function l(n){switch(n.kind){case C.ImageKind.GRAYSCALE_1BPP:return G(n);case C.ImageKind.RGB_24BPP:return B(n)}return null}function G({src:n,srcPos:a=0,dest:w,width:L,height:Q,nonBlackColor:S=4294967295,inverseDecode:y=!1}){const M=C.FeatureTest.isLittleEndian?4278190080:255,[F,z]=y?[S,M]:[M,S],O=L>>3,D=L&7,R=n.length;w=new Uint32Array(w.buffer);let q=0;for(let II=0;II<Q;II++){for(const d=a+O;a<d;a++){const b=a<R?n[a]:255;w[q++]=b&128?z:F,w[q++]=b&64?z:F,w[q++]=b&32?z:F,w[q++]=b&16?z:F,w[q++]=b&8?z:F,w[q++]=b&4?z:F,w[q++]=b&2?z:F,w[q++]=b&1?z:F}if(D===0)continue;const t=a<R?n[a++]:255;for(let d=0;d<D;d++)w[q++]=t&1<<7-d?z:F}return{srcPos:a,destPos:q}}function B({src:n,srcPos:a=0,dest:w,destPos:L=0,width:Q,height:S}){let y=0;const M=n.length>>2,F=new Uint32Array(n.buffer,a,M);if(C.FeatureTest.isLittleEndian){for(;y<M-2;y+=3,L+=4){const z=F[y],O=F[y+1],D=F[y+2];w[L]=z|4278190080,w[L+1]=z>>>24|O<<8|4278190080,w[L+2]=O>>>16|D<<16|4278190080,w[L+3]=D>>>8|4278190080}for(let z=y*4,O=n.length;z<O;z+=3)w[L++]=n[z]|n[z+1]<<8|n[z+2]<<16|4278190080}else{for(;y<M-2;y+=3,L+=4){const z=F[y],O=F[y+1],D=F[y+2];w[L]=z|255,w[L+1]=z<<24|O>>>8|255,w[L+2]=O<<16|D>>>16|255,w[L+3]=D<<8|255}for(let z=y*4,O=n.length;z<O;z+=3)w[L++]=n[z]<<24|n[z+1]<<16|n[z+2]<<8|255}return{srcPos:a,destPos:L}}function k(n,a){if(C.FeatureTest.isLittleEndian)for(let w=0,L=n.length;w<L;w++)a[w]=n[w]*65793|4278190080;else for(let w=0,L=n.length;w<L;w++)a[w]=n[w]*16843008|255}},(I,g)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.GlobalWorkerOptions=void 0;const A=Object.create(null);g.GlobalWorkerOptions=A,A.workerPort=null,A.workerSrc=""},(I,g,A)=>{var n,NC,w,RC,Q,jg;Object.defineProperty(g,"__esModule",{value:!0}),g.MessageHandler=void 0;var C=A(1);const l={UNKNOWN:0,DATA:1,ERROR:2},G={UNKNOWN:0,CANCEL:1,CANCEL_COMPLETE:2,CLOSE:3,ENQUEUE:4,ERROR:5,PULL:6,PULL_COMPLETE:7,START_COMPLETE:8};function B(y){switch(y instanceof Error||typeof y=="object"&&y!==null||(0,C.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),y.name){case"AbortException":return new C.AbortException(y.message);case"MissingPDFException":return new C.MissingPDFException(y.message);case"PasswordException":return new C.PasswordException(y.message,y.code);case"UnexpectedResponseException":return new C.UnexpectedResponseException(y.message,y.status);case"UnknownErrorException":return new C.UnknownErrorException(y.message,y.details);default:return new C.UnknownErrorException(y.message,y.toString())}}class k{constructor(M,F,z){DI(this,n);DI(this,w);DI(this,Q);this.sourceName=M,this.targetName=F,this.comObj=z,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=O=>{const D=O.data;if(D.targetName!==this.sourceName)return;if(D.stream){tI(this,w,RC).call(this,D);return}if(D.callback){const q=D.callbackId,II=this.callbackCapabilities[q];if(!II)throw new Error(`Cannot resolve callback ${q}`);if(delete this.callbackCapabilities[q],D.callback===l.DATA)II.resolve(D.data);else if(D.callback===l.ERROR)II.reject(B(D.reason));else throw new Error("Unexpected callback case");return}const R=this.actionHandler[D.action];if(!R)throw new Error(`Unknown action from worker: ${D.action}`);if(D.callbackId){const q=this.sourceName,II=D.sourceName;new Promise(function(t){t(R(D.data))}).then(function(t){z.postMessage({sourceName:q,targetName:II,callback:l.DATA,callbackId:D.callbackId,data:t})},function(t){z.postMessage({sourceName:q,targetName:II,callback:l.ERROR,callbackId:D.callbackId,reason:B(t)})});return}if(D.streamId){tI(this,n,NC).call(this,D);return}R(D.data)},z.addEventListener("message",this._onComObjOnMessage)}on(M,F){const z=this.actionHandler;if(z[M])throw new Error(`There is already an actionName called "${M}"`);z[M]=F}send(M,F,z){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:M,data:F},z)}sendWithPromise(M,F,z){const O=this.callbackId++,D=new C.PromiseCapability;this.callbackCapabilities[O]=D;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:M,callbackId:O,data:F},z)}catch(R){D.reject(R)}return D.promise}sendWithStream(M,F,z,O){const D=this.streamId++,R=this.sourceName,q=this.targetName,II=this.comObj;return new ReadableStream({start:t=>{const d=new C.PromiseCapability;return this.streamControllers[D]={controller:t,startCall:d,pullCall:null,cancelCall:null,isClosed:!1},II.postMessage({sourceName:R,targetName:q,action:M,streamId:D,data:F,desiredSize:t.desiredSize},O),d.promise},pull:t=>{const d=new C.PromiseCapability;return this.streamControllers[D].pullCall=d,II.postMessage({sourceName:R,targetName:q,stream:G.PULL,streamId:D,desiredSize:t.desiredSize}),d.promise},cancel:t=>{(0,C.assert)(t instanceof Error,"cancel must have a valid reason");const d=new C.PromiseCapability;return this.streamControllers[D].cancelCall=d,this.streamControllers[D].isClosed=!0,II.postMessage({sourceName:R,targetName:q,stream:G.CANCEL,streamId:D,reason:B(t)}),d.promise}},z)}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}n=new WeakSet,NC=function(M){const F=M.streamId,z=this.sourceName,O=M.sourceName,D=this.comObj,R=this,q=this.actionHandler[M.action],II={enqueue(t,d=1,b){if(this.isCancelled)return;const u=this.desiredSize;this.desiredSize-=d,u>0&&this.desiredSize<=0&&(this.sinkCapability=new C.PromiseCapability,this.ready=this.sinkCapability.promise),D.postMessage({sourceName:z,targetName:O,stream:G.ENQUEUE,streamId:F,chunk:t},b)},close(){this.isCancelled||(this.isCancelled=!0,D.postMessage({sourceName:z,targetName:O,stream:G.CLOSE,streamId:F}),delete R.streamSinks[F])},error(t){(0,C.assert)(t instanceof Error,"error must have a valid reason"),!this.isCancelled&&(this.isCancelled=!0,D.postMessage({sourceName:z,targetName:O,stream:G.ERROR,streamId:F,reason:B(t)}))},sinkCapability:new C.PromiseCapability,onPull:null,onCancel:null,isCancelled:!1,desiredSize:M.desiredSize,ready:null};II.sinkCapability.resolve(),II.ready=II.sinkCapability.promise,this.streamSinks[F]=II,new Promise(function(t){t(q(M.data,II))}).then(function(){D.postMessage({sourceName:z,targetName:O,stream:G.START_COMPLETE,streamId:F,success:!0})},function(t){D.postMessage({sourceName:z,targetName:O,stream:G.START_COMPLETE,streamId:F,reason:B(t)})})},w=new WeakSet,RC=function(M){const F=M.streamId,z=this.sourceName,O=M.sourceName,D=this.comObj,R=this.streamControllers[F],q=this.streamSinks[F];switch(M.stream){case G.START_COMPLETE:M.success?R.startCall.resolve():R.startCall.reject(B(M.reason));break;case G.PULL_COMPLETE:M.success?R.pullCall.resolve():R.pullCall.reject(B(M.reason));break;case G.PULL:if(!q){D.postMessage({sourceName:z,targetName:O,stream:G.PULL_COMPLETE,streamId:F,success:!0});break}q.desiredSize<=0&&M.desiredSize>0&&q.sinkCapability.resolve(),q.desiredSize=M.desiredSize,new Promise(function(II){var t;II((t=q.onPull)==null?void 0:t.call(q))}).then(function(){D.postMessage({sourceName:z,targetName:O,stream:G.PULL_COMPLETE,streamId:F,success:!0})},function(II){D.postMessage({sourceName:z,targetName:O,stream:G.PULL_COMPLETE,streamId:F,reason:B(II)})});break;case G.ENQUEUE:if((0,C.assert)(R,"enqueue should have stream controller"),R.isClosed)break;R.controller.enqueue(M.chunk);break;case G.CLOSE:if((0,C.assert)(R,"close should have stream controller"),R.isClosed)break;R.isClosed=!0,R.controller.close(),tI(this,Q,jg).call(this,R,F);break;case G.ERROR:(0,C.assert)(R,"error should have stream controller"),R.controller.error(B(M.reason)),tI(this,Q,jg).call(this,R,F);break;case G.CANCEL_COMPLETE:M.success?R.cancelCall.resolve():R.cancelCall.reject(B(M.reason)),tI(this,Q,jg).call(this,R,F);break;case G.CANCEL:if(!q)break;new Promise(function(II){var t;II((t=q.onCancel)==null?void 0:t.call(q,B(M.reason)))}).then(function(){D.postMessage({sourceName:z,targetName:O,stream:G.CANCEL_COMPLETE,streamId:F,success:!0})},function(II){D.postMessage({sourceName:z,targetName:O,stream:G.CANCEL_COMPLETE,streamId:F,reason:B(II)})}),q.sinkCapability.reject(B(M.reason)),q.isCancelled=!0,delete this.streamSinks[F];break;default:throw new Error("Unexpected stream case")}},Q=new WeakSet,jg=async function(M,F){var z,O,D;await Promise.allSettled([(z=M.startCall)==null?void 0:z.promise,(O=M.pullCall)==null?void 0:O.promise,(D=M.cancelCall)==null?void 0:D.promise]),delete this.streamControllers[F]},g.MessageHandler=k},(I,g,A)=>{var G,B;Object.defineProperty(g,"__esModule",{value:!0}),g.Metadata=void 0;var C=A(1);class l{constructor({parsedData:n,rawData:a}){DI(this,G,void 0);DI(this,B,void 0);OI(this,G,n),OI(this,B,a)}getRaw(){return V(this,B)}get(n){return V(this,G).get(n)??null}getAll(){return(0,C.objectFromMap)(V(this,G))}has(n){return V(this,G).has(n)}}G=new WeakMap,B=new WeakMap,g.Metadata=l},(I,g,A)=>{var n,a,w,L,Q,S,IC;Object.defineProperty(g,"__esModule",{value:!0}),g.OptionalContentConfig=void 0;var C=A(1),l=A(8);const G=Symbol("INTERNAL");class B{constructor(F,z){DI(this,n,!0);this.name=F,this.intent=z}get visible(){return V(this,n)}_setVisible(F,z){F!==G&&(0,C.unreachable)("Internal method `_setVisible` called."),OI(this,n,z)}}n=new WeakMap;class k{constructor(F){DI(this,S);DI(this,a,null);DI(this,w,new Map);DI(this,L,null);DI(this,Q,null);if(this.name=null,this.creator=null,F!==null){this.name=F.name,this.creator=F.creator,OI(this,Q,F.order);for(const z of F.groups)V(this,w).set(z.id,new B(z.name,z.intent));if(F.baseState==="OFF")for(const z of V(this,w).values())z._setVisible(G,!1);for(const z of F.on)V(this,w).get(z)._setVisible(G,!0);for(const z of F.off)V(this,w).get(z)._setVisible(G,!1);OI(this,L,this.getHash())}}isVisible(F){if(V(this,w).size===0)return!0;if(!F)return(0,C.warn)("Optional content group not defined."),!0;if(F.type==="OCG")return V(this,w).has(F.id)?V(this,w).get(F.id).visible:((0,C.warn)(`Optional content group not found: ${F.id}`),!0);if(F.type==="OCMD"){if(F.expression)return tI(this,S,IC).call(this,F.expression);if(!F.policy||F.policy==="AnyOn"){for(const z of F.ids){if(!V(this,w).has(z))return(0,C.warn)(`Optional content group not found: ${z}`),!0;if(V(this,w).get(z).visible)return!0}return!1}else if(F.policy==="AllOn"){for(const z of F.ids){if(!V(this,w).has(z))return(0,C.warn)(`Optional content group not found: ${z}`),!0;if(!V(this,w).get(z).visible)return!1}return!0}else if(F.policy==="AnyOff"){for(const z of F.ids){if(!V(this,w).has(z))return(0,C.warn)(`Optional content group not found: ${z}`),!0;if(!V(this,w).get(z).visible)return!0}return!1}else if(F.policy==="AllOff"){for(const z of F.ids){if(!V(this,w).has(z))return(0,C.warn)(`Optional content group not found: ${z}`),!0;if(V(this,w).get(z).visible)return!1}return!0}return(0,C.warn)(`Unknown optional content policy ${F.policy}.`),!0}return(0,C.warn)(`Unknown group type ${F.type}.`),!0}setVisibility(F,z=!0){if(!V(this,w).has(F)){(0,C.warn)(`Optional content group not found: ${F}`);return}V(this,w).get(F)._setVisible(G,!!z),OI(this,a,null)}get hasInitialVisibility(){return this.getHash()===V(this,L)}getOrder(){return V(this,w).size?V(this,Q)?V(this,Q).slice():[...V(this,w).keys()]:null}getGroups(){return V(this,w).size>0?(0,C.objectFromMap)(V(this,w)):null}getGroup(F){return V(this,w).get(F)||null}getHash(){if(V(this,a)!==null)return V(this,a);const F=new l.MurmurHash3_64;for(const[z,O]of V(this,w))F.update(`${z}:${O.visible}`);return OI(this,a,F.hexdigest())}}a=new WeakMap,w=new WeakMap,L=new WeakMap,Q=new WeakMap,S=new WeakSet,IC=function(F){const z=F.length;if(z<2)return!0;const O=F[0];for(let D=1;D<z;D++){const R=F[D];let q;if(Array.isArray(R))q=tI(this,S,IC).call(this,R);else if(V(this,w).has(R))q=V(this,w).get(R).visible;else return(0,C.warn)(`Optional content group not found: ${R}`),!0;switch(O){case"And":if(!q)return!1;break;case"Or":if(q)return!0;break;case"Not":return!q;default:return!0}}return O==="And"},g.OptionalContentConfig=k},(I,g,A)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.PDFDataTransportStream=void 0;var C=A(1),l=A(6);class G{constructor({length:a,initialData:w,progressiveDone:L=!1,contentDispositionFilename:Q=null,disableRange:S=!1,disableStream:y=!1},M){if((0,C.assert)(M,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),this._queuedChunks=[],this._progressiveDone=L,this._contentDispositionFilename=Q,(w==null?void 0:w.length)>0){const F=w instanceof Uint8Array&&w.byteLength===w.buffer.byteLength?w.buffer:new Uint8Array(w).buffer;this._queuedChunks.push(F)}this._pdfDataRangeTransport=M,this._isStreamingSupported=!y,this._isRangeSupported=!S,this._contentLength=a,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener((F,z)=>{this._onReceiveData({begin:F,chunk:z})}),this._pdfDataRangeTransport.addProgressListener((F,z)=>{this._onProgress({loaded:F,total:z})}),this._pdfDataRangeTransport.addProgressiveReadListener(F=>{this._onReceiveData({chunk:F})}),this._pdfDataRangeTransport.addProgressiveDoneListener(()=>{this._onProgressiveDone()}),this._pdfDataRangeTransport.transportReady()}_onReceiveData({begin:a,chunk:w}){const L=w instanceof Uint8Array&&w.byteLength===w.buffer.byteLength?w.buffer:new Uint8Array(w).buffer;if(a===void 0)this._fullRequestReader?this._fullRequestReader._enqueue(L):this._queuedChunks.push(L);else{const Q=this._rangeReaders.some(function(S){return S._begin!==a?!1:(S._enqueue(L),!0)});(0,C.assert)(Q,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){var a;return((a=this._fullRequestReader)==null?void 0:a._loaded)??0}_onProgress(a){var w,L,Q,S;a.total===void 0?(L=(w=this._rangeReaders[0])==null?void 0:w.onProgress)==null||L.call(w,{loaded:a.loaded}):(S=(Q=this._fullRequestReader)==null?void 0:Q.onProgress)==null||S.call(Q,{loaded:a.loaded,total:a.total})}_onProgressiveDone(){var a;(a=this._fullRequestReader)==null||a.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(a){const w=this._rangeReaders.indexOf(a);w>=0&&this._rangeReaders.splice(w,1)}getFullReader(){(0,C.assert)(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const a=this._queuedChunks;return this._queuedChunks=null,new B(this,a,this._progressiveDone,this._contentDispositionFilename)}getRangeReader(a,w){if(w<=this._progressiveDataLength)return null;const L=new k(this,a,w);return this._pdfDataRangeTransport.requestDataRange(a,w),this._rangeReaders.push(L),L}cancelAllRequests(a){var w;(w=this._fullRequestReader)==null||w.cancel(a);for(const L of this._rangeReaders.slice(0))L.cancel(a);this._pdfDataRangeTransport.abort()}}g.PDFDataTransportStream=G;class B{constructor(a,w,L=!1,Q=null){this._stream=a,this._done=L||!1,this._filename=(0,l.isPdfFile)(Q)?Q:null,this._queuedChunks=w||[],this._loaded=0;for(const S of this._queuedChunks)this._loaded+=S.byteLength;this._requests=[],this._headersReady=Promise.resolve(),a._fullRequestReader=this,this.onProgress=null}_enqueue(a){this._done||(this._requests.length>0?this._requests.shift().resolve({value:a,done:!1}):this._queuedChunks.push(a),this._loaded+=a.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const a=new C.PromiseCapability;return this._requests.push(a),a.promise}cancel(a){this._done=!0;for(const w of this._requests)w.resolve({value:void 0,done:!0});this._requests.length=0}progressiveDone(){this._done||(this._done=!0)}}class k{constructor(a,w,L){this._stream=a,this._begin=w,this._end=L,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(a){if(!this._done){if(this._requests.length===0)this._queuedChunk=a;else{this._requests.shift().resolve({value:a,done:!1});for(const L of this._requests)L.resolve({value:void 0,done:!0});this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const w=this._queuedChunk;return this._queuedChunk=null,{value:w,done:!1}}if(this._done)return{value:void 0,done:!0};const a=new C.PromiseCapability;return this._requests.push(a),a.promise}cancel(a){this._done=!0;for(const w of this._requests)w.resolve({value:void 0,done:!0});this._requests.length=0,this._stream._removeRangeReader(this)}}},(I,g)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.XfaText=void 0;class A{static textContent(l){const G=[],B={items:G,styles:Object.create(null)};function k(n){var L;if(!n)return;let a=null;const w=n.name;if(w==="#text")a=n.value;else if(A.shouldBuildText(w))(L=n==null?void 0:n.attributes)!=null&&L.textContent?a=n.attributes.textContent:n.value&&(a=n.value);else return;if(a!==null&&G.push({str:a}),!!n.children)for(const Q of n.children)k(Q)}return k(l),B}static shouldBuildText(l){return!(l==="textarea"||l==="input"||l==="option"||l==="select")}}g.XfaText=A},(I,g,A)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.NodeStandardFontDataFactory=g.NodeFilterFactory=g.NodeCanvasFactory=g.NodeCMapReaderFactory=void 0;var C=A(7);const l=function(a){return new Promise((w,L)=>{require$$5.readFile(a,(S,y)=>{if(S||!y){L(new Error(S));return}w(new Uint8Array(y))})})};class G extends C.BaseFilterFactory{}g.NodeFilterFactory=G;class B extends C.BaseCanvasFactory{_createCanvas(w,L){return require$$5.createCanvas(w,L)}}g.NodeCanvasFactory=B;class k extends C.BaseCMapReaderFactory{_fetchData(w,L){return l(w).then(Q=>({cMapData:Q,compressionType:L}))}}g.NodeCMapReaderFactory=k;class n extends C.BaseStandardFontDataFactory{_fetchData(w){return l(w)}}g.NodeStandardFontDataFactory=n},(I,g,A)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.PDFNodeStream=void 0;var C=A(1),l=A(22);const G=require$$5,B=require$$5,k=require$$5,n=require$$5,a=/^file:\/\/\/[a-zA-Z]:\//;function w(D){const R=n.parse(D);return R.protocol==="file:"||R.host?R:/^[a-z]:[/\\]/i.test(D)?n.parse(`file:///${D}`):(R.host||(R.protocol="file:"),R)}class L{constructor(R){this.source=R,this.url=w(R.url),this.isHttp=this.url.protocol==="http:"||this.url.protocol==="https:",this.isFsUrl=this.url.protocol==="file:",this.httpHeaders=this.isHttp&&R.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var R;return((R=this._fullRequestReader)==null?void 0:R._loaded)??0}getFullReader(){return(0,C.assert)(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new z(this):new M(this),this._fullRequestReader}getRangeReader(R,q){if(q<=this._progressiveDataLength)return null;const II=this.isFsUrl?new O(this,R,q):new F(this,R,q);return this._rangeRequestReaders.push(II),II}cancelAllRequests(R){var q;(q=this._fullRequestReader)==null||q.cancel(R);for(const II of this._rangeRequestReaders.slice(0))II.cancel(R)}}g.PDFNodeStream=L;class Q{constructor(R){this._url=R.url,this._done=!1,this._storedError=null,this.onProgress=null;const q=R.source;this._contentLength=q.length,this._loaded=0,this._filename=null,this._disableRange=q.disableRange||!1,this._rangeChunkSize=q.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!q.disableStream,this._isRangeSupported=!q.disableRange,this._readableStream=null,this._readCapability=new C.PromiseCapability,this._headersCapability=new C.PromiseCapability}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){var II;if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const R=this._readableStream.read();return R===null?(this._readCapability=new C.PromiseCapability,this.read()):(this._loaded+=R.length,(II=this.onProgress)==null||II.call(this,{loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(R).buffer,done:!1})}cancel(R){if(!this._readableStream){this._error(R);return}this._readableStream.destroy(R)}_error(R){this._storedError=R,this._readCapability.resolve()}_setReadableStream(R){this._readableStream=R,R.on("readable",()=>{this._readCapability.resolve()}),R.on("end",()=>{R.destroy(),this._done=!0,this._readCapability.resolve()}),R.on("error",q=>{this._error(q)}),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new C.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class S{constructor(R){this._url=R.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=new C.PromiseCapability;const q=R.source;this._isStreamingSupported=!q.disableStream}get isStreamingSupported(){return this._isStreamingSupported}async read(){var II;if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const R=this._readableStream.read();return R===null?(this._readCapability=new C.PromiseCapability,this.read()):(this._loaded+=R.length,(II=this.onProgress)==null||II.call(this,{loaded:this._loaded}),{value:new Uint8Array(R).buffer,done:!1})}cancel(R){if(!this._readableStream){this._error(R);return}this._readableStream.destroy(R)}_error(R){this._storedError=R,this._readCapability.resolve()}_setReadableStream(R){this._readableStream=R,R.on("readable",()=>{this._readCapability.resolve()}),R.on("end",()=>{R.destroy(),this._done=!0,this._readCapability.resolve()}),R.on("error",q=>{this._error(q)}),this._storedError&&this._readableStream.destroy(this._storedError)}}function y(D,R){return{protocol:D.protocol,auth:D.auth,host:D.hostname,port:D.port,path:D.path,method:"GET",headers:R}}class M extends Q{constructor(R){super(R);const q=II=>{if(II.statusCode===404){const u=new C.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=u,this._headersCapability.reject(u);return}this._headersCapability.resolve(),this._setReadableStream(II);const t=u=>this._readableStream.headers[u.toLowerCase()],{allowRangeRequests:d,suggestedLength:b}=(0,l.validateRangeRequestCapabilities)({getResponseHeader:t,isHttp:R.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=d,this._contentLength=b||this._contentLength,this._filename=(0,l.extractFilenameFromHeader)(t)};this._request=null,this._url.protocol==="http:"?this._request=B.request(y(this._url,R.httpHeaders),q):this._request=k.request(y(this._url,R.httpHeaders),q),this._request.on("error",II=>{this._storedError=II,this._headersCapability.reject(II)}),this._request.end()}}class F extends S{constructor(R,q,II){super(R),this._httpHeaders={};for(const d in R.httpHeaders){const b=R.httpHeaders[d];b!==void 0&&(this._httpHeaders[d]=b)}this._httpHeaders.Range=`bytes=${q}-${II-1}`;const t=d=>{if(d.statusCode===404){const b=new C.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=b;return}this._setReadableStream(d)};this._request=null,this._url.protocol==="http:"?this._request=B.request(y(this._url,this._httpHeaders),t):this._request=k.request(y(this._url,this._httpHeaders),t),this._request.on("error",d=>{this._storedError=d}),this._request.end()}}class z extends Q{constructor(R){super(R);let q=decodeURIComponent(this._url.path);a.test(this._url.href)&&(q=q.replace(/^\//,"")),G.lstat(q,(II,t)=>{if(II){II.code==="ENOENT"&&(II=new C.MissingPDFException(`Missing PDF "${q}".`)),this._storedError=II,this._headersCapability.reject(II);return}this._contentLength=t.size,this._setReadableStream(G.createReadStream(q)),this._headersCapability.resolve()})}}class O extends S{constructor(R,q,II){super(R);let t=decodeURIComponent(this._url.path);a.test(this._url.href)&&(t=t.replace(/^\//,"")),this._setReadableStream(G.createReadStream(t,{start:q,end:II-1}))}}},(I,g,A)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.createResponseStatusError=n,g.extractFilenameFromHeader=k,g.validateRangeRequestCapabilities=B,g.validateResponseStatus=a;var C=A(1),l=A(23),G=A(6);function B({getResponseHeader:w,isHttp:L,rangeChunkSize:Q,disableRange:S}){const y={allowRangeRequests:!1,suggestedLength:void 0},M=parseInt(w("Content-Length"),10);return!Number.isInteger(M)||(y.suggestedLength=M,M<=2*Q)||S||!L||w("Accept-Ranges")!=="bytes"||(w("Content-Encoding")||"identity")!=="identity"||(y.allowRangeRequests=!0),y}function k(w){const L=w("Content-Disposition");if(L){let Q=(0,l.getFilenameFromContentDispositionHeader)(L);if(Q.includes("%"))try{Q=decodeURIComponent(Q)}catch{}if((0,G.isPdfFile)(Q))return Q}return null}function n(w,L){return w===404||w===0&&L.startsWith("file:")?new C.MissingPDFException('Missing PDF "'+L+'".'):new C.UnexpectedResponseException(`Unexpected server response (${w}) while retrieving PDF "${L}".`,w)}function a(w){return w===200||w===206}},(I,g,A)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.getFilenameFromContentDispositionHeader=l;var C=A(1);function l(G){let B=!0,k=n("filename\\*","i").exec(G);if(k){k=k[1];let M=Q(k);return M=unescape(M),M=S(M),M=y(M),w(M)}if(k=L(G),k){const M=y(k);return w(M)}if(k=n("filename","i").exec(G),k){k=k[1];let M=Q(k);return M=y(M),w(M)}function n(M,F){return new RegExp("(?:^|;)\\s*"+M+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',F)}function a(M,F){if(M){if(!/^[\x00-\xFF]+$/.test(F))return F;try{const z=new TextDecoder(M,{fatal:!0}),O=(0,C.stringToBytes)(F);F=z.decode(O),B=!1}catch{}}return F}function w(M){return B&&/[\x80-\xff]/.test(M)&&(M=a("utf-8",M),B&&(M=a("iso-8859-1",M))),M}function L(M){const F=[];let z;const O=n("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;(z=O.exec(M))!==null;){let[,R,q,II]=z;if(R=parseInt(R,10),R in F){if(R===0)break;continue}F[R]=[q,II]}const D=[];for(let R=0;R<F.length&&R in F;++R){let[q,II]=F[R];II=Q(II),q&&(II=unescape(II),R===0&&(II=S(II))),D.push(II)}return D.join("")}function Q(M){if(M.startsWith('"')){const F=M.slice(1).split('\\"');for(let z=0;z<F.length;++z){const O=F[z].indexOf('"');O!==-1&&(F[z]=F[z].slice(0,O),F.length=z+1),F[z]=F[z].replaceAll(/\\(.)/g,"$1")}M=F.join('"')}return M}function S(M){const F=M.indexOf("'");if(F===-1)return M;const z=M.slice(0,F),D=M.slice(F+1).replace(/^[^']*'/,"");return a(z,D)}function y(M){return!M.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(M)?M:M.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,function(F,z,O,D){if(O==="q"||O==="Q")return D=D.replaceAll("_"," "),D=D.replaceAll(/=([0-9a-fA-F]{2})/g,function(R,q){return String.fromCharCode(parseInt(q,16))}),a(z,D);try{D=atob(D)}catch{}return a(z,D)})}return""}},(I,g,A)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.PDFNetworkStream=void 0;var C=A(1),l=A(22);const G=200,B=206;function k(Q){const S=Q.response;return typeof S!="string"?S:(0,C.stringToBytes)(S).buffer}class n{constructor(S,y={}){this.url=S,this.isHttp=/^https?:/i.test(S),this.httpHeaders=this.isHttp&&y.httpHeaders||Object.create(null),this.withCredentials=y.withCredentials||!1,this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(S,y,M){const F={begin:S,end:y};for(const z in M)F[z]=M[z];return this.request(F)}requestFull(S){return this.request(S)}request(S){const y=new XMLHttpRequest,M=this.currXhrId++,F=this.pendingRequests[M]={xhr:y};y.open("GET",this.url),y.withCredentials=this.withCredentials;for(const z in this.httpHeaders){const O=this.httpHeaders[z];O!==void 0&&y.setRequestHeader(z,O)}return this.isHttp&&"begin"in S&&"end"in S?(y.setRequestHeader("Range",`bytes=${S.begin}-${S.end-1}`),F.expectedStatus=B):F.expectedStatus=G,y.responseType="arraybuffer",S.onError&&(y.onerror=function(z){S.onError(y.status)}),y.onreadystatechange=this.onStateChange.bind(this,M),y.onprogress=this.onProgress.bind(this,M),F.onHeadersReceived=S.onHeadersReceived,F.onDone=S.onDone,F.onError=S.onError,F.onProgress=S.onProgress,y.send(null),M}onProgress(S,y){var F;const M=this.pendingRequests[S];M&&((F=M.onProgress)==null||F.call(M,y))}onStateChange(S,y){var R,q,II;const M=this.pendingRequests[S];if(!M)return;const F=M.xhr;if(F.readyState>=2&&M.onHeadersReceived&&(M.onHeadersReceived(),delete M.onHeadersReceived),F.readyState!==4||!(S in this.pendingRequests))return;if(delete this.pendingRequests[S],F.status===0&&this.isHttp){(R=M.onError)==null||R.call(M,F.status);return}const z=F.status||G;if(!(z===G&&M.expectedStatus===B)&&z!==M.expectedStatus){(q=M.onError)==null||q.call(M,F.status);return}const D=k(F);if(z===B){const t=F.getResponseHeader("Content-Range"),d=/bytes (\d+)-(\d+)\/(\d+)/.exec(t);M.onDone({begin:parseInt(d[1],10),chunk:D})}else D?M.onDone({begin:0,chunk:D}):(II=M.onError)==null||II.call(M,F.status)}getRequestXhr(S){return this.pendingRequests[S].xhr}isPendingRequest(S){return S in this.pendingRequests}abortRequest(S){const y=this.pendingRequests[S].xhr;delete this.pendingRequests[S],y.abort()}}class a{constructor(S){this._source=S,this._manager=new n(S.url,{httpHeaders:S.httpHeaders,withCredentials:S.withCredentials}),this._rangeChunkSize=S.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(S){const y=this._rangeRequestReaders.indexOf(S);y>=0&&this._rangeRequestReaders.splice(y,1)}getFullReader(){return(0,C.assert)(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new w(this._manager,this._source),this._fullRequestReader}getRangeReader(S,y){const M=new L(this._manager,S,y);return M.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(M),M}cancelAllRequests(S){var y;(y=this._fullRequestReader)==null||y.cancel(S);for(const M of this._rangeRequestReaders.slice(0))M.cancel(S)}}g.PDFNetworkStream=a;class w{constructor(S,y){this._manager=S;const M={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=y.url,this._fullRequestId=S.requestFull(M),this._headersReceivedCapability=new C.PromiseCapability,this._disableRange=y.disableRange||!1,this._contentLength=y.length,this._rangeChunkSize=y.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const S=this._fullRequestId,y=this._manager.getRequestXhr(S),M=O=>y.getResponseHeader(O),{allowRangeRequests:F,suggestedLength:z}=(0,l.validateRangeRequestCapabilities)({getResponseHeader:M,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});F&&(this._isRangeSupported=!0),this._contentLength=z||this._contentLength,this._filename=(0,l.extractFilenameFromHeader)(M),this._isRangeSupported&&this._manager.abortRequest(S),this._headersReceivedCapability.resolve()}_onDone(S){if(S&&(this._requests.length>0?this._requests.shift().resolve({value:S.chunk,done:!1}):this._cachedChunks.push(S.chunk)),this._done=!0,!(this._cachedChunks.length>0)){for(const y of this._requests)y.resolve({value:void 0,done:!0});this._requests.length=0}}_onError(S){this._storedError=(0,l.createResponseStatusError)(S,this._url),this._headersReceivedCapability.reject(this._storedError);for(const y of this._requests)y.reject(this._storedError);this._requests.length=0,this._cachedChunks.length=0}_onProgress(S){var y;(y=this.onProgress)==null||y.call(this,{loaded:S.loaded,total:S.lengthComputable?S.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersReceivedCapability.promise}async read(){if(this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const S=new C.PromiseCapability;return this._requests.push(S),S.promise}cancel(S){this._done=!0,this._headersReceivedCapability.reject(S);for(const y of this._requests)y.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class L{constructor(S,y,M){this._manager=S;const F={onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=S.url,this._requestId=S.requestRange(y,M,F),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}_close(){var S;(S=this.onClosed)==null||S.call(this,this)}_onDone(S){const y=S.chunk;this._requests.length>0?this._requests.shift().resolve({value:y,done:!1}):this._queuedChunk=y,this._done=!0;for(const M of this._requests)M.resolve({value:void 0,done:!0});this._requests.length=0,this._close()}_onError(S){this._storedError=(0,l.createResponseStatusError)(S,this._url);for(const y of this._requests)y.reject(this._storedError);this._requests.length=0,this._queuedChunk=null}_onProgress(S){var y;this.isStreamingSupported||(y=this.onProgress)==null||y.call(this,{loaded:S.loaded})}get isStreamingSupported(){return!1}async read(){if(this._storedError)throw this._storedError;if(this._queuedChunk!==null){const y=this._queuedChunk;return this._queuedChunk=null,{value:y,done:!1}}if(this._done)return{value:void 0,done:!0};const S=new C.PromiseCapability;return this._requests.push(S),S.promise}cancel(S){this._done=!0;for(const y of this._requests)y.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}},(I,g,A)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.PDFFetchStream=void 0;var C=A(1),l=A(22);function G(L,Q,S){return{method:"GET",headers:L,signal:S.signal,mode:"cors",credentials:Q?"include":"same-origin",redirect:"follow"}}function B(L){const Q=new Headers;for(const S in L){const y=L[S];y!==void 0&&Q.append(S,y)}return Q}function k(L){return L instanceof Uint8Array?L.buffer:L instanceof ArrayBuffer?L:((0,C.warn)(`getArrayBuffer - unexpected data format: ${L}`),new Uint8Array(L).buffer)}class n{constructor(Q){this.source=Q,this.isHttp=/^https?:/i.test(Q.url),this.httpHeaders=this.isHttp&&Q.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var Q;return((Q=this._fullRequestReader)==null?void 0:Q._loaded)??0}getFullReader(){return(0,C.assert)(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new a(this),this._fullRequestReader}getRangeReader(Q,S){if(S<=this._progressiveDataLength)return null;const y=new w(this,Q,S);return this._rangeRequestReaders.push(y),y}cancelAllRequests(Q){var S;(S=this._fullRequestReader)==null||S.cancel(Q);for(const y of this._rangeRequestReaders.slice(0))y.cancel(Q)}}g.PDFFetchStream=n;class a{constructor(Q){this._stream=Q,this._reader=null,this._loaded=0,this._filename=null;const S=Q.source;this._withCredentials=S.withCredentials||!1,this._contentLength=S.length,this._headersCapability=new C.PromiseCapability,this._disableRange=S.disableRange||!1,this._rangeChunkSize=S.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._abortController=new AbortController,this._isStreamingSupported=!S.disableStream,this._isRangeSupported=!S.disableRange,this._headers=B(this._stream.httpHeaders);const y=S.url;fetch(y,G(this._headers,this._withCredentials,this._abortController)).then(M=>{if(!(0,l.validateResponseStatus)(M.status))throw(0,l.createResponseStatusError)(M.status,y);this._reader=M.body.getReader(),this._headersCapability.resolve();const F=D=>M.headers.get(D),{allowRangeRequests:z,suggestedLength:O}=(0,l.validateRangeRequestCapabilities)({getResponseHeader:F,isHttp:this._stream.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=z,this._contentLength=O||this._contentLength,this._filename=(0,l.extractFilenameFromHeader)(F),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new C.AbortException("Streaming is disabled."))}).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){var y;await this._headersCapability.promise;const{value:Q,done:S}=await this._reader.read();return S?{value:Q,done:S}:(this._loaded+=Q.byteLength,(y=this.onProgress)==null||y.call(this,{loaded:this._loaded,total:this._contentLength}),{value:k(Q),done:!1})}cancel(Q){var S;(S=this._reader)==null||S.cancel(Q),this._abortController.abort()}}class w{constructor(Q,S,y){this._stream=Q,this._reader=null,this._loaded=0;const M=Q.source;this._withCredentials=M.withCredentials||!1,this._readCapability=new C.PromiseCapability,this._isStreamingSupported=!M.disableStream,this._abortController=new AbortController,this._headers=B(this._stream.httpHeaders),this._headers.append("Range",`bytes=${S}-${y-1}`);const F=M.url;fetch(F,G(this._headers,this._withCredentials,this._abortController)).then(z=>{if(!(0,l.validateResponseStatus)(z.status))throw(0,l.createResponseStatusError)(z.status,F);this._readCapability.resolve(),this._reader=z.body.getReader()}).catch(this._readCapability.reject),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){var y;await this._readCapability.promise;const{value:Q,done:S}=await this._reader.read();return S?{value:Q,done:S}:(this._loaded+=Q.byteLength,(y=this.onProgress)==null||y.call(this,{loaded:this._loaded}),{value:k(Q),done:!1})}cancel(Q){var S;(S=this._reader)==null||S.cancel(Q),this._abortController.abort()}}},(I,g,A)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.TextLayerRenderTask=void 0,g.renderTextLayer=M,g.updateTextLayer=F;var C=A(1),l=A(6);const G=1e5,B=30,k=.8,n=new Map;function a(z,O){let D;if(O&&C.FeatureTest.isOffscreenCanvasSupported)D=new OffscreenCanvas(z,z).getContext("2d",{alpha:!1});else{const R=document.createElement("canvas");R.width=R.height=z,D=R.getContext("2d",{alpha:!1})}return D}function w(z,O){const D=n.get(z);if(D)return D;const R=a(B,O);R.font=`${B}px ${z}`;const q=R.measureText("");let II=q.fontBoundingBoxAscent,t=Math.abs(q.fontBoundingBoxDescent);if(II){const b=II/(II+t);return n.set(z,b),R.canvas.width=R.canvas.height=0,b}R.strokeStyle="red",R.clearRect(0,0,B,B),R.strokeText("g",0,0);let d=R.getImageData(0,0,B,B).data;t=0;for(let b=d.length-1-3;b>=0;b-=4)if(d[b]>0){t=Math.ceil(b/4/B);break}R.clearRect(0,0,B,B),R.strokeText("A",0,B),d=R.getImageData(0,0,B,B).data,II=0;for(let b=0,u=d.length;b<u;b+=4)if(d[b]>0){II=B-Math.floor(b/4/B);break}if(R.canvas.width=R.canvas.height=0,II){const b=II/(II+t);return n.set(z,b),b}return n.set(z,k),k}function L(z,O,D){const R=document.createElement("span"),q={angle:0,canvasWidth:0,hasText:O.str!=="",hasEOL:O.hasEOL,fontSize:0};z._textDivs.push(R);const II=C.Util.transform(z._transform,O.transform);let t=Math.atan2(II[1],II[0]);const d=D[O.fontName];d.vertical&&(t+=Math.PI/2);const b=Math.hypot(II[2],II[3]),u=b*w(d.fontFamily,z._isOffscreenCanvasSupported);let m,J;t===0?(m=II[4],J=II[5]-u):(m=II[4]+u*Math.sin(t),J=II[5]-u*Math.cos(t));const r="calc(var(--scale-factor)*",XI=R.style;z._container===z._rootContainer?(XI.left=`${(100*m/z._pageWidth).toFixed(2)}%`,XI.top=`${(100*J/z._pageHeight).toFixed(2)}%`):(XI.left=`${r}${m.toFixed(2)}px)`,XI.top=`${r}${J.toFixed(2)}px)`),XI.fontSize=`${r}${b.toFixed(2)}px)`,XI.fontFamily=d.fontFamily,q.fontSize=b,R.setAttribute("role","presentation"),R.textContent=O.str,R.dir=O.dir,z._fontInspectorEnabled&&(R.dataset.fontName=O.fontName),t!==0&&(q.angle=t*(180/Math.PI));let SI=!1;if(O.str.length>1)SI=!0;else if(O.str!==" "&&O.transform[0]!==O.transform[3]){const kI=Math.abs(O.transform[0]),FI=Math.abs(O.transform[3]);kI!==FI&&Math.max(kI,FI)/Math.min(kI,FI)>1.5&&(SI=!0)}SI&&(q.canvasWidth=d.vertical?O.height:O.width),z._textDivProperties.set(R,q),z._isReadableStream&&z._layoutText(R)}function Q(z){const{div:O,scale:D,properties:R,ctx:q,prevFontSize:II,prevFontFamily:t}=z,{style:d}=O;let b="";if(R.canvasWidth!==0&&R.hasText){const{fontFamily:u}=d,{canvasWidth:m,fontSize:J}=R;(II!==J||t!==u)&&(q.font=`${J*D}px ${u}`,z.prevFontSize=J,z.prevFontFamily=u);const{width:r}=q.measureText(O.textContent);r>0&&(b=`scaleX(${m*D/r})`)}R.angle!==0&&(b=`rotate(${R.angle}deg) ${b}`),b.length>0&&(d.transform=b)}function S(z){if(z._canceled)return;const O=z._textDivs,D=z._capability;if(O.length>G){D.resolve();return}if(!z._isReadableStream)for(const q of O)z._layoutText(q);D.resolve()}class y{constructor({textContentSource:O,container:D,viewport:R,textDivs:q,textDivProperties:II,textContentItemsStr:t,isOffscreenCanvasSupported:d}){var r;this._textContentSource=O,this._isReadableStream=O instanceof ReadableStream,this._container=this._rootContainer=D,this._textDivs=q||[],this._textContentItemsStr=t||[],this._isOffscreenCanvasSupported=d,this._fontInspectorEnabled=!!((r=globalThis.FontInspector)!=null&&r.enabled),this._reader=null,this._textDivProperties=II||new WeakMap,this._canceled=!1,this._capability=new C.PromiseCapability,this._layoutTextParams={prevFontSize:null,prevFontFamily:null,div:null,scale:R.scale*(globalThis.devicePixelRatio||1),properties:null,ctx:a(0,d)};const{pageWidth:b,pageHeight:u,pageX:m,pageY:J}=R.rawDims;this._transform=[1,0,0,-1,-m,J+u],this._pageWidth=b,this._pageHeight=u,(0,l.setLayerDimensions)(D,R),this._capability.promise.finally(()=>{this._layoutTextParams=null}).catch(()=>{})}get promise(){return this._capability.promise}cancel(){this._canceled=!0,this._reader&&(this._reader.cancel(new C.AbortException("TextLayer task cancelled.")).catch(()=>{}),this._reader=null),this._capability.reject(new C.AbortException("TextLayer task cancelled."))}_processItems(O,D){for(const R of O){if(R.str===void 0){if(R.type==="beginMarkedContentProps"||R.type==="beginMarkedContent"){const q=this._container;this._container=document.createElement("span"),this._container.classList.add("markedContent"),R.id!==null&&this._container.setAttribute("id",`${R.id}`),q.append(this._container)}else R.type==="endMarkedContent"&&(this._container=this._container.parentNode);continue}this._textContentItemsStr.push(R.str),L(this,R,D)}}_layoutText(O){const D=this._layoutTextParams.properties=this._textDivProperties.get(O);if(this._layoutTextParams.div=O,Q(this._layoutTextParams),D.hasText&&this._container.append(O),D.hasEOL){const R=document.createElement("br");R.setAttribute("role","presentation"),this._container.append(R)}}_render(){const O=new C.PromiseCapability;let D=Object.create(null);if(this._isReadableStream){const R=()=>{this._reader.read().then(({value:q,done:II})=>{if(II){O.resolve();return}Object.assign(D,q.styles),this._processItems(q.items,D),R()},O.reject)};this._reader=this._textContentSource.getReader(),R()}else if(this._textContentSource){const{items:R,styles:q}=this._textContentSource;this._processItems(R,q),O.resolve()}else throw new Error('No "textContentSource" parameter specified.');O.promise.then(()=>{D=null,S(this)},this._capability.reject)}}g.TextLayerRenderTask=y;function M(z){!z.textContentSource&&(z.textContent||z.textContentStream)&&((0,l.deprecated)("The TextLayerRender `textContent`/`textContentStream` parameters will be removed in the future, please use `textContentSource` instead."),z.textContentSource=z.textContent||z.textContentStream);const{container:O,viewport:D}=z,R=getComputedStyle(O),q=R.getPropertyValue("visibility"),II=parseFloat(R.getPropertyValue("--scale-factor"));q==="visible"&&(!II||Math.abs(II-D.scale)>1e-5)&&console.error("The `--scale-factor` CSS-variable must be set, to the same value as `viewport.scale`, either on the `container`-element itself or higher up in the DOM.");const t=new y(z);return t._render(),t}function F({container:z,viewport:O,textDivs:D,textDivProperties:R,isOffscreenCanvasSupported:q,mustRotate:II=!0,mustRescale:t=!0}){if(II&&(0,l.setLayerDimensions)(z,{rotation:O.rotation}),t){const d=a(0,q),u={prevFontSize:null,prevFontFamily:null,div:null,scale:O.scale*(globalThis.devicePixelRatio||1),properties:null,ctx:d};for(const m of D)u.properties=R.get(m),u.div=m,Q(u)}}},(I,g,A)=>{var a,w,L,Q,S,y,M,F,z,gC,D,yC,q,CC,t,AC;Object.defineProperty(g,"__esModule",{value:!0}),g.AnnotationEditorLayer=void 0;var C=A(1),l=A(5),G=A(28),B=A(29),k=A(6);const b=class{constructor(m){DI(this,z);DI(this,D);DI(this,q);DI(this,t);DI(this,a,void 0);DI(this,w,!1);DI(this,L,this.pointerup.bind(this));DI(this,Q,this.pointerdown.bind(this));DI(this,S,new Map);DI(this,y,!1);DI(this,M,!1);DI(this,F,void 0);b._initialized||(b._initialized=!0,G.FreeTextEditor.initialize(m.l10n),B.InkEditor.initialize(m.l10n)),m.uiManager.registerEditorTypes([G.FreeTextEditor,B.InkEditor]),OI(this,F,m.uiManager),this.pageIndex=m.pageIndex,this.div=m.div,OI(this,a,m.accessibilityManager),V(this,F).addLayer(this)}get isEmpty(){return V(this,S).size===0}updateToolbar(m){V(this,F).updateToolbar(m)}updateMode(m=V(this,F).getMode()){tI(this,t,AC).call(this),m===C.AnnotationEditorType.INK?(this.addInkEditorIfNeeded(!1),this.disableClick()):this.enableClick(),V(this,F).unselectAll(),m!==C.AnnotationEditorType.NONE&&(this.div.classList.toggle("freeTextEditing",m===C.AnnotationEditorType.FREETEXT),this.div.classList.toggle("inkEditing",m===C.AnnotationEditorType.INK),this.div.hidden=!1)}addInkEditorIfNeeded(m){if(!m&&V(this,F).getMode()!==C.AnnotationEditorType.INK)return;if(!m){for(const r of V(this,S).values())if(r.isEmpty()){r.setInBackground();return}}tI(this,q,CC).call(this,{offsetX:0,offsetY:0}).setInBackground()}setEditingState(m){V(this,F).setEditingState(m)}addCommands(m){V(this,F).addCommands(m)}enable(){this.div.style.pointerEvents="auto";for(const m of V(this,S).values())m.enableEditing()}disable(){this.div.style.pointerEvents="none";for(const m of V(this,S).values())m.disableEditing();tI(this,t,AC).call(this),this.isEmpty&&(this.div.hidden=!0)}setActiveEditor(m){V(this,F).getActive()!==m&&V(this,F).setActiveEditor(m)}enableClick(){this.div.addEventListener("pointerdown",V(this,Q)),this.div.addEventListener("pointerup",V(this,L))}disableClick(){this.div.removeEventListener("pointerdown",V(this,Q)),this.div.removeEventListener("pointerup",V(this,L))}attach(m){V(this,S).set(m.id,m)}detach(m){var J;V(this,S).delete(m.id),(J=V(this,a))==null||J.removePointerInTextLayer(m.contentDiv)}remove(m){V(this,F).removeEditor(m),this.detach(m),m.div.style.display="none",setTimeout(()=>{m.div.style.display="",m.div.remove(),m.isAttachedToDOM=!1,document.activeElement===document.body&&V(this,F).focusMainContainer()},0),V(this,M)||this.addInkEditorIfNeeded(!1)}add(m){if(tI(this,z,gC).call(this,m),V(this,F).addEditor(m),this.attach(m),!m.isAttachedToDOM){const J=m.render();this.div.append(J),m.isAttachedToDOM=!0}this.moveEditorInDOM(m),m.onceAdded(),V(this,F).addToAnnotationStorage(m)}moveEditorInDOM(m){var J;(J=V(this,a))==null||J.moveElementInDOM(this.div,m.div,m.contentDiv,!0)}addOrRebuild(m){m.needsToBeRebuilt()?m.rebuild():this.add(m)}addANewEditor(m){const J=()=>{this.addOrRebuild(m)},r=()=>{m.remove()};this.addCommands({cmd:J,undo:r,mustExec:!0})}addUndoableEditor(m){const J=()=>{this.addOrRebuild(m)},r=()=>{m.remove()};this.addCommands({cmd:J,undo:r,mustExec:!1})}getNextId(){return V(this,F).getId()}deserialize(m){switch(m.annotationType){case C.AnnotationEditorType.FREETEXT:return G.FreeTextEditor.deserialize(m,this,V(this,F));case C.AnnotationEditorType.INK:return B.InkEditor.deserialize(m,this,V(this,F))}return null}setSelected(m){V(this,F).setSelected(m)}toggleSelected(m){V(this,F).toggleSelected(m)}isSelected(m){return V(this,F).isSelected(m)}unselect(m){V(this,F).unselect(m)}pointerup(m){const{isMac:J}=C.FeatureTest.platform;if(!(m.button!==0||m.ctrlKey&&J)&&m.target===this.div&&V(this,y)){if(OI(this,y,!1),!V(this,w)){OI(this,w,!0);return}tI(this,q,CC).call(this,m)}}pointerdown(m){const{isMac:J}=C.FeatureTest.platform;if(m.button!==0||m.ctrlKey&&J||m.target!==this.div)return;OI(this,y,!0);const r=V(this,F).getActive();OI(this,w,!r||r.isEmpty())}drop(m){const J=m.dataTransfer.getData("text/plain"),r=V(this,F).getEditor(J);if(!r)return;m.preventDefault(),m.dataTransfer.dropEffect="move",tI(this,z,gC).call(this,r);const XI=this.div.getBoundingClientRect(),SI=m.clientX-XI.x,kI=m.clientY-XI.y;r.translate(SI-r.startX,kI-r.startY),this.moveEditorInDOM(r),r.div.focus()}dragover(m){m.preventDefault()}destroy(){var m,J;((m=V(this,F).getActive())==null?void 0:m.parent)===this&&V(this,F).setActiveEditor(null);for(const r of V(this,S).values())(J=V(this,a))==null||J.removePointerInTextLayer(r.contentDiv),r.setParent(null),r.isAttachedToDOM=!1,r.div.remove();this.div=null,V(this,S).clear(),V(this,F).removeLayer(this)}render({viewport:m}){this.viewport=m,(0,k.setLayerDimensions)(this.div,m),(0,l.bindEvents)(this,this.div,["dragover","drop"]);for(const J of V(this,F).getEditors(this.pageIndex))this.add(J);this.updateMode()}update({viewport:m}){V(this,F).commitOrRemove(),this.viewport=m,(0,k.setLayerDimensions)(this.div,{rotation:m.rotation}),this.updateMode()}get pageDimensions(){const{pageWidth:m,pageHeight:J}=this.viewport.rawDims;return[m,J]}};let n=b;a=new WeakMap,w=new WeakMap,L=new WeakMap,Q=new WeakMap,S=new WeakMap,y=new WeakMap,M=new WeakMap,F=new WeakMap,z=new WeakSet,gC=function(m){var J;m.parent!==this&&(this.attach(m),(J=m.parent)==null||J.detach(m),m.setParent(this),m.div&&m.isAttachedToDOM&&(m.div.remove(),this.div.append(m.div)))},D=new WeakSet,yC=function(m){switch(V(this,F).getMode()){case C.AnnotationEditorType.FREETEXT:return new G.FreeTextEditor(m);case C.AnnotationEditorType.INK:return new B.InkEditor(m)}return null},q=new WeakSet,CC=function(m){const J=this.getNextId(),r=tI(this,D,yC).call(this,{parent:this,id:J,x:m.offsetX,y:m.offsetY,uiManager:V(this,F)});return r&&this.add(r),r},t=new WeakSet,AC=function(){OI(this,M,!0);for(const m of V(this,S).values())m.isEmpty()&&m.remove();OI(this,M,!1)},sg(n,"_initialized",!1),g.AnnotationEditorLayer=n},(I,g,A)=>{var k,n,a,w,L,Q,S,y,M,F,nC,O,MC,R,HC,II,lC;Object.defineProperty(g,"__esModule",{value:!0}),g.FreeTextEditor=void 0;var C=A(1),l=A(5),G=A(4);const d=class extends G.AnnotationEditor{constructor(m){super({...m,name:"freeTextEditor"});DI(this,F);DI(this,O);DI(this,R);DI(this,II);DI(this,k,this.editorDivBlur.bind(this));DI(this,n,this.editorDivFocus.bind(this));DI(this,a,this.editorDivInput.bind(this));DI(this,w,this.editorDivKeydown.bind(this));DI(this,L,void 0);DI(this,Q,"");DI(this,S,`${this.id}-editor`);DI(this,y,!1);DI(this,M,void 0);OI(this,L,m.color||d._defaultColor||G.AnnotationEditor._defaultLineColor),OI(this,M,m.fontSize||d._defaultFontSize)}static initialize(m){this._l10nPromise=new Map(["free_text2_default_content","editor_free_text2_aria_label"].map(r=>[r,m.get(r)]));const J=getComputedStyle(document.documentElement);this._internalPadding=parseFloat(J.getPropertyValue("--freetext-padding"))}static updateDefaultParams(m,J){switch(m){case C.AnnotationEditorParamsType.FREETEXT_SIZE:d._defaultFontSize=J;break;case C.AnnotationEditorParamsType.FREETEXT_COLOR:d._defaultColor=J;break}}updateParams(m,J){switch(m){case C.AnnotationEditorParamsType.FREETEXT_SIZE:tI(this,F,nC).call(this,J);break;case C.AnnotationEditorParamsType.FREETEXT_COLOR:tI(this,O,MC).call(this,J);break}}static get defaultPropertiesToUpdate(){return[[C.AnnotationEditorParamsType.FREETEXT_SIZE,d._defaultFontSize],[C.AnnotationEditorParamsType.FREETEXT_COLOR,d._defaultColor||G.AnnotationEditor._defaultLineColor]]}get propertiesToUpdate(){return[[C.AnnotationEditorParamsType.FREETEXT_SIZE,V(this,M)],[C.AnnotationEditorParamsType.FREETEXT_COLOR,V(this,L)]]}getInitialTranslation(){const m=this.parentScale;return[-d._internalPadding*m,-(d._internalPadding+V(this,M))*m]}rebuild(){super.rebuild(),this.div!==null&&(this.isAttachedToDOM||this.parent.add(this))}enableEditMode(){this.isInEditMode()||(this.parent.setEditingState(!1),this.parent.updateToolbar(C.AnnotationEditorType.FREETEXT),super.enableEditMode(),this.overlayDiv.classList.remove("enabled"),this.editorDiv.contentEditable=!0,this.div.draggable=!1,this.div.removeAttribute("aria-activedescendant"),this.editorDiv.addEventListener("keydown",V(this,w)),this.editorDiv.addEventListener("focus",V(this,n)),this.editorDiv.addEventListener("blur",V(this,k)),this.editorDiv.addEventListener("input",V(this,a)))}disableEditMode(){this.isInEditMode()&&(this.parent.setEditingState(!0),super.disableEditMode(),this.overlayDiv.classList.add("enabled"),this.editorDiv.contentEditable=!1,this.div.setAttribute("aria-activedescendant",V(this,S)),this.div.draggable=!0,this.editorDiv.removeEventListener("keydown",V(this,w)),this.editorDiv.removeEventListener("focus",V(this,n)),this.editorDiv.removeEventListener("blur",V(this,k)),this.editorDiv.removeEventListener("input",V(this,a)),this.div.focus({preventScroll:!0}),this.isEditing=!1,this.parent.div.classList.add("freeTextEditing"))}focusin(m){super.focusin(m),m.target!==this.editorDiv&&this.editorDiv.focus()}onceAdded(){this.width||(this.enableEditMode(),this.editorDiv.focus())}isEmpty(){return!this.editorDiv||this.editorDiv.innerText.trim()===""}remove(){this.isEditing=!1,this.parent.setEditingState(!0),this.parent.div.classList.add("freeTextEditing"),super.remove()}commit(){this.isInEditMode()&&(super.commit(),V(this,y)||(OI(this,y,!0),this.parent.addUndoableEditor(this)),this.disableEditMode(),OI(this,Q,tI(this,R,HC).call(this).trimEnd()),tI(this,II,lC).call(this))}shouldGetKeyboardEvents(){return this.isInEditMode()}dblclick(m){this.enableEditMode(),this.editorDiv.focus()}keydown(m){m.target===this.div&&m.key==="Enter"&&(this.enableEditMode(),this.editorDiv.focus())}editorDivKeydown(m){d._keyboardManager.exec(this,m)}editorDivFocus(m){this.isEditing=!0}editorDivBlur(m){this.isEditing=!1}editorDivInput(m){this.parent.div.classList.toggle("freeTextEditing",this.isEmpty())}disableEditing(){this.editorDiv.setAttribute("role","comment"),this.editorDiv.removeAttribute("aria-multiline")}enableEditing(){this.editorDiv.setAttribute("role","textbox"),this.editorDiv.setAttribute("aria-multiline",!0)}render(){if(this.div)return this.div;let m,J;this.width&&(m=this.x,J=this.y),super.render(),this.editorDiv=document.createElement("div"),this.editorDiv.className="internal",this.editorDiv.setAttribute("id",V(this,S)),this.enableEditing(),d._l10nPromise.get("editor_free_text2_aria_label").then(XI=>{var SI;return(SI=this.editorDiv)==null?void 0:SI.setAttribute("aria-label",XI)}),d._l10nPromise.get("free_text2_default_content").then(XI=>{var SI;return(SI=this.editorDiv)==null?void 0:SI.setAttribute("default-content",XI)}),this.editorDiv.contentEditable=!0;const{style:r}=this.editorDiv;if(r.fontSize=`calc(${V(this,M)}px * var(--scale-factor))`,r.color=V(this,L),this.div.append(this.editorDiv),this.overlayDiv=document.createElement("div"),this.overlayDiv.classList.add("overlay","enabled"),this.div.append(this.overlayDiv),(0,l.bindEvents)(this,this.div,["dblclick","keydown"]),this.width){const[XI,SI]=this.parentDimensions;this.setAt(m*XI,J*SI,this.width*XI,this.height*SI);for(const kI of V(this,Q).split(`
`)){const FI=document.createElement("div");FI.append(kI?document.createTextNode(kI):document.createElement("br")),this.editorDiv.append(FI)}this.div.draggable=!0,this.editorDiv.contentEditable=!1}else this.div.draggable=!1,this.editorDiv.contentEditable=!0;return this.div}get contentDiv(){return this.editorDiv}static deserialize(m,J,r){const XI=super.deserialize(m,J,r);return OI(XI,M,m.fontSize),OI(XI,L,C.Util.makeHexColor(...m.color)),OI(XI,Q,m.value),XI}serialize(){if(this.isEmpty())return null;const m=d._internalPadding*this.parentScale,J=this.getRect(m,m),r=G.AnnotationEditor._colorManager.convert(this.isAttachedToDOM?getComputedStyle(this.editorDiv).color:V(this,L));return{annotationType:C.AnnotationEditorType.FREETEXT,color:r,fontSize:V(this,M),value:V(this,Q),pageIndex:this.pageIndex,rect:J,rotation:this.rotation}}};let B=d;k=new WeakMap,n=new WeakMap,a=new WeakMap,w=new WeakMap,L=new WeakMap,Q=new WeakMap,S=new WeakMap,y=new WeakMap,M=new WeakMap,F=new WeakSet,nC=function(m){const J=XI=>{this.editorDiv.style.fontSize=`calc(${XI}px * var(--scale-factor))`,this.translate(0,-(XI-V(this,M))*this.parentScale),OI(this,M,XI),tI(this,II,lC).call(this)},r=V(this,M);this.addCommands({cmd:()=>{J(m)},undo:()=>{J(r)},mustExec:!0,type:C.AnnotationEditorParamsType.FREETEXT_SIZE,overwriteIfSameType:!0,keepUndo:!0})},O=new WeakSet,MC=function(m){const J=V(this,L);this.addCommands({cmd:()=>{OI(this,L,this.editorDiv.style.color=m)},undo:()=>{OI(this,L,this.editorDiv.style.color=J)},mustExec:!0,type:C.AnnotationEditorParamsType.FREETEXT_COLOR,overwriteIfSameType:!0,keepUndo:!0})},R=new WeakSet,HC=function(){const m=this.editorDiv.getElementsByTagName("div");if(m.length===0)return this.editorDiv.innerText;const J=[];for(const r of m)J.push(r.innerText.replace(/\r\n?|\n/,""));return J.join(`
`)},II=new WeakSet,lC=function(){const[m,J]=this.parentDimensions;let r;if(this.isAttachedToDOM)r=this.div.getBoundingClientRect();else{const{currentLayer:XI,div:SI}=this,kI=SI.style.display;SI.style.display="hidden",XI.div.append(this.div),r=SI.getBoundingClientRect(),SI.remove(),SI.style.display=kI}this.width=r.width/m,this.height=r.height/J},sg(B,"_freeTextDefaultContent",""),sg(B,"_l10nPromise"),sg(B,"_internalPadding",0),sg(B,"_defaultColor",null),sg(B,"_defaultFontSize",10),sg(B,"_keyboardManager",new l.KeyboardManager([[["ctrl+Enter","mac+meta+Enter","Escape","mac+Escape"],d.prototype.commitOrRemove]])),sg(B,"_type","freetext"),g.FreeTextEditor=B},(I,g,A)=>{var n,a,w,L,Q,S,y,M,F,z,O,D,R,q,II,t,d,uC,u,eC,J,DC,XI,KC,kI,ZC,JI,tC,UI,dC,QI,pC,sI,SC,X,FC,P,JC,aI,zC,i,Rg,Z,cC,s,Qg,N,Og,oI,Dg,NI,GC,HI,xg,KI,kC,xI,LC,_I,TC,rI,jC,Ag,iC,nI,Ug,EI,Kg,mg,bC;Object.defineProperty(g,"__esModule",{value:!0}),g.InkEditor=void 0;var C=A(1),l=A(4),G=A(5);const B=16,Wg=class extends l.AnnotationEditor{constructor(eI){super({...eI,name:"inkEditor"});DI(this,d);DI(this,u);DI(this,J);DI(this,XI);DI(this,kI);DI(this,JI);DI(this,UI);DI(this,QI);DI(this,sI);DI(this,X);DI(this,P);DI(this,aI);DI(this,i);DI(this,Z);DI(this,s);DI(this,N);DI(this,oI);DI(this,NI);DI(this,HI);DI(this,xI);DI(this,_I);DI(this,rI);DI(this,Ag);DI(this,nI);DI(this,EI);DI(this,mg);DI(this,n,0);DI(this,a,0);DI(this,w,0);DI(this,L,this.canvasContextMenu.bind(this));DI(this,Q,this.canvasPointermove.bind(this));DI(this,S,this.canvasPointerleave.bind(this));DI(this,y,this.canvasPointerup.bind(this));DI(this,M,this.canvasPointerdown.bind(this));DI(this,F,new Path2D);DI(this,z,!1);DI(this,O,!1);DI(this,D,!1);DI(this,R,null);DI(this,q,0);DI(this,II,0);DI(this,t,null);this.color=eI.color||null,this.thickness=eI.thickness||null,this.opacity=eI.opacity||null,this.paths=[],this.bezierPath2D=[],this.allRawPaths=[],this.currentPath=[],this.scaleFactor=1,this.translationX=this.translationY=0,this.x=0,this.y=0}static initialize(eI){this._l10nPromise=new Map(["editor_ink_canvas_aria_label","editor_ink2_aria_label"].map(jI=>[jI,eI.get(jI)]))}static updateDefaultParams(eI,jI){switch(eI){case C.AnnotationEditorParamsType.INK_THICKNESS:Wg._defaultThickness=jI;break;case C.AnnotationEditorParamsType.INK_COLOR:Wg._defaultColor=jI;break;case C.AnnotationEditorParamsType.INK_OPACITY:Wg._defaultOpacity=jI/100;break}}updateParams(eI,jI){switch(eI){case C.AnnotationEditorParamsType.INK_THICKNESS:tI(this,d,uC).call(this,jI);break;case C.AnnotationEditorParamsType.INK_COLOR:tI(this,u,eC).call(this,jI);break;case C.AnnotationEditorParamsType.INK_OPACITY:tI(this,J,DC).call(this,jI);break}}static get defaultPropertiesToUpdate(){return[[C.AnnotationEditorParamsType.INK_THICKNESS,Wg._defaultThickness],[C.AnnotationEditorParamsType.INK_COLOR,Wg._defaultColor||l.AnnotationEditor._defaultLineColor],[C.AnnotationEditorParamsType.INK_OPACITY,Math.round(Wg._defaultOpacity*100)]]}get propertiesToUpdate(){return[[C.AnnotationEditorParamsType.INK_THICKNESS,this.thickness||Wg._defaultThickness],[C.AnnotationEditorParamsType.INK_COLOR,this.color||Wg._defaultColor||l.AnnotationEditor._defaultLineColor],[C.AnnotationEditorParamsType.INK_OPACITY,Math.round(100*(this.opacity??Wg._defaultOpacity))]]}rebuild(){super.rebuild(),this.div!==null&&(this.canvas||(tI(this,s,Qg).call(this),tI(this,N,Og).call(this)),this.isAttachedToDOM||(this.parent.add(this),tI(this,oI,Dg).call(this)),tI(this,EI,Kg).call(this))}remove(){this.canvas!==null&&(this.isEmpty()||this.commit(),this.canvas.width=this.canvas.height=0,this.canvas.remove(),this.canvas=null,V(this,R).disconnect(),OI(this,R,null),super.remove())}setParent(eI){!this.parent&&eI?this._uiManager.removeShouldRescale(this):this.parent&&eI===null&&this._uiManager.addShouldRescale(this),super.setParent(eI)}onScaleChanging(){const[eI,jI]=this.parentDimensions,PI=this.width*eI,qI=this.height*jI;this.setDimensions(PI,qI)}enableEditMode(){V(this,z)||this.canvas===null||(super.enableEditMode(),this.div.draggable=!1,this.canvas.addEventListener("pointerdown",V(this,M)))}disableEditMode(){!this.isInEditMode()||this.canvas===null||(super.disableEditMode(),this.div.draggable=!this.isEmpty(),this.div.classList.remove("editing"),this.canvas.removeEventListener("pointerdown",V(this,M)))}onceAdded(){this.div.draggable=!this.isEmpty()}isEmpty(){return this.paths.length===0||this.paths.length===1&&this.paths[0].length===0}commit(){V(this,z)||(super.commit(),this.isEditing=!1,this.disableEditMode(),this.setInForeground(),OI(this,z,!0),this.div.classList.add("disabled"),tI(this,EI,Kg).call(this,!0),this.parent.addInkEditorIfNeeded(!0),this.parent.moveEditorInDOM(this),this.div.focus({preventScroll:!0}))}focusin(eI){super.focusin(eI),this.enableEditMode()}canvasPointerdown(eI){eI.button!==0||!this.isInEditMode()||V(this,z)||(this.setInForeground(),eI.preventDefault(),eI.type!=="mouse"&&this.div.focus(),tI(this,JI,tC).call(this,eI.offsetX,eI.offsetY))}canvasContextMenu(eI){eI.preventDefault()}canvasPointermove(eI){eI.preventDefault(),tI(this,UI,dC).call(this,eI.offsetX,eI.offsetY)}canvasPointerup(eI){eI.preventDefault(),tI(this,Z,cC).call(this,eI)}canvasPointerleave(eI){tI(this,Z,cC).call(this,eI)}render(){if(this.div)return this.div;let eI,jI;this.width&&(eI=this.x,jI=this.y),super.render(),Wg._l10nPromise.get("editor_ink2_aria_label").then(lg=>{var gg;return(gg=this.div)==null?void 0:gg.setAttribute("aria-label",lg)});const[PI,qI,$I,Cg]=tI(this,XI,KC).call(this);if(this.setAt(PI,qI,0,0),this.setDims($I,Cg),tI(this,s,Qg).call(this),this.width){const[lg,gg]=this.parentDimensions;this.setAt(eI*lg,jI*gg,this.width*lg,this.height*gg),OI(this,D,!0),tI(this,oI,Dg).call(this),this.setDims(this.width*lg,this.height*gg),tI(this,i,Rg).call(this),tI(this,mg,bC).call(this),this.div.classList.add("disabled")}else this.div.classList.add("editing"),this.enableEditMode();return tI(this,N,Og).call(this),this.div}setDimensions(eI,jI){const PI=Math.round(eI),qI=Math.round(jI);if(V(this,q)===PI&&V(this,II)===qI)return;OI(this,q,PI),OI(this,II,qI),this.canvas.style.visibility="hidden",V(this,n)&&Math.abs(V(this,n)-eI/jI)>.01&&(jI=Math.ceil(eI/V(this,n)),this.setDims(eI,jI));const[$I,Cg]=this.parentDimensions;this.width=eI/$I,this.height=jI/Cg,V(this,z)&&tI(this,NI,GC).call(this,eI,jI),tI(this,oI,Dg).call(this),tI(this,i,Rg).call(this),this.canvas.style.visibility="visible",this.fixDims()}static deserialize(eI,jI,PI){var ig,bg;const qI=super.deserialize(eI,jI,PI);qI.thickness=eI.thickness,qI.color=C.Util.makeHexColor(...eI.color),qI.opacity=eI.opacity;const[$I,Cg]=qI.pageDimensions,lg=qI.width*$I,gg=qI.height*Cg,Gg=qI.parentScale,Zg=eI.thickness/2;OI(qI,n,lg/gg),OI(qI,z,!0),OI(qI,q,Math.round(lg)),OI(qI,II,Math.round(gg));for(const{bezier:Bg}of eI.paths){const ag=[];qI.paths.push(ag);let Yg=Gg*(Bg[0]-Zg),og=Gg*(gg-Bg[1]-Zg);for(let Vg=2,Sg=Bg.length;Vg<Sg;Vg+=6){const Fg=Gg*(Bg[Vg]-Zg),Jg=Gg*(gg-Bg[Vg+1]-Zg),zg=Gg*(Bg[Vg+2]-Zg),kg=Gg*(gg-Bg[Vg+3]-Zg),WC=Gg*(Bg[Vg+4]-Zg),BC=Gg*(gg-Bg[Vg+5]-Zg);ag.push([[Yg,og],[Fg,Jg],[zg,kg],[WC,BC]]),Yg=WC,og=BC}const Ng=tI(this,KI,kC).call(this,ag);qI.bezierPath2D.push(Ng)}const dg=tI(ig=qI,Ag,iC).call(ig);return OI(qI,w,Math.max(B,dg[2]-dg[0])),OI(qI,a,Math.max(B,dg[3]-dg[1])),tI(bg=qI,NI,GC).call(bg,lg,gg),qI}serialize(){if(this.isEmpty())return null;const eI=this.getRect(0,0),jI=this.rotation%180===0?eI[3]-eI[1]:eI[2]-eI[0],PI=l.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);return{annotationType:C.AnnotationEditorType.INK,color:PI,thickness:this.thickness,opacity:this.opacity,paths:tI(this,xI,LC).call(this,this.scaleFactor/this.parentScale,this.translationX,this.translationY,jI),pageIndex:this.pageIndex,rect:eI,rotation:this.rotation}}};let k=Wg;n=new WeakMap,a=new WeakMap,w=new WeakMap,L=new WeakMap,Q=new WeakMap,S=new WeakMap,y=new WeakMap,M=new WeakMap,F=new WeakMap,z=new WeakMap,O=new WeakMap,D=new WeakMap,R=new WeakMap,q=new WeakMap,II=new WeakMap,t=new WeakMap,d=new WeakSet,uC=function(eI){const jI=this.thickness;this.addCommands({cmd:()=>{this.thickness=eI,tI(this,EI,Kg).call(this)},undo:()=>{this.thickness=jI,tI(this,EI,Kg).call(this)},mustExec:!0,type:C.AnnotationEditorParamsType.INK_THICKNESS,overwriteIfSameType:!0,keepUndo:!0})},u=new WeakSet,eC=function(eI){const jI=this.color;this.addCommands({cmd:()=>{this.color=eI,tI(this,i,Rg).call(this)},undo:()=>{this.color=jI,tI(this,i,Rg).call(this)},mustExec:!0,type:C.AnnotationEditorParamsType.INK_COLOR,overwriteIfSameType:!0,keepUndo:!0})},J=new WeakSet,DC=function(eI){eI/=100;const jI=this.opacity;this.addCommands({cmd:()=>{this.opacity=eI,tI(this,i,Rg).call(this)},undo:()=>{this.opacity=jI,tI(this,i,Rg).call(this)},mustExec:!0,type:C.AnnotationEditorParamsType.INK_OPACITY,overwriteIfSameType:!0,keepUndo:!0})},XI=new WeakSet,KC=function(){const{parentRotation:eI,parentDimensions:[jI,PI]}=this;switch(eI){case 90:return[0,PI,PI,jI];case 180:return[jI,PI,jI,PI];case 270:return[jI,0,PI,jI];default:return[0,0,jI,PI]}},kI=new WeakSet,ZC=function(){const{ctx:eI,color:jI,opacity:PI,thickness:qI,parentScale:$I,scaleFactor:Cg}=this;eI.lineWidth=qI*$I/Cg,eI.lineCap="round",eI.lineJoin="round",eI.miterLimit=10,eI.strokeStyle=`${jI}${(0,G.opacityToHex)(PI)}`},JI=new WeakSet,tC=function(eI,jI){this.canvas.addEventListener("contextmenu",V(this,L)),this.canvas.addEventListener("pointerleave",V(this,S)),this.canvas.addEventListener("pointermove",V(this,Q)),this.canvas.addEventListener("pointerup",V(this,y)),this.canvas.removeEventListener("pointerdown",V(this,M)),this.isEditing=!0,V(this,D)||(OI(this,D,!0),tI(this,oI,Dg).call(this),this.thickness||(this.thickness=Wg._defaultThickness),this.color||(this.color=Wg._defaultColor||l.AnnotationEditor._defaultLineColor),this.opacity??(this.opacity=Wg._defaultOpacity)),this.currentPath.push([eI,jI]),OI(this,O,!1),tI(this,kI,ZC).call(this),OI(this,t,()=>{tI(this,X,FC).call(this),V(this,t)&&window.requestAnimationFrame(V(this,t))}),window.requestAnimationFrame(V(this,t))},UI=new WeakSet,dC=function(eI,jI){const[PI,qI]=this.currentPath.at(-1);if(this.currentPath.length>1&&eI===PI&&jI===qI)return;const $I=this.currentPath;let Cg=V(this,F);if($I.push([eI,jI]),OI(this,O,!0),$I.length<=2){Cg.moveTo(...$I[0]),Cg.lineTo(eI,jI);return}$I.length===3&&(OI(this,F,Cg=new Path2D),Cg.moveTo(...$I[0])),tI(this,P,JC).call(this,Cg,...$I.at(-3),...$I.at(-2),eI,jI)},QI=new WeakSet,pC=function(){if(this.currentPath.length===0)return;const eI=this.currentPath.at(-1);V(this,F).lineTo(...eI)},sI=new WeakSet,SC=function(eI,jI){OI(this,t,null),eI=Math.min(Math.max(eI,0),this.canvas.width),jI=Math.min(Math.max(jI,0),this.canvas.height),tI(this,UI,dC).call(this,eI,jI),tI(this,QI,pC).call(this);let PI;if(this.currentPath.length!==1)PI=tI(this,aI,zC).call(this);else{const gg=[eI,jI];PI=[[gg,gg.slice(),gg.slice(),gg]]}const qI=V(this,F),$I=this.currentPath;this.currentPath=[],OI(this,F,new Path2D);const Cg=()=>{this.allRawPaths.push($I),this.paths.push(PI),this.bezierPath2D.push(qI),this.rebuild()},lg=()=>{this.allRawPaths.pop(),this.paths.pop(),this.bezierPath2D.pop(),this.paths.length===0?this.remove():(this.canvas||(tI(this,s,Qg).call(this),tI(this,N,Og).call(this)),tI(this,EI,Kg).call(this))};this.addCommands({cmd:Cg,undo:lg,mustExec:!0})},X=new WeakSet,FC=function(){if(!V(this,O))return;OI(this,O,!1);const eI=Math.ceil(this.thickness*this.parentScale),jI=this.currentPath.slice(-3),PI=jI.map(Cg=>Cg[0]),qI=jI.map(Cg=>Cg[1]);Math.min(...PI)-eI,Math.max(...PI)+eI,Math.min(...qI)-eI,Math.max(...qI)+eI;const{ctx:$I}=this;$I.save(),$I.clearRect(0,0,this.canvas.width,this.canvas.height);for(const Cg of this.bezierPath2D)$I.stroke(Cg);$I.stroke(V(this,F)),$I.restore()},P=new WeakSet,JC=function(eI,jI,PI,qI,$I,Cg,lg){const gg=(jI+qI)/2,Gg=(PI+$I)/2,Zg=(qI+Cg)/2,dg=($I+lg)/2;eI.bezierCurveTo(gg+2*(qI-gg)/3,Gg+2*($I-Gg)/3,Zg+2*(qI-Zg)/3,dg+2*($I-dg)/3,Zg,dg)},aI=new WeakSet,zC=function(){const eI=this.currentPath;if(eI.length<=2)return[[eI[0],eI[0],eI.at(-1),eI.at(-1)]];const jI=[];let PI,[qI,$I]=eI[0];for(PI=1;PI<eI.length-2;PI++){const[ig,bg]=eI[PI],[Bg,ag]=eI[PI+1],Yg=(ig+Bg)/2,og=(bg+ag)/2,Ng=[qI+2*(ig-qI)/3,$I+2*(bg-$I)/3],Vg=[Yg+2*(ig-Yg)/3,og+2*(bg-og)/3];jI.push([[qI,$I],Ng,Vg,[Yg,og]]),[qI,$I]=[Yg,og]}const[Cg,lg]=eI[PI],[gg,Gg]=eI[PI+1],Zg=[qI+2*(Cg-qI)/3,$I+2*(lg-$I)/3],dg=[gg+2*(Cg-gg)/3,Gg+2*(lg-Gg)/3];return jI.push([[qI,$I],Zg,dg,[gg,Gg]]),jI},i=new WeakSet,Rg=function(){if(this.isEmpty()){tI(this,HI,xg).call(this);return}tI(this,kI,ZC).call(this);const{canvas:eI,ctx:jI}=this;jI.setTransform(1,0,0,1,0,0),jI.clearRect(0,0,eI.width,eI.height),tI(this,HI,xg).call(this);for(const PI of this.bezierPath2D)jI.stroke(PI)},Z=new WeakSet,cC=function(eI){this.canvas.removeEventListener("pointerleave",V(this,S)),this.canvas.removeEventListener("pointermove",V(this,Q)),this.canvas.removeEventListener("pointerup",V(this,y)),this.canvas.addEventListener("pointerdown",V(this,M)),setTimeout(()=>{this.canvas.removeEventListener("contextmenu",V(this,L))},10),tI(this,sI,SC).call(this,eI.offsetX,eI.offsetY),this.addToAnnotationStorage(),this.setInBackground()},s=new WeakSet,Qg=function(){this.canvas=document.createElement("canvas"),this.canvas.width=this.canvas.height=0,this.canvas.className="inkEditorCanvas",Wg._l10nPromise.get("editor_ink_canvas_aria_label").then(eI=>{var jI;return(jI=this.canvas)==null?void 0:jI.setAttribute("aria-label",eI)}),this.div.append(this.canvas),this.ctx=this.canvas.getContext("2d")},N=new WeakSet,Og=function(){OI(this,R,new ResizeObserver(eI=>{const jI=eI[0].contentRect;jI.width&&jI.height&&this.setDimensions(jI.width,jI.height)})),V(this,R).observe(this.div)},oI=new WeakSet,Dg=function(){if(!V(this,D))return;const[eI,jI]=this.parentDimensions;this.canvas.width=Math.ceil(this.width*eI),this.canvas.height=Math.ceil(this.height*jI),tI(this,HI,xg).call(this)},NI=new WeakSet,GC=function(eI,jI){const PI=tI(this,nI,Ug).call(this),qI=(eI-PI)/V(this,w),$I=(jI-PI)/V(this,a);this.scaleFactor=Math.min(qI,$I)},HI=new WeakSet,xg=function(){const eI=tI(this,nI,Ug).call(this)/2;this.ctx.setTransform(this.scaleFactor,0,0,this.scaleFactor,this.translationX*this.scaleFactor+eI,this.translationY*this.scaleFactor+eI)},KI=new WeakSet,kC=function(eI){const jI=new Path2D;for(let PI=0,qI=eI.length;PI<qI;PI++){const[$I,Cg,lg,gg]=eI[PI];PI===0&&jI.moveTo(...$I),jI.bezierCurveTo(Cg[0],Cg[1],lg[0],lg[1],gg[0],gg[1])}return jI},xI=new WeakSet,LC=function(eI,jI,PI,qI){const Cg=[],lg=this.thickness/2;let gg,Gg;for(const Zg of this.paths){gg=[],Gg=[];for(let dg=0,ig=Zg.length;dg<ig;dg++){const[bg,Bg,ag,Yg]=Zg[dg],og=eI*(bg[0]+jI)+lg,Ng=qI-eI*(bg[1]+PI)-lg,Vg=eI*(Bg[0]+jI)+lg,Sg=qI-eI*(Bg[1]+PI)-lg,Fg=eI*(ag[0]+jI)+lg,Jg=qI-eI*(ag[1]+PI)-lg,zg=eI*(Yg[0]+jI)+lg,kg=qI-eI*(Yg[1]+PI)-lg;dg===0&&(gg.push(og,Ng),Gg.push(og,Ng)),gg.push(Vg,Sg,Fg,Jg,zg,kg),tI(this,_I,TC).call(this,og,Ng,Vg,Sg,Fg,Jg,zg,kg,4,Gg)}Cg.push({bezier:gg,points:Gg})}return Cg},_I=new WeakSet,TC=function(eI,jI,PI,qI,$I,Cg,lg,gg,Gg,Zg){if(tI(this,rI,jC).call(this,eI,jI,PI,qI,$I,Cg,lg,gg)){Zg.push(lg,gg);return}for(let dg=1;dg<Gg-1;dg++){const ig=dg/Gg,bg=1-ig;let Bg=ig*eI+bg*PI,ag=ig*jI+bg*qI,Yg=ig*PI+bg*$I,og=ig*qI+bg*Cg;const Ng=ig*$I+bg*lg,Vg=ig*Cg+bg*gg;Bg=ig*Bg+bg*Yg,ag=ig*ag+bg*og,Yg=ig*Yg+bg*Ng,og=ig*og+bg*Vg,Bg=ig*Bg+bg*Yg,ag=ig*ag+bg*og,Zg.push(Bg,ag)}Zg.push(lg,gg)},rI=new WeakSet,jC=function(eI,jI,PI,qI,$I,Cg,lg,gg){const Zg=(3*PI-2*eI-lg)**2,dg=(3*qI-2*jI-gg)**2,ig=(3*$I-eI-2*lg)**2,bg=(3*Cg-jI-2*gg)**2;return Math.max(Zg,ig)+Math.max(dg,bg)<=10},Ag=new WeakSet,iC=function(){let eI=1/0,jI=-1/0,PI=1/0,qI=-1/0;for(const $I of this.paths)for(const[Cg,lg,gg,Gg]of $I){const Zg=C.Util.bezierBoundingBox(...Cg,...lg,...gg,...Gg);eI=Math.min(eI,Zg[0]),PI=Math.min(PI,Zg[1]),jI=Math.max(jI,Zg[2]),qI=Math.max(qI,Zg[3])}return[eI,PI,jI,qI]},nI=new WeakSet,Ug=function(){return V(this,z)?Math.ceil(this.thickness*this.parentScale):0},EI=new WeakSet,Kg=function(eI=!1){if(this.isEmpty())return;if(!V(this,z)){tI(this,i,Rg).call(this);return}const jI=tI(this,Ag,iC).call(this),PI=tI(this,nI,Ug).call(this);OI(this,w,Math.max(B,jI[2]-jI[0])),OI(this,a,Math.max(B,jI[3]-jI[1]));const qI=Math.ceil(PI+V(this,w)*this.scaleFactor),$I=Math.ceil(PI+V(this,a)*this.scaleFactor),[Cg,lg]=this.parentDimensions;this.width=qI/Cg,this.height=$I/lg,OI(this,n,qI/$I),tI(this,mg,bC).call(this);const gg=this.translationX,Gg=this.translationY;this.translationX=-jI[0],this.translationY=-jI[1],tI(this,oI,Dg).call(this),tI(this,i,Rg).call(this),OI(this,q,qI),OI(this,II,$I),this.setDims(qI,$I);const Zg=eI?PI/this.scaleFactor/2:0;this.translate(gg-this.translationX-Zg,Gg-this.translationY-Zg)},mg=new WeakSet,bC=function(){const{style:eI}=this.div;V(this,n)>=1?(eI.minHeight=`${B}px`,eI.minWidth=`${Math.round(V(this,n)*B)}px`):(eI.minWidth=`${B}px`,eI.minHeight=`${Math.round(B/V(this,n))}px`)},DI(k,KI),sg(k,"_defaultColor",null),sg(k,"_defaultOpacity",1),sg(k,"_defaultThickness",1),sg(k,"_l10nPromise"),sg(k,"_type","ink"),g.InkEditor=k},(I,g,A)=>{var fI,Mg,o,QC,P,sC,aI,mC;Object.defineProperty(g,"__esModule",{value:!0}),g.AnnotationLayer=void 0;var C=A(1),l=A(6),G=A(3),B=A(31),k=A(32);const n=1e3,a=9,w=new WeakSet;function L(W){return{width:W[2]-W[0],height:W[3]-W[1]}}class Q{static create(Z){switch(Z.data.annotationType){case C.AnnotationType.LINK:return new y(Z);case C.AnnotationType.TEXT:return new M(Z);case C.AnnotationType.WIDGET:switch(Z.data.fieldType){case"Tx":return new z(Z);case"Btn":return Z.data.radioButton?new D(Z):Z.data.checkBox?new O(Z):new R(Z);case"Ch":return new q(Z)}return new F(Z);case C.AnnotationType.POPUP:return new II(Z);case C.AnnotationType.FREETEXT:return new d(Z);case C.AnnotationType.LINE:return new b(Z);case C.AnnotationType.SQUARE:return new u(Z);case C.AnnotationType.CIRCLE:return new m(Z);case C.AnnotationType.POLYLINE:return new J(Z);case C.AnnotationType.CARET:return new XI(Z);case C.AnnotationType.INK:return new SI(Z);case C.AnnotationType.POLYGON:return new r(Z);case C.AnnotationType.HIGHLIGHT:return new kI(Z);case C.AnnotationType.UNDERLINE:return new FI(Z);case C.AnnotationType.SQUIGGLY:return new JI(Z);case C.AnnotationType.STRIKEOUT:return new LI(Z);case C.AnnotationType.STAMP:return new UI(Z);case C.AnnotationType.FILEATTACHMENT:return new TI(Z);default:return new S(Z)}}}class S{constructor(Z,{isRenderable:c=!1,ignoreBorder:s=!1,createQuadrilaterals:Y=!1}={}){this.isRenderable=c,this.data=Z.data,this.layer=Z.layer,this.page=Z.page,this.viewport=Z.viewport,this.linkService=Z.linkService,this.downloadManager=Z.downloadManager,this.imageResourcesPath=Z.imageResourcesPath,this.renderForms=Z.renderForms,this.svgFactory=Z.svgFactory,this.annotationStorage=Z.annotationStorage,this.enableScripting=Z.enableScripting,this.hasJSActions=Z.hasJSActions,this._fieldObjects=Z.fieldObjects,c&&(this.container=this._createContainer(s)),Y&&(this.quadrilaterals=this._createQuadrilaterals(s))}_createContainer(Z=!1){const{data:c,page:s,viewport:Y}=this,N=document.createElement("section");N.setAttribute("data-annotation-id",c.id),c.noRotate&&N.classList.add("norotate");const{pageWidth:j,pageHeight:oI,pageX:f,pageY:NI}=Y.rawDims,{width:hI,height:HI}=L(c.rect),uI=C.Util.normalizeRect([c.rect[0],s.view[3]-c.rect[1]+s.view[1],c.rect[2],s.view[3]-c.rect[3]+s.view[1]]);if(!Z&&c.borderStyle.width>0){N.style.borderWidth=`${c.borderStyle.width}px`;const zI=c.borderStyle.horizontalCornerRadius,xI=c.borderStyle.verticalCornerRadius;if(zI>0||xI>0){const _I=`calc(${zI}px * var(--scale-factor)) / calc(${xI}px * var(--scale-factor))`;N.style.borderRadius=_I}else if(this instanceof D){const _I=`calc(${hI}px * var(--scale-factor)) / calc(${HI}px * var(--scale-factor))`;N.style.borderRadius=_I}switch(c.borderStyle.style){case C.AnnotationBorderStyleType.SOLID:N.style.borderStyle="solid";break;case C.AnnotationBorderStyleType.DASHED:N.style.borderStyle="dashed";break;case C.AnnotationBorderStyleType.BEVELED:(0,C.warn)("Unimplemented border style: beveled");break;case C.AnnotationBorderStyleType.INSET:(0,C.warn)("Unimplemented border style: inset");break;case C.AnnotationBorderStyleType.UNDERLINE:N.style.borderBottomStyle="solid";break}const vI=c.borderColor||null;vI?N.style.borderColor=C.Util.makeHexColor(vI[0]|0,vI[1]|0,vI[2]|0):N.style.borderWidth=0}N.style.left=`${100*(uI[0]-f)/j}%`,N.style.top=`${100*(uI[1]-NI)/oI}%`;const{rotation:KI}=c;return c.hasOwnCanvas||KI===0?(N.style.width=`${100*hI/j}%`,N.style.height=`${100*HI/oI}%`):this.setRotation(KI,N),N}setRotation(Z,c=this.container){const{pageWidth:s,pageHeight:Y}=this.viewport.rawDims,{width:N,height:j}=L(this.data.rect);let oI,f;Z%180===0?(oI=100*N/s,f=100*j/Y):(oI=100*j/s,f=100*N/Y),c.style.width=`${oI}%`,c.style.height=`${f}%`,c.setAttribute("data-main-rotation",(360-Z)%360)}get _commonActions(){const Z=(c,s,Y)=>{const N=Y.detail[c];Y.target.style[s]=B.ColorConverters[`${N[0]}_HTML`](N.slice(1))};return(0,C.shadow)(this,"_commonActions",{display:c=>{const s=c.detail.display%2===1;this.container.style.visibility=s?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{hidden:s,print:c.detail.display===0||c.detail.display===3})},print:c=>{this.annotationStorage.setValue(this.data.id,{print:c.detail.print})},hidden:c=>{this.container.style.visibility=c.detail.hidden?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{hidden:c.detail.hidden})},focus:c=>{setTimeout(()=>c.target.focus({preventScroll:!1}),0)},userName:c=>{c.target.title=c.detail.userName},readonly:c=>{c.detail.readonly?c.target.setAttribute("readonly",""):c.target.removeAttribute("readonly")},required:c=>{this._setRequired(c.target,c.detail.required)},bgColor:c=>{Z("bgColor","backgroundColor",c)},fillColor:c=>{Z("fillColor","backgroundColor",c)},fgColor:c=>{Z("fgColor","color",c)},textColor:c=>{Z("textColor","color",c)},borderColor:c=>{Z("borderColor","borderColor",c)},strokeColor:c=>{Z("strokeColor","borderColor",c)},rotation:c=>{const s=c.detail.rotation;this.setRotation(s),this.annotationStorage.setValue(this.data.id,{rotation:s})}})}_dispatchEventFromSandbox(Z,c){const s=this._commonActions;for(const Y of Object.keys(c.detail)){const N=Z[Y]||s[Y];N==null||N(c)}}_setDefaultPropertiesFromJS(Z){if(!this.enableScripting)return;const c=this.annotationStorage.getRawValue(this.data.id);if(!c)return;const s=this._commonActions;for(const[Y,N]of Object.entries(c)){const j=s[Y];if(j){const oI={detail:{[Y]:N},target:Z};j(oI),delete c[Y]}}}_createQuadrilaterals(Z=!1){if(!this.data.quadPoints)return null;const c=[],s=this.data.rect;for(const Y of this.data.quadPoints)this.data.rect=[Y[2].x,Y[2].y,Y[1].x,Y[1].y],c.push(this._createContainer(Z));return this.data.rect=s,c}_createPopup(Z,c){let s=this.container;this.quadrilaterals&&(Z||(Z=this.quadrilaterals),s=this.quadrilaterals[0]),Z||(Z=document.createElement("div"),Z.classList.add("popupTriggerArea"),s.append(Z));const N=new t({container:s,trigger:Z,color:c.color,titleObj:c.titleObj,modificationDate:c.modificationDate,contentsObj:c.contentsObj,richText:c.richText,hideWrapper:!0}).render();N.style.left="100%",s.append(N)}_renderQuadrilaterals(Z){for(const c of this.quadrilaterals)c.classList.add(Z);return this.quadrilaterals}render(){(0,C.unreachable)("Abstract method `AnnotationElement.render` called")}_getElementsByName(Z,c=null){const s=[];if(this._fieldObjects){const Y=this._fieldObjects[Z];if(Y)for(const{page:N,id:j,exportValues:oI}of Y){if(N===-1||j===c)continue;const f=typeof oI=="string"?oI:null,NI=document.querySelector(`[data-element-id="${j}"]`);if(NI&&!w.has(NI)){(0,C.warn)(`_getElementsByName - element not allowed: ${j}`);continue}s.push({id:j,exportValue:f,domElement:NI})}return s}for(const Y of document.getElementsByName(Z)){const{exportValue:N}=Y,j=Y.getAttribute("data-element-id");j!==c&&w.has(Y)&&s.push({id:j,exportValue:N,domElement:Y})}return s}}class y extends S{constructor(c,s=null){super(c,{isRenderable:!0,ignoreBorder:!!(s!=null&&s.ignoreBorder),createQuadrilaterals:!0});DI(this,fI);DI(this,o);this.isTooltipOnly=c.data.isTooltipOnly}render(){const{data:c,linkService:s}=this,Y=document.createElement("a");Y.setAttribute("data-element-id",c.id);let N=!1;return c.url?(s.addLinkAttributes(Y,c.url,c.newWindow),N=!0):c.action?(this._bindNamedAction(Y,c.action),N=!0):c.attachment?(this._bindAttachment(Y,c.attachment),N=!0):c.setOCGState?(tI(this,o,QC).call(this,Y,c.setOCGState),N=!0):c.dest?(this._bindLink(Y,c.dest),N=!0):(c.actions&&(c.actions.Action||c.actions["Mouse Up"]||c.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(this._bindJSAction(Y,c),N=!0),c.resetForm?(this._bindResetFormAction(Y,c.resetForm),N=!0):this.isTooltipOnly&&!N&&(this._bindLink(Y,""),N=!0)),this.quadrilaterals?this._renderQuadrilaterals("linkAnnotation").map((j,oI)=>{const f=oI===0?Y:Y.cloneNode();return j.append(f),j}):(this.container.classList.add("linkAnnotation"),N&&this.container.append(Y),this.container)}_bindLink(c,s){c.href=this.linkService.getDestinationHash(s),c.onclick=()=>(s&&this.linkService.goToDestination(s),!1),(s||s==="")&&tI(this,fI,Mg).call(this)}_bindNamedAction(c,s){c.href=this.linkService.getAnchorUrl(""),c.onclick=()=>(this.linkService.executeNamedAction(s),!1),tI(this,fI,Mg).call(this)}_bindAttachment(c,s){c.href=this.linkService.getAnchorUrl(""),c.onclick=()=>{var Y;return(Y=this.downloadManager)==null||Y.openOrDownloadData(this.container,s.content,s.filename),!1},tI(this,fI,Mg).call(this)}_bindJSAction(c,s){c.href=this.linkService.getAnchorUrl("");const Y=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]);for(const N of Object.keys(s.actions)){const j=Y.get(N);j&&(c[j]=()=>{var oI;return(oI=this.linkService.eventBus)==null||oI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:s.id,name:N}}),!1})}c.onclick||(c.onclick=()=>!1),tI(this,fI,Mg).call(this)}_bindResetFormAction(c,s){const Y=c.onclick;if(Y||(c.href=this.linkService.getAnchorUrl("")),tI(this,fI,Mg).call(this),!this._fieldObjects){(0,C.warn)('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),Y||(c.onclick=()=>!1);return}c.onclick=()=>{var HI;Y==null||Y();const{fields:N,refs:j,include:oI}=s,f=[];if(N.length!==0||j.length!==0){const uI=new Set(j);for(const KI of N){const zI=this._fieldObjects[KI]||[];for(const{id:xI}of zI)uI.add(xI)}for(const KI of Object.values(this._fieldObjects))for(const zI of KI)uI.has(zI.id)===oI&&f.push(zI)}else for(const uI of Object.values(this._fieldObjects))f.push(...uI);const NI=this.annotationStorage,hI=[];for(const uI of f){const{id:KI}=uI;switch(hI.push(KI),uI.type){case"text":{const xI=uI.defaultValue||"";NI.setValue(KI,{value:xI});break}case"checkbox":case"radiobutton":{const xI=uI.defaultValue===uI.exportValues;NI.setValue(KI,{value:xI});break}case"combobox":case"listbox":{const xI=uI.defaultValue||"";NI.setValue(KI,{value:xI});break}default:continue}const zI=document.querySelector(`[data-element-id="${KI}"]`);if(zI){if(!w.has(zI)){(0,C.warn)(`_bindResetFormAction - element not allowed: ${KI}`);continue}}else continue;zI.dispatchEvent(new Event("resetform"))}return this.enableScripting&&((HI=this.linkService.eventBus)==null||HI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:"app",ids:hI,name:"ResetForm"}})),!1}}}fI=new WeakSet,Mg=function(){this.container.setAttribute("data-internal-link","")},o=new WeakSet,QC=function(c,s){c.href=this.linkService.getAnchorUrl(""),c.onclick=()=>(this.linkService.executeSetOCGState(s),!1),tI(this,fI,Mg).call(this)};class M extends S{constructor(Z){var s,Y,N;const c=!!(Z.data.hasPopup||(s=Z.data.titleObj)!=null&&s.str||(Y=Z.data.contentsObj)!=null&&Y.str||(N=Z.data.richText)!=null&&N.str);super(Z,{isRenderable:c})}render(){this.container.classList.add("textAnnotation");const Z=document.createElement("img");return Z.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",Z.alt="[{{type}} Annotation]",Z.dataset.l10nId="text_annotation_type",Z.dataset.l10nArgs=JSON.stringify({type:this.data.name}),this.data.hasPopup||this._createPopup(Z,this.data),this.container.append(Z),this.container}}class F extends S{render(){return this.data.alternativeText&&(this.container.title=this.data.alternativeText),this.container}showElementAndHideCanvas(Z){var c;this.data.hasOwnCanvas&&(((c=Z.previousSibling)==null?void 0:c.nodeName)==="CANVAS"&&(Z.previousSibling.hidden=!0),Z.hidden=!1)}_getKeyModifier(Z){const{isWin:c,isMac:s}=C.FeatureTest.platform;return c&&Z.ctrlKey||s&&Z.metaKey}_setEventListener(Z,c,s,Y){c.includes("mouse")?Z.addEventListener(c,N=>{var j;(j=this.linkService.eventBus)==null||j.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:s,value:Y(N),shift:N.shiftKey,modifier:this._getKeyModifier(N)}})}):Z.addEventListener(c,N=>{var j;(j=this.linkService.eventBus)==null||j.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:s,value:Y(N)}})})}_setEventListeners(Z,c,s){var Y;for(const[N,j]of c)(j==="Action"||(Y=this.data.actions)!=null&&Y[j])&&this._setEventListener(Z,N,j,s)}_setBackgroundColor(Z){const c=this.data.backgroundColor||null;Z.style.backgroundColor=c===null?"transparent":C.Util.makeHexColor(c[0],c[1],c[2])}_setTextStyle(Z){const c=["left","center","right"],{fontColor:s}=this.data.defaultAppearanceData,Y=this.data.defaultAppearanceData.fontSize||a,N=Z.style;let j;const oI=2,f=NI=>Math.round(10*NI)/10;if(this.data.multiLine){const NI=Math.abs(this.data.rect[3]-this.data.rect[1]-oI),hI=Math.round(NI/(C.LINE_FACTOR*Y))||1,HI=NI/hI;j=Math.min(Y,f(HI/C.LINE_FACTOR))}else{const NI=Math.abs(this.data.rect[3]-this.data.rect[1]-oI);j=Math.min(Y,f(NI/C.LINE_FACTOR))}N.fontSize=`calc(${j}px * var(--scale-factor))`,N.color=C.Util.makeHexColor(s[0],s[1],s[2]),this.data.textAlignment!==null&&(N.textAlign=c[this.data.textAlignment])}_setRequired(Z,c){c?Z.setAttribute("required",!0):Z.removeAttribute("required"),Z.setAttribute("aria-required",c)}}class z extends F{constructor(Z){const c=Z.renderForms||!Z.data.hasAppearance&&!!Z.data.fieldValue;super(Z,{isRenderable:c})}setPropertyOnSiblings(Z,c,s,Y){const N=this.annotationStorage;for(const j of this._getElementsByName(Z.name,Z.id))j.domElement&&(j.domElement[c]=s),N.setValue(j.id,{[Y]:s})}render(){var Y,N;const Z=this.annotationStorage,c=this.data.id;this.container.classList.add("textWidgetAnnotation");let s=null;if(this.renderForms){const j=Z.getValue(c,{value:this.data.fieldValue});let oI=j.value||"";const f=Z.getValue(c,{charLimit:this.data.maxLen}).charLimit;f&&oI.length>f&&(oI=oI.slice(0,f));let NI=j.formattedValue||((Y=this.data.textContent)==null?void 0:Y.join(`
`))||null;NI&&this.data.comb&&(NI=NI.replaceAll(/\s+/g,""));const hI={userValue:oI,formattedValue:NI,lastCommittedValue:null,commitKey:1};this.data.multiLine?(s=document.createElement("textarea"),s.textContent=NI??oI,this.data.doNotScroll&&(s.style.overflowY="hidden")):(s=document.createElement("input"),s.type="text",s.setAttribute("value",NI??oI),this.data.doNotScroll&&(s.style.overflowX="hidden")),this.data.hasOwnCanvas&&(s.hidden=!0),w.add(s),s.setAttribute("data-element-id",c),s.disabled=this.data.readOnly,s.name=this.data.fieldName,s.tabIndex=n,this._setRequired(s,this.data.required),f&&(s.maxLength=f),s.addEventListener("input",uI=>{Z.setValue(c,{value:uI.target.value}),this.setPropertyOnSiblings(s,"value",uI.target.value,"value"),hI.formattedValue=null}),s.addEventListener("resetform",uI=>{const KI=this.data.defaultFieldValue??"";s.value=hI.userValue=KI,hI.formattedValue=null});let HI=uI=>{const{formattedValue:KI}=hI;KI!=null&&(uI.target.value=KI),uI.target.scrollLeft=0};if(this.enableScripting&&this.hasJSActions){s.addEventListener("focus",KI=>{const{target:zI}=KI;hI.userValue&&(zI.value=hI.userValue),hI.lastCommittedValue=zI.value,hI.commitKey=1}),s.addEventListener("updatefromsandbox",KI=>{this.showElementAndHideCanvas(KI.target);const zI={value(xI){hI.userValue=xI.detail.value??"",Z.setValue(c,{value:hI.userValue.toString()}),xI.target.value=hI.userValue},formattedValue(xI){const{formattedValue:vI}=xI.detail;hI.formattedValue=vI,vI!=null&&xI.target!==document.activeElement&&(xI.target.value=vI),Z.setValue(c,{formattedValue:vI})},selRange(xI){xI.target.setSelectionRange(...xI.detail.selRange)},charLimit:xI=>{var rI;const{charLimit:vI}=xI.detail,{target:_I}=xI;if(vI===0){_I.removeAttribute("maxLength");return}_I.setAttribute("maxLength",vI);let yI=hI.userValue;!yI||yI.length<=vI||(yI=yI.slice(0,vI),_I.value=hI.userValue=yI,Z.setValue(c,{value:yI}),(rI=this.linkService.eventBus)==null||rI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:c,name:"Keystroke",value:yI,willCommit:!0,commitKey:1,selStart:_I.selectionStart,selEnd:_I.selectionEnd}}))}};this._dispatchEventFromSandbox(zI,KI)}),s.addEventListener("keydown",KI=>{var vI;hI.commitKey=1;let zI=-1;if(KI.key==="Escape"?zI=0:KI.key==="Enter"&&!this.data.multiLine?zI=2:KI.key==="Tab"&&(hI.commitKey=3),zI===-1)return;const{value:xI}=KI.target;hI.lastCommittedValue!==xI&&(hI.lastCommittedValue=xI,hI.userValue=xI,(vI=this.linkService.eventBus)==null||vI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:c,name:"Keystroke",value:xI,willCommit:!0,commitKey:zI,selStart:KI.target.selectionStart,selEnd:KI.target.selectionEnd}}))});const uI=HI;HI=null,s.addEventListener("blur",KI=>{var xI;if(!KI.relatedTarget)return;const{value:zI}=KI.target;hI.userValue=zI,hI.lastCommittedValue!==zI&&((xI=this.linkService.eventBus)==null||xI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:c,name:"Keystroke",value:zI,willCommit:!0,commitKey:hI.commitKey,selStart:KI.target.selectionStart,selEnd:KI.target.selectionEnd}})),uI(KI)}),(N=this.data.actions)!=null&&N.Keystroke&&s.addEventListener("beforeinput",KI=>{var Ag;hI.lastCommittedValue=null;const{data:zI,target:xI}=KI,{value:vI,selectionStart:_I,selectionEnd:yI}=xI;let rI=_I,Ig=yI;switch(KI.inputType){case"deleteWordBackward":{const pI=vI.substring(0,_I).match(/\w*[^\w]*$/);pI&&(rI-=pI[0].length);break}case"deleteWordForward":{const pI=vI.substring(_I).match(/^[^\w]*\w*/);pI&&(Ig+=pI[0].length);break}case"deleteContentBackward":_I===yI&&(rI-=1);break;case"deleteContentForward":_I===yI&&(Ig+=1);break}KI.preventDefault(),(Ag=this.linkService.eventBus)==null||Ag.dispatch("dispatcheventinsandbox",{source:this,detail:{id:c,name:"Keystroke",value:vI,change:zI||"",willCommit:!1,selStart:rI,selEnd:Ig}})}),this._setEventListeners(s,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],KI=>KI.target.value)}if(HI&&s.addEventListener("blur",HI),this.data.comb){const KI=(this.data.rect[2]-this.data.rect[0])/f;s.classList.add("comb"),s.style.letterSpacing=`calc(${KI}px * var(--scale-factor) - 1ch)`}}else s=document.createElement("div"),s.textContent=this.data.fieldValue,s.style.verticalAlign="middle",s.style.display="table-cell";return this._setTextStyle(s),this._setBackgroundColor(s),this._setDefaultPropertiesFromJS(s),this.container.append(s),this.container}}class O extends F{constructor(Z){super(Z,{isRenderable:Z.renderForms})}render(){const Z=this.annotationStorage,c=this.data,s=c.id;let Y=Z.getValue(s,{value:c.exportValue===c.fieldValue}).value;typeof Y=="string"&&(Y=Y!=="Off",Z.setValue(s,{value:Y})),this.container.classList.add("buttonWidgetAnnotation","checkBox");const N=document.createElement("input");return w.add(N),N.setAttribute("data-element-id",s),N.disabled=c.readOnly,this._setRequired(N,this.data.required),N.type="checkbox",N.name=c.fieldName,Y&&N.setAttribute("checked",!0),N.setAttribute("exportValue",c.exportValue),N.tabIndex=n,N.addEventListener("change",j=>{const{name:oI,checked:f}=j.target;for(const NI of this._getElementsByName(oI,s)){const hI=f&&NI.exportValue===c.exportValue;NI.domElement&&(NI.domElement.checked=hI),Z.setValue(NI.id,{value:hI})}Z.setValue(s,{value:f})}),N.addEventListener("resetform",j=>{const oI=c.defaultFieldValue||"Off";j.target.checked=oI===c.exportValue}),this.enableScripting&&this.hasJSActions&&(N.addEventListener("updatefromsandbox",j=>{const oI={value(f){f.target.checked=f.detail.value!=="Off",Z.setValue(s,{value:f.target.checked})}};this._dispatchEventFromSandbox(oI,j)}),this._setEventListeners(N,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],j=>j.target.checked)),this._setBackgroundColor(N),this._setDefaultPropertiesFromJS(N),this.container.append(N),this.container}}class D extends F{constructor(Z){super(Z,{isRenderable:Z.renderForms})}render(){this.container.classList.add("buttonWidgetAnnotation","radioButton");const Z=this.annotationStorage,c=this.data,s=c.id;let Y=Z.getValue(s,{value:c.fieldValue===c.buttonValue}).value;typeof Y=="string"&&(Y=Y!==c.buttonValue,Z.setValue(s,{value:Y}));const N=document.createElement("input");if(w.add(N),N.setAttribute("data-element-id",s),N.disabled=c.readOnly,this._setRequired(N,this.data.required),N.type="radio",N.name=c.fieldName,Y&&N.setAttribute("checked",!0),N.tabIndex=n,N.addEventListener("change",j=>{const{name:oI,checked:f}=j.target;for(const NI of this._getElementsByName(oI,s))Z.setValue(NI.id,{value:!1});Z.setValue(s,{value:f})}),N.addEventListener("resetform",j=>{const oI=c.defaultFieldValue;j.target.checked=oI!=null&&oI===c.buttonValue}),this.enableScripting&&this.hasJSActions){const j=c.buttonValue;N.addEventListener("updatefromsandbox",oI=>{const f={value:NI=>{const hI=j===NI.detail.value;for(const HI of this._getElementsByName(NI.target.name)){const uI=hI&&HI.id===s;HI.domElement&&(HI.domElement.checked=uI),Z.setValue(HI.id,{value:uI})}}};this._dispatchEventFromSandbox(f,oI)}),this._setEventListeners(N,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],oI=>oI.target.checked)}return this._setBackgroundColor(N),this._setDefaultPropertiesFromJS(N),this.container.append(N),this.container}}class R extends y{constructor(Z){super(Z,{ignoreBorder:Z.data.hasAppearance})}render(){const Z=super.render();Z.classList.add("buttonWidgetAnnotation","pushButton"),this.data.alternativeText&&(Z.title=this.data.alternativeText);const c=Z.lastChild;return this.enableScripting&&this.hasJSActions&&c&&(this._setDefaultPropertiesFromJS(c),c.addEventListener("updatefromsandbox",s=>{this._dispatchEventFromSandbox({},s)})),Z}}class q extends F{constructor(Z){super(Z,{isRenderable:Z.renderForms})}render(){this.container.classList.add("choiceWidgetAnnotation");const Z=this.annotationStorage,c=this.data.id,s=Z.getValue(c,{value:this.data.fieldValue}),Y=document.createElement("select");w.add(Y),Y.setAttribute("data-element-id",c),Y.disabled=this.data.readOnly,this._setRequired(Y,this.data.required),Y.name=this.data.fieldName,Y.tabIndex=n;let N=this.data.combo&&this.data.options.length>0;this.data.combo||(Y.size=this.data.options.length,this.data.multiSelect&&(Y.multiple=!0)),Y.addEventListener("resetform",hI=>{const HI=this.data.defaultFieldValue;for(const uI of Y.options)uI.selected=uI.value===HI});for(const hI of this.data.options){const HI=document.createElement("option");HI.textContent=hI.displayValue,HI.value=hI.exportValue,s.value.includes(hI.exportValue)&&(HI.setAttribute("selected",!0),N=!1),Y.append(HI)}let j=null;if(N){const hI=document.createElement("option");hI.value=" ",hI.setAttribute("hidden",!0),hI.setAttribute("selected",!0),Y.prepend(hI),j=()=>{hI.remove(),Y.removeEventListener("input",j),j=null},Y.addEventListener("input",j)}const oI=hI=>{const HI=hI?"value":"textContent",{options:uI,multiple:KI}=Y;return KI?Array.prototype.filter.call(uI,zI=>zI.selected).map(zI=>zI[HI]):uI.selectedIndex===-1?null:uI[uI.selectedIndex][HI]};let f=oI(!1);const NI=hI=>{const HI=hI.target.options;return Array.prototype.map.call(HI,uI=>({displayValue:uI.textContent,exportValue:uI.value}))};return this.enableScripting&&this.hasJSActions?(Y.addEventListener("updatefromsandbox",hI=>{const HI={value(uI){j==null||j();const KI=uI.detail.value,zI=new Set(Array.isArray(KI)?KI:[KI]);for(const xI of Y.options)xI.selected=zI.has(xI.value);Z.setValue(c,{value:oI(!0)}),f=oI(!1)},multipleSelection(uI){Y.multiple=!0},remove(uI){const KI=Y.options,zI=uI.detail.remove;KI[zI].selected=!1,Y.remove(zI),KI.length>0&&Array.prototype.findIndex.call(KI,vI=>vI.selected)===-1&&(KI[0].selected=!0),Z.setValue(c,{value:oI(!0),items:NI(uI)}),f=oI(!1)},clear(uI){for(;Y.length!==0;)Y.remove(0);Z.setValue(c,{value:null,items:[]}),f=oI(!1)},insert(uI){const{index:KI,displayValue:zI,exportValue:xI}=uI.detail.insert,vI=Y.children[KI],_I=document.createElement("option");_I.textContent=zI,_I.value=xI,vI?vI.before(_I):Y.append(_I),Z.setValue(c,{value:oI(!0),items:NI(uI)}),f=oI(!1)},items(uI){const{items:KI}=uI.detail;for(;Y.length!==0;)Y.remove(0);for(const zI of KI){const{displayValue:xI,exportValue:vI}=zI,_I=document.createElement("option");_I.textContent=xI,_I.value=vI,Y.append(_I)}Y.options.length>0&&(Y.options[0].selected=!0),Z.setValue(c,{value:oI(!0),items:NI(uI)}),f=oI(!1)},indices(uI){const KI=new Set(uI.detail.indices);for(const zI of uI.target.options)zI.selected=KI.has(zI.index);Z.setValue(c,{value:oI(!0)}),f=oI(!1)},editable(uI){uI.target.disabled=!uI.detail.editable}};this._dispatchEventFromSandbox(HI,hI)}),Y.addEventListener("input",hI=>{var uI;const HI=oI(!0);Z.setValue(c,{value:HI}),hI.preventDefault(),(uI=this.linkService.eventBus)==null||uI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:c,name:"Keystroke",value:f,changeEx:HI,willCommit:!1,commitKey:1,keyDown:!1}})}),this._setEventListeners(Y,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"],["input","Validate"]],hI=>hI.target.value)):Y.addEventListener("input",function(hI){Z.setValue(c,{value:oI(!0)})}),this.data.combo&&this._setTextStyle(Y),this._setBackgroundColor(Y),this._setDefaultPropertiesFromJS(Y),this.container.append(Y),this.container}}const T=class extends S{constructor(Z){var Y,N,j;const{data:c}=Z,s=!T.IGNORE_TYPES.has(c.parentType)&&!!((Y=c.titleObj)!=null&&Y.str||(N=c.contentsObj)!=null&&N.str||(j=c.richText)!=null&&j.str);super(Z,{isRenderable:s})}render(){this.container.classList.add("popupAnnotation");const Z=this.layer.querySelectorAll(`[data-annotation-id="${this.data.parentId}"]`);if(Z.length===0)return this.container;const c=new t({container:this.container,trigger:Array.from(Z),color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText}),s=this.page,Y=C.Util.normalizeRect([this.data.parentRect[0],s.view[3]-this.data.parentRect[1]+s.view[1],this.data.parentRect[2],s.view[3]-this.data.parentRect[3]+s.view[1]]),N=Y[0]+this.data.parentRect[2]-this.data.parentRect[0],j=Y[1],{pageWidth:oI,pageHeight:f,pageX:NI,pageY:hI}=this.viewport.rawDims;return this.container.style.left=`${100*(N-NI)/oI}%`,this.container.style.top=`${100*(j-hI)/f}%`,this.container.append(c.render()),this.container}};let II=T;sg(II,"IGNORE_TYPES",new Set(["Line","Square","Circle","PolyLine","Polygon","Ink"]));class t{constructor(Z){this.container=Z.container,this.trigger=Z.trigger,this.color=Z.color,this.titleObj=Z.titleObj,this.modificationDate=Z.modificationDate,this.contentsObj=Z.contentsObj,this.richText=Z.richText,this.hideWrapper=Z.hideWrapper||!1,this.pinned=!1}render(){var oI,f;const c=document.createElement("div");c.classList.add("popupWrapper"),this.hideElement=this.hideWrapper?c:this.container,this.hideElement.hidden=!0;const s=document.createElement("div");s.classList.add("popup");const Y=this.color;if(Y){const NI=.7*(255-Y[0])+Y[0],hI=.7*(255-Y[1])+Y[1],HI=.7*(255-Y[2])+Y[2];s.style.backgroundColor=C.Util.makeHexColor(NI|0,hI|0,HI|0)}const N=document.createElement("h1");N.dir=this.titleObj.dir,N.textContent=this.titleObj.str,s.append(N);const j=l.PDFDateString.toDateObject(this.modificationDate);if(j){const NI=document.createElement("span");NI.classList.add("popupDate"),NI.textContent="{{date}}, {{time}}",NI.dataset.l10nId="annotation_date_string",NI.dataset.l10nArgs=JSON.stringify({date:j.toLocaleDateString(),time:j.toLocaleTimeString()}),s.append(NI)}if((oI=this.richText)!=null&&oI.str&&(!((f=this.contentsObj)!=null&&f.str)||this.contentsObj.str===this.richText.str))k.XfaLayer.render({xfaHtml:this.richText.html,intent:"richText",div:s}),s.lastChild.classList.add("richText","popupContent");else{const NI=this._formatContents(this.contentsObj);s.append(NI)}Array.isArray(this.trigger)||(this.trigger=[this.trigger]);for(const NI of this.trigger)NI.addEventListener("click",this._toggle.bind(this)),NI.addEventListener("mouseover",this._show.bind(this,!1)),NI.addEventListener("mouseout",this._hide.bind(this,!1));return s.addEventListener("click",this._hide.bind(this,!0)),c.append(s),c}_formatContents({str:Z,dir:c}){const s=document.createElement("p");s.classList.add("popupContent"),s.dir=c;const Y=Z.split(/(?:\r\n?|\n)/);for(let N=0,j=Y.length;N<j;++N){const oI=Y[N];s.append(document.createTextNode(oI)),N<j-1&&s.append(document.createElement("br"))}return s}_toggle(){this.pinned?this._hide(!0):this._show(!0)}_show(Z=!1){Z&&(this.pinned=!0),this.hideElement.hidden&&(this.hideElement.hidden=!1,this.container.style.zIndex=parseInt(this.container.style.zIndex)+1e3)}_hide(Z=!0){Z&&(this.pinned=!1),!this.hideElement.hidden&&!this.pinned&&(this.hideElement.hidden=!0,this.container.style.zIndex=parseInt(this.container.style.zIndex)-1e3)}}class d extends S{constructor(Z){var s,Y,N;const c=!!(Z.data.hasPopup||(s=Z.data.titleObj)!=null&&s.str||(Y=Z.data.contentsObj)!=null&&Y.str||(N=Z.data.richText)!=null&&N.str);super(Z,{isRenderable:c,ignoreBorder:!0}),this.textContent=Z.data.textContent}render(){if(this.container.classList.add("freeTextAnnotation"),this.textContent){const Z=document.createElement("div");Z.classList.add("annotationTextContent"),Z.setAttribute("role","comment");for(const c of this.textContent){const s=document.createElement("span");s.textContent=c,Z.append(s)}this.container.append(Z)}return this.data.hasPopup||this._createPopup(null,this.data),this.container}}class b extends S{constructor(Z){var s,Y,N;const c=!!(Z.data.hasPopup||(s=Z.data.titleObj)!=null&&s.str||(Y=Z.data.contentsObj)!=null&&Y.str||(N=Z.data.richText)!=null&&N.str);super(Z,{isRenderable:c,ignoreBorder:!0})}render(){this.container.classList.add("lineAnnotation");const Z=this.data,{width:c,height:s}=L(Z.rect),Y=this.svgFactory.create(c,s,!0),N=this.svgFactory.createElement("svg:line");return N.setAttribute("x1",Z.rect[2]-Z.lineCoordinates[0]),N.setAttribute("y1",Z.rect[3]-Z.lineCoordinates[1]),N.setAttribute("x2",Z.rect[2]-Z.lineCoordinates[2]),N.setAttribute("y2",Z.rect[3]-Z.lineCoordinates[3]),N.setAttribute("stroke-width",Z.borderStyle.width||1),N.setAttribute("stroke","transparent"),N.setAttribute("fill","transparent"),Y.append(N),this.container.append(Y),this._createPopup(N,Z),this.container}}class u extends S{constructor(Z){var s,Y,N;const c=!!(Z.data.hasPopup||(s=Z.data.titleObj)!=null&&s.str||(Y=Z.data.contentsObj)!=null&&Y.str||(N=Z.data.richText)!=null&&N.str);super(Z,{isRenderable:c,ignoreBorder:!0})}render(){this.container.classList.add("squareAnnotation");const Z=this.data,{width:c,height:s}=L(Z.rect),Y=this.svgFactory.create(c,s,!0),N=Z.borderStyle.width,j=this.svgFactory.createElement("svg:rect");return j.setAttribute("x",N/2),j.setAttribute("y",N/2),j.setAttribute("width",c-N),j.setAttribute("height",s-N),j.setAttribute("stroke-width",N||1),j.setAttribute("stroke","transparent"),j.setAttribute("fill","transparent"),Y.append(j),this.container.append(Y),this._createPopup(j,Z),this.container}}class m extends S{constructor(Z){var s,Y,N;const c=!!(Z.data.hasPopup||(s=Z.data.titleObj)!=null&&s.str||(Y=Z.data.contentsObj)!=null&&Y.str||(N=Z.data.richText)!=null&&N.str);super(Z,{isRenderable:c,ignoreBorder:!0})}render(){this.container.classList.add("circleAnnotation");const Z=this.data,{width:c,height:s}=L(Z.rect),Y=this.svgFactory.create(c,s,!0),N=Z.borderStyle.width,j=this.svgFactory.createElement("svg:ellipse");return j.setAttribute("cx",c/2),j.setAttribute("cy",s/2),j.setAttribute("rx",c/2-N/2),j.setAttribute("ry",s/2-N/2),j.setAttribute("stroke-width",N||1),j.setAttribute("stroke","transparent"),j.setAttribute("fill","transparent"),Y.append(j),this.container.append(Y),this._createPopup(j,Z),this.container}}class J extends S{constructor(Z){var s,Y,N;const c=!!(Z.data.hasPopup||(s=Z.data.titleObj)!=null&&s.str||(Y=Z.data.contentsObj)!=null&&Y.str||(N=Z.data.richText)!=null&&N.str);super(Z,{isRenderable:c,ignoreBorder:!0}),this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.classList.add(this.containerClassName);const Z=this.data,{width:c,height:s}=L(Z.rect),Y=this.svgFactory.create(c,s,!0);let N=[];for(const oI of Z.vertices){const f=oI.x-Z.rect[0],NI=Z.rect[3]-oI.y;N.push(f+","+NI)}N=N.join(" ");const j=this.svgFactory.createElement(this.svgElementName);return j.setAttribute("points",N),j.setAttribute("stroke-width",Z.borderStyle.width||1),j.setAttribute("stroke","transparent"),j.setAttribute("fill","transparent"),Y.append(j),this.container.append(Y),this._createPopup(j,Z),this.container}}class r extends J{constructor(Z){super(Z),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class XI extends S{constructor(Z){var s,Y,N;const c=!!(Z.data.hasPopup||(s=Z.data.titleObj)!=null&&s.str||(Y=Z.data.contentsObj)!=null&&Y.str||(N=Z.data.richText)!=null&&N.str);super(Z,{isRenderable:c,ignoreBorder:!0})}render(){return this.container.classList.add("caretAnnotation"),this.data.hasPopup||this._createPopup(null,this.data),this.container}}class SI extends S{constructor(Z){var s,Y,N;const c=!!(Z.data.hasPopup||(s=Z.data.titleObj)!=null&&s.str||(Y=Z.data.contentsObj)!=null&&Y.str||(N=Z.data.richText)!=null&&N.str);super(Z,{isRenderable:c,ignoreBorder:!0}),this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline"}render(){this.container.classList.add(this.containerClassName);const Z=this.data,{width:c,height:s}=L(Z.rect),Y=this.svgFactory.create(c,s,!0);for(const N of Z.inkLists){let j=[];for(const f of N){const NI=f.x-Z.rect[0],hI=Z.rect[3]-f.y;j.push(`${NI},${hI}`)}j=j.join(" ");const oI=this.svgFactory.createElement(this.svgElementName);oI.setAttribute("points",j),oI.setAttribute("stroke-width",Z.borderStyle.width||1),oI.setAttribute("stroke","transparent"),oI.setAttribute("fill","transparent"),this._createPopup(oI,Z),Y.append(oI)}return this.container.append(Y),this.container}}class kI extends S{constructor(Z){var s,Y,N;const c=!!(Z.data.hasPopup||(s=Z.data.titleObj)!=null&&s.str||(Y=Z.data.contentsObj)!=null&&Y.str||(N=Z.data.richText)!=null&&N.str);super(Z,{isRenderable:c,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("highlightAnnotation"):(this.container.classList.add("highlightAnnotation"),this.container)}}class FI extends S{constructor(Z){var s,Y,N;const c=!!(Z.data.hasPopup||(s=Z.data.titleObj)!=null&&s.str||(Y=Z.data.contentsObj)!=null&&Y.str||(N=Z.data.richText)!=null&&N.str);super(Z,{isRenderable:c,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("underlineAnnotation"):(this.container.classList.add("underlineAnnotation"),this.container)}}class JI extends S{constructor(Z){var s,Y,N;const c=!!(Z.data.hasPopup||(s=Z.data.titleObj)!=null&&s.str||(Y=Z.data.contentsObj)!=null&&Y.str||(N=Z.data.richText)!=null&&N.str);super(Z,{isRenderable:c,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("squigglyAnnotation"):(this.container.classList.add("squigglyAnnotation"),this.container)}}class LI extends S{constructor(Z){var s,Y,N;const c=!!(Z.data.hasPopup||(s=Z.data.titleObj)!=null&&s.str||(Y=Z.data.contentsObj)!=null&&Y.str||(N=Z.data.richText)!=null&&N.str);super(Z,{isRenderable:c,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("strikeoutAnnotation"):(this.container.classList.add("strikeoutAnnotation"),this.container)}}class UI extends S{constructor(Z){var s,Y,N;const c=!!(Z.data.hasPopup||(s=Z.data.titleObj)!=null&&s.str||(Y=Z.data.contentsObj)!=null&&Y.str||(N=Z.data.richText)!=null&&N.str);super(Z,{isRenderable:c,ignoreBorder:!0})}render(){return this.container.classList.add("stampAnnotation"),this.data.hasPopup||this._createPopup(null,this.data),this.container}}class TI extends S{constructor(Z){var Y;super(Z,{isRenderable:!0});const{filename:c,content:s}=this.data.file;this.filename=(0,l.getFilenameFromUrl)(c,!0),this.content=s,(Y=this.linkService.eventBus)==null||Y.dispatch("fileattachmentannotation",{source:this,filename:c,content:s})}render(){var c,s;this.container.classList.add("fileAttachmentAnnotation");let Z;return this.data.hasAppearance?Z=document.createElement("div"):(Z=document.createElement("img"),Z.src=`${this.imageResourcesPath}annotation-${/paperclip/i.test(this.data.name)?"paperclip":"pushpin"}.svg`),Z.classList.add("popupTriggerArea"),Z.addEventListener("dblclick",this._download.bind(this)),!this.data.hasPopup&&((c=this.data.titleObj)!=null&&c.str||(s=this.data.contentsObj)!=null&&s.str||this.data.richText)&&this._createPopup(Z,this.data),this.container.append(Z),this.container}_download(){var Z;(Z=this.downloadManager)==null||Z.openOrDownloadData(this.container,this.content,this.filename)}}const i=class{static render(Z){var f,NI;const{annotations:c,div:s,viewport:Y,accessibilityManager:N}=Z;(0,l.setLayerDimensions)(s,Y);const j={data:null,layer:s,page:Z.page,viewport:Y,linkService:Z.linkService,downloadManager:Z.downloadManager,imageResourcesPath:Z.imageResourcesPath||"",renderForms:Z.renderForms!==!1,svgFactory:new l.DOMSVGFactory,annotationStorage:Z.annotationStorage||new G.AnnotationStorage,enableScripting:Z.enableScripting===!0,hasJSActions:Z.hasJSActions,fieldObjects:Z.fieldObjects};let oI=0;for(const hI of c){if(hI.noHTML)continue;if(hI.annotationType!==C.AnnotationType.POPUP){const{width:KI,height:zI}=L(hI.rect);if(KI<=0||zI<=0)continue}j.data=hI;const HI=Q.create(j);if(!HI.isRenderable)continue;const uI=HI.render();if(hI.hidden&&(uI.style.visibility="hidden"),Array.isArray(uI))for(const KI of uI)KI.style.zIndex=oI++,tI(f=i,P,sC).call(f,KI,hI.id,s,N);else uI.style.zIndex=oI++,HI instanceof II?s.prepend(uI):tI(NI=i,P,sC).call(NI,uI,hI.id,s,N)}tI(this,aI,mC).call(this,s,Z.annotationCanvasMap)}static update(Z){const{annotationCanvasMap:c,div:s,viewport:Y}=Z;(0,l.setLayerDimensions)(s,{rotation:Y.rotation}),tI(this,aI,mC).call(this,s,c),s.hidden=!1}};let QI=i;P=new WeakSet,sC=function(Z,c,s,Y){const N=Z.firstChild||Z;N.id=`${l.AnnotationPrefix}${c}`,s.append(Z),Y==null||Y.moveElementInDOM(s,Z,N,!1)},aI=new WeakSet,mC=function(Z,c){if(c){for(const[s,Y]of c){const N=Z.querySelector(`[data-annotation-id="${s}"]`);if(!N)continue;const{firstChild:j}=N;j?j.nodeName==="CANVAS"?j.replaceWith(Y):j.before(Y):N.append(Y)}c.clear()}},DI(QI,P),DI(QI,aI),g.AnnotationLayer=QI},(I,g)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.ColorConverters=void 0;function A(l){return Math.floor(Math.max(0,Math.min(1,l))*255).toString(16).padStart(2,"0")}class C{static CMYK_G([G,B,k,n]){return["G",1-Math.min(1,.3*G+.59*k+.11*B+n)]}static G_CMYK([G]){return["CMYK",0,0,0,1-G]}static G_RGB([G]){return["RGB",G,G,G]}static G_HTML([G]){const B=A(G);return`#${B}${B}${B}`}static RGB_G([G,B,k]){return["G",.3*G+.59*B+.11*k]}static RGB_HTML([G,B,k]){const n=A(G),a=A(B),w=A(k);return`#${n}${a}${w}`}static T_HTML(){return"#00000000"}static CMYK_RGB([G,B,k,n]){return["RGB",1-Math.min(1,G+n),1-Math.min(1,k+n),1-Math.min(1,B+n)]}static CMYK_HTML(G){const B=this.CMYK_RGB(G).slice(1);return this.RGB_HTML(B)}static RGB_CMYK([G,B,k]){const n=1-G,a=1-B,w=1-k,L=Math.min(n,a,w);return["CMYK",n,a,w,L]}}g.ColorConverters=C},(I,g,A)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.XfaLayer=void 0;var C=A(19);class l{static setupStorage(B,k,n,a,w){const L=a.getValue(k,{value:null});switch(n.name){case"textarea":if(L.value!==null&&(B.textContent=L.value),w==="print")break;B.addEventListener("input",Q=>{a.setValue(k,{value:Q.target.value})});break;case"input":if(n.attributes.type==="radio"||n.attributes.type==="checkbox"){if(L.value===n.attributes.xfaOn?B.setAttribute("checked",!0):L.value===n.attributes.xfaOff&&B.removeAttribute("checked"),w==="print")break;B.addEventListener("change",Q=>{a.setValue(k,{value:Q.target.checked?Q.target.getAttribute("xfaOn"):Q.target.getAttribute("xfaOff")})})}else{if(L.value!==null&&B.setAttribute("value",L.value),w==="print")break;B.addEventListener("input",Q=>{a.setValue(k,{value:Q.target.value})})}break;case"select":if(L.value!==null)for(const Q of n.children)Q.attributes.value===L.value&&(Q.attributes.selected=!0);B.addEventListener("input",Q=>{const S=Q.target.options,y=S.selectedIndex===-1?"":S[S.selectedIndex].value;a.setValue(k,{value:y})});break}}static setAttributes({html:B,element:k,storage:n=null,intent:a,linkService:w}){const{attributes:L}=k,Q=B instanceof HTMLAnchorElement;L.type==="radio"&&(L.name=`${L.name}-${a}`);for(const[S,y]of Object.entries(L))if(y!=null)switch(S){case"class":y.length&&B.setAttribute(S,y.join(" "));break;case"dataId":break;case"id":B.setAttribute("data-element-id",y);break;case"style":Object.assign(B.style,y);break;case"textContent":B.textContent=y;break;default:(!Q||S!=="href"&&S!=="newWindow")&&B.setAttribute(S,y)}Q&&w.addLinkAttributes(B,L.href,L.newWindow),n&&L.dataId&&this.setupStorage(B,L.dataId,k,n)}static render(B){var M;const k=B.annotationStorage,n=B.linkService,a=B.xfaHtml,w=B.intent||"display",L=document.createElement(a.name);a.attributes&&this.setAttributes({html:L,element:a,intent:w,linkService:n});const Q=[[a,-1,L]],S=B.div;if(S.append(L),B.viewport){const F=`matrix(${B.viewport.transform.join(",")})`;S.style.transform=F}w!=="richText"&&S.setAttribute("class","xfaLayer xfaFont");const y=[];for(;Q.length>0;){const[F,z,O]=Q.at(-1);if(z+1===F.children.length){Q.pop();continue}const D=F.children[++Q.at(-1)[1]];if(D===null)continue;const{name:R}=D;if(R==="#text"){const II=document.createTextNode(D.value);y.push(II),O.append(II);continue}let q;if((M=D==null?void 0:D.attributes)!=null&&M.xmlns?q=document.createElementNS(D.attributes.xmlns,R):q=document.createElement(R),O.append(q),D.attributes&&this.setAttributes({html:q,element:D,storage:k,intent:w,linkService:n}),D.children&&D.children.length>0)Q.push([D,-1,q]);else if(D.value){const II=document.createTextNode(D.value);C.XfaText.shouldBuildText(R)&&y.push(II),q.append(II)}}for(const F of S.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))F.setAttribute("readOnly",!0);return{textDivs:y}}static update(B){const k=`matrix(${B.viewport.transform.join(",")})`;B.div.style.transform=k,B.div.hidden=!1}}g.XfaLayer=l},(I,g,A)=>{Object.defineProperty(g,"__esModule",{value:!0}),g.SVGGraphics=void 0;var C=A(6),l=A(1),G=A(10);let B=class{constructor(){(0,l.unreachable)("Not implemented: SVGGraphics")}};g.SVGGraphics=B;{let O=function(d){let b=[];const u=[];for(const m of d){if(m.fn==="save"){b.push({fnId:92,fn:"group",items:[]}),u.push(b),b=b.at(-1).items;continue}m.fn==="restore"?b=u.pop():b.push(m)}return b},D=function(d){if(Number.isInteger(d))return d.toString();const b=d.toFixed(10);let u=b.length-1;if(b[u]!=="0")return b;do u--;while(b[u]==="0");return b.substring(0,b[u]==="."?u:u+1)},R=function(d){if(d[4]===0&&d[5]===0){if(d[1]===0&&d[2]===0)return d[0]===1&&d[3]===1?"":`scale(${D(d[0])} ${D(d[3])})`;if(d[0]===d[3]&&d[1]===-d[2]){const b=Math.acos(d[0])*180/Math.PI;return`rotate(${D(b)})`}}else if(d[0]===1&&d[1]===0&&d[2]===0&&d[3]===1)return`translate(${D(d[4])} ${D(d[5])})`;return`matrix(${D(d[0])} ${D(d[1])} ${D(d[2])} ${D(d[3])} ${D(d[4])} ${D(d[5])})`};var k=O,n=D,a=R;const w={fontStyle:"normal",fontWeight:"normal",fillColor:"#000000"},L="http://www.w3.org/XML/1998/namespace",Q="http://www.w3.org/1999/xlink",S=["butt","round","square"],y=["miter","round","bevel"],M=function(d,b="",u=!1){if(URL.createObjectURL&&typeof Blob<"u"&&!u)return URL.createObjectURL(new Blob([d],{type:b}));const m="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";let J=`data:${b};base64,`;for(let r=0,XI=d.length;r<XI;r+=3){const SI=d[r]&255,kI=d[r+1]&255,FI=d[r+2]&255,JI=SI>>2,LI=(SI&3)<<4|kI>>4,UI=r+1<XI?(kI&15)<<2|FI>>6:64,TI=r+2<XI?FI&63:64;J+=m[JI]+m[LI]+m[UI]+m[TI]}return J},F=function(){const d=new Uint8Array([137,80,78,71,13,10,26,10]),b=12,u=new Int32Array(256);for(let FI=0;FI<256;FI++){let JI=FI;for(let LI=0;LI<8;LI++)JI&1?JI=3988292384^JI>>1&2147483647:JI=JI>>1&2147483647;u[FI]=JI}function m(FI,JI,LI){let UI=-1;for(let TI=JI;TI<LI;TI++){const QI=(UI^FI[TI])&255,fI=u[QI];UI=UI>>>8^fI}return UI^-1}function J(FI,JI,LI,UI){let TI=UI;const QI=JI.length;LI[TI]=QI>>24&255,LI[TI+1]=QI>>16&255,LI[TI+2]=QI>>8&255,LI[TI+3]=QI&255,TI+=4,LI[TI]=FI.charCodeAt(0)&255,LI[TI+1]=FI.charCodeAt(1)&255,LI[TI+2]=FI.charCodeAt(2)&255,LI[TI+3]=FI.charCodeAt(3)&255,TI+=4,LI.set(JI,TI),TI+=JI.length;const fI=m(LI,UI+4,TI);LI[TI]=fI>>24&255,LI[TI+1]=fI>>16&255,LI[TI+2]=fI>>8&255,LI[TI+3]=fI&255}function r(FI,JI,LI){let UI=1,TI=0;for(let QI=JI;QI<LI;++QI)UI=(UI+(FI[QI]&255))%65521,TI=(TI+UI)%65521;return TI<<16|UI}function XI(FI){if(!G.isNodeJS)return SI(FI);try{let JI;parseInt(process.versions.node)>=8?JI=FI:JI=Buffer.from(FI);const LI=require$$5.deflateSync(JI,{level:9});return LI instanceof Uint8Array?LI:new Uint8Array(LI)}catch(JI){(0,l.warn)("Not compressing PNG because zlib.deflateSync is unavailable: "+JI)}return SI(FI)}function SI(FI){let JI=FI.length;const LI=65535,UI=Math.ceil(JI/LI),TI=new Uint8Array(2+JI+UI*5+4);let QI=0;TI[QI++]=120,TI[QI++]=156;let fI=0;for(;JI>LI;)TI[QI++]=0,TI[QI++]=255,TI[QI++]=255,TI[QI++]=0,TI[QI++]=0,TI.set(FI.subarray(fI,fI+LI),QI),QI+=LI,fI+=LI,JI-=LI;TI[QI++]=1,TI[QI++]=JI&255,TI[QI++]=JI>>8&255,TI[QI++]=~JI&65535&255,TI[QI++]=(~JI&65535)>>8&255,TI.set(FI.subarray(fI),QI),QI+=FI.length-fI;const sI=r(FI,0,FI.length);return TI[QI++]=sI>>24&255,TI[QI++]=sI>>16&255,TI[QI++]=sI>>8&255,TI[QI++]=sI&255,TI}function kI(FI,JI,LI,UI){const TI=FI.width,QI=FI.height;let fI,sI,o;const X=FI.data;switch(JI){case l.ImageKind.GRAYSCALE_1BPP:sI=0,fI=1,o=TI+7>>3;break;case l.ImageKind.RGB_24BPP:sI=2,fI=8,o=TI*3;break;case l.ImageKind.RGBA_32BPP:sI=6,fI=8,o=TI*4;break;default:throw new Error("invalid format")}const T=new Uint8Array((1+o)*QI);let P=0,v=0;for(let c=0;c<QI;++c)T[P++]=0,T.set(X.subarray(v,v+o),P),v+=o,P+=o;if(JI===l.ImageKind.GRAYSCALE_1BPP&&UI){P=0;for(let c=0;c<QI;c++){P++;for(let s=0;s<o;s++)T[P++]^=255}}const aI=new Uint8Array([TI>>24&255,TI>>16&255,TI>>8&255,TI&255,QI>>24&255,QI>>16&255,QI>>8&255,QI&255,fI,sI,0,0,0]),U=XI(T),i=d.length+b*3+aI.length+U.length,W=new Uint8Array(i);let Z=0;return W.set(d,Z),Z+=d.length,J("IHDR",aI,W,Z),Z+=b+aI.length,J("IDATA",U,W,Z),Z+=b+U.length,J("IEND",new Uint8Array(0),W,Z),M(W,"image/png",LI)}return function(JI,LI,UI){const TI=JI.kind===void 0?l.ImageKind.GRAYSCALE_1BPP:JI.kind;return kI(JI,TI,LI,UI)}}();class z{constructor(){this.fontSizeScale=1,this.fontWeight=w.fontWeight,this.fontSize=0,this.textMatrix=l.IDENTITY_MATRIX,this.fontMatrix=l.FONT_IDENTITY_MATRIX,this.leading=0,this.textRenderingMode=l.TextRenderingMode.FILL,this.textMatrixScale=1,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRise=0,this.fillColor=w.fillColor,this.strokeColor="#000000",this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.lineJoin="",this.lineCap="",this.miterLimit=0,this.dashArray=[],this.dashPhase=0,this.dependencies=[],this.activeClipUrl=null,this.clipGroup=null,this.maskId=""}clone(){return Object.create(this)}setCurrentPoint(b,u){this.x=b,this.y=u}}let q=0,II=0,t=0;g.SVGGraphics=B=class{constructor(d,b,u=!1){(0,C.deprecated)("The SVG back-end is no longer maintained and *may* be removed in the future."),this.svgFactory=new C.DOMSVGFactory,this.current=new z,this.transformMatrix=l.IDENTITY_MATRIX,this.transformStack=[],this.extraStack=[],this.commonObjs=d,this.objs=b,this.pendingClip=null,this.pendingEOFill=!1,this.embedFonts=!1,this.embeddedFonts=Object.create(null),this.cssStyle=null,this.forceDataSchema=!!u,this._operatorIdMapping=[];for(const m in l.OPS)this._operatorIdMapping[l.OPS[m]]=m}getObject(d,b=null){return typeof d=="string"?d.startsWith("g_")?this.commonObjs.get(d):this.objs.get(d):b}save(){this.transformStack.push(this.transformMatrix);const d=this.current;this.extraStack.push(d),this.current=d.clone()}restore(){this.transformMatrix=this.transformStack.pop(),this.current=this.extraStack.pop(),this.pendingClip=null,this.tgrp=null}group(d){this.save(),this.executeOpTree(d),this.restore()}loadDependencies(d){const b=d.fnArray,u=d.argsArray;for(let m=0,J=b.length;m<J;m++)if(b[m]===l.OPS.dependency)for(const r of u[m]){const XI=r.startsWith("g_")?this.commonObjs:this.objs,SI=new Promise(kI=>{XI.get(r,kI)});this.current.dependencies.push(SI)}return Promise.all(this.current.dependencies)}transform(d,b,u,m,J,r){const XI=[d,b,u,m,J,r];this.transformMatrix=l.Util.transform(this.transformMatrix,XI),this.tgrp=null}getSVG(d,b){this.viewport=b;const u=this._initialize(b);return this.loadDependencies(d).then(()=>(this.transformMatrix=l.IDENTITY_MATRIX,this.executeOpTree(this.convertOpList(d)),u))}convertOpList(d){const b=this._operatorIdMapping,u=d.argsArray,m=d.fnArray,J=[];for(let r=0,XI=m.length;r<XI;r++){const SI=m[r];J.push({fnId:SI,fn:b[SI],args:u[r]})}return O(J)}executeOpTree(d){for(const b of d){const u=b.fn,m=b.fnId,J=b.args;switch(m|0){case l.OPS.beginText:this.beginText();break;case l.OPS.dependency:break;case l.OPS.setLeading:this.setLeading(J);break;case l.OPS.setLeadingMoveText:this.setLeadingMoveText(J[0],J[1]);break;case l.OPS.setFont:this.setFont(J);break;case l.OPS.showText:this.showText(J[0]);break;case l.OPS.showSpacedText:this.showText(J[0]);break;case l.OPS.endText:this.endText();break;case l.OPS.moveText:this.moveText(J[0],J[1]);break;case l.OPS.setCharSpacing:this.setCharSpacing(J[0]);break;case l.OPS.setWordSpacing:this.setWordSpacing(J[0]);break;case l.OPS.setHScale:this.setHScale(J[0]);break;case l.OPS.setTextMatrix:this.setTextMatrix(J[0],J[1],J[2],J[3],J[4],J[5]);break;case l.OPS.setTextRise:this.setTextRise(J[0]);break;case l.OPS.setTextRenderingMode:this.setTextRenderingMode(J[0]);break;case l.OPS.setLineWidth:this.setLineWidth(J[0]);break;case l.OPS.setLineJoin:this.setLineJoin(J[0]);break;case l.OPS.setLineCap:this.setLineCap(J[0]);break;case l.OPS.setMiterLimit:this.setMiterLimit(J[0]);break;case l.OPS.setFillRGBColor:this.setFillRGBColor(J[0],J[1],J[2]);break;case l.OPS.setStrokeRGBColor:this.setStrokeRGBColor(J[0],J[1],J[2]);break;case l.OPS.setStrokeColorN:this.setStrokeColorN(J);break;case l.OPS.setFillColorN:this.setFillColorN(J);break;case l.OPS.shadingFill:this.shadingFill(J[0]);break;case l.OPS.setDash:this.setDash(J[0],J[1]);break;case l.OPS.setRenderingIntent:this.setRenderingIntent(J[0]);break;case l.OPS.setFlatness:this.setFlatness(J[0]);break;case l.OPS.setGState:this.setGState(J[0]);break;case l.OPS.fill:this.fill();break;case l.OPS.eoFill:this.eoFill();break;case l.OPS.stroke:this.stroke();break;case l.OPS.fillStroke:this.fillStroke();break;case l.OPS.eoFillStroke:this.eoFillStroke();break;case l.OPS.clip:this.clip("nonzero");break;case l.OPS.eoClip:this.clip("evenodd");break;case l.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case l.OPS.paintImageXObject:this.paintImageXObject(J[0]);break;case l.OPS.paintInlineImageXObject:this.paintInlineImageXObject(J[0]);break;case l.OPS.paintImageMaskXObject:this.paintImageMaskXObject(J[0]);break;case l.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(J[0],J[1]);break;case l.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case l.OPS.closePath:this.closePath();break;case l.OPS.closeStroke:this.closeStroke();break;case l.OPS.closeFillStroke:this.closeFillStroke();break;case l.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case l.OPS.nextLine:this.nextLine();break;case l.OPS.transform:this.transform(J[0],J[1],J[2],J[3],J[4],J[5]);break;case l.OPS.constructPath:this.constructPath(J[0],J[1]);break;case l.OPS.endPath:this.endPath();break;case 92:this.group(b.items);break;default:(0,l.warn)(`Unimplemented operator ${u}`);break}}}setWordSpacing(d){this.current.wordSpacing=d}setCharSpacing(d){this.current.charSpacing=d}nextLine(){this.moveText(0,this.current.leading)}setTextMatrix(d,b,u,m,J,r){const XI=this.current;XI.textMatrix=XI.lineMatrix=[d,b,u,m,J,r],XI.textMatrixScale=Math.hypot(d,b),XI.x=XI.lineX=0,XI.y=XI.lineY=0,XI.xcoords=[],XI.ycoords=[],XI.tspan=this.svgFactory.createElement("svg:tspan"),XI.tspan.setAttributeNS(null,"font-family",XI.fontFamily),XI.tspan.setAttributeNS(null,"font-size",`${D(XI.fontSize)}px`),XI.tspan.setAttributeNS(null,"y",D(-XI.y)),XI.txtElement=this.svgFactory.createElement("svg:text"),XI.txtElement.append(XI.tspan)}beginText(){const d=this.current;d.x=d.lineX=0,d.y=d.lineY=0,d.textMatrix=l.IDENTITY_MATRIX,d.lineMatrix=l.IDENTITY_MATRIX,d.textMatrixScale=1,d.tspan=this.svgFactory.createElement("svg:tspan"),d.txtElement=this.svgFactory.createElement("svg:text"),d.txtgrp=this.svgFactory.createElement("svg:g"),d.xcoords=[],d.ycoords=[]}moveText(d,b){const u=this.current;u.x=u.lineX+=d,u.y=u.lineY+=b,u.xcoords=[],u.ycoords=[],u.tspan=this.svgFactory.createElement("svg:tspan"),u.tspan.setAttributeNS(null,"font-family",u.fontFamily),u.tspan.setAttributeNS(null,"font-size",`${D(u.fontSize)}px`),u.tspan.setAttributeNS(null,"y",D(-u.y))}showText(d){const b=this.current,u=b.font,m=b.fontSize;if(m===0)return;const J=b.fontSizeScale,r=b.charSpacing,XI=b.wordSpacing,SI=b.fontDirection,kI=b.textHScale*SI,FI=u.vertical,JI=FI?1:-1,LI=u.defaultVMetrics,UI=m*b.fontMatrix[0];let TI=0;for(const sI of d){if(sI===null){TI+=SI*XI;continue}else if(typeof sI=="number"){TI+=JI*sI*m/1e3;continue}const o=(sI.isSpace?XI:0)+r,X=sI.fontChar;let T,P,v=sI.width;if(FI){let U;const i=sI.vmetric||LI;U=sI.vmetric?i[1]:v*.5,U=-U*UI;const W=i[2]*UI;v=i?-i[0]:v,T=U/J,P=(TI+W)/J}else T=TI/J,P=0;(sI.isInFont||u.missingFile)&&(b.xcoords.push(b.x+T),FI&&b.ycoords.push(-b.y+P),b.tspan.textContent+=X);let aI;FI?aI=v*UI-o*SI:aI=v*UI+o*SI,TI+=aI}b.tspan.setAttributeNS(null,"x",b.xcoords.map(D).join(" ")),FI?b.tspan.setAttributeNS(null,"y",b.ycoords.map(D).join(" ")):b.tspan.setAttributeNS(null,"y",D(-b.y)),FI?b.y-=TI:b.x+=TI*kI,b.tspan.setAttributeNS(null,"font-family",b.fontFamily),b.tspan.setAttributeNS(null,"font-size",`${D(b.fontSize)}px`),b.fontStyle!==w.fontStyle&&b.tspan.setAttributeNS(null,"font-style",b.fontStyle),b.fontWeight!==w.fontWeight&&b.tspan.setAttributeNS(null,"font-weight",b.fontWeight);const QI=b.textRenderingMode&l.TextRenderingMode.FILL_STROKE_MASK;if(QI===l.TextRenderingMode.FILL||QI===l.TextRenderingMode.FILL_STROKE?(b.fillColor!==w.fillColor&&b.tspan.setAttributeNS(null,"fill",b.fillColor),b.fillAlpha<1&&b.tspan.setAttributeNS(null,"fill-opacity",b.fillAlpha)):b.textRenderingMode===l.TextRenderingMode.ADD_TO_PATH?b.tspan.setAttributeNS(null,"fill","transparent"):b.tspan.setAttributeNS(null,"fill","none"),QI===l.TextRenderingMode.STROKE||QI===l.TextRenderingMode.FILL_STROKE){const sI=1/(b.textMatrixScale||1);this._setStrokeAttributes(b.tspan,sI)}let fI=b.textMatrix;b.textRise!==0&&(fI=fI.slice(),fI[5]+=b.textRise),b.txtElement.setAttributeNS(null,"transform",`${R(fI)} scale(${D(kI)}, -1)`),b.txtElement.setAttributeNS(L,"xml:space","preserve"),b.txtElement.append(b.tspan),b.txtgrp.append(b.txtElement),this._ensureTransformGroup().append(b.txtElement)}setLeadingMoveText(d,b){this.setLeading(-b),this.moveText(d,b)}addFontStyle(d){if(!d.data)throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');this.cssStyle||(this.cssStyle=this.svgFactory.createElement("svg:style"),this.cssStyle.setAttributeNS(null,"type","text/css"),this.defs.append(this.cssStyle));const b=M(d.data,d.mimetype,this.forceDataSchema);this.cssStyle.textContent+=`@font-face { font-family: "${d.loadedName}"; src: url(${b}); }
`}setFont(d){const b=this.current,u=this.commonObjs.get(d[0]);let m=d[1];b.font=u,this.embedFonts&&!u.missingFile&&!this.embeddedFonts[u.loadedName]&&(this.addFontStyle(u),this.embeddedFonts[u.loadedName]=u),b.fontMatrix=u.fontMatrix||l.FONT_IDENTITY_MATRIX;let J="normal";u.black?J="900":u.bold&&(J="bold");const r=u.italic?"italic":"normal";m<0?(m=-m,b.fontDirection=-1):b.fontDirection=1,b.fontSize=m,b.fontFamily=u.loadedName,b.fontWeight=J,b.fontStyle=r,b.tspan=this.svgFactory.createElement("svg:tspan"),b.tspan.setAttributeNS(null,"y",D(-b.y)),b.xcoords=[],b.ycoords=[]}endText(){var b;const d=this.current;d.textRenderingMode&l.TextRenderingMode.ADD_TO_PATH_FLAG&&((b=d.txtElement)!=null&&b.hasChildNodes())&&(d.element=d.txtElement,this.clip("nonzero"),this.endPath())}setLineWidth(d){d>0&&(this.current.lineWidth=d)}setLineCap(d){this.current.lineCap=S[d]}setLineJoin(d){this.current.lineJoin=y[d]}setMiterLimit(d){this.current.miterLimit=d}setStrokeAlpha(d){this.current.strokeAlpha=d}setStrokeRGBColor(d,b,u){this.current.strokeColor=l.Util.makeHexColor(d,b,u)}setFillAlpha(d){this.current.fillAlpha=d}setFillRGBColor(d,b,u){this.current.fillColor=l.Util.makeHexColor(d,b,u),this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.xcoords=[],this.current.ycoords=[]}setStrokeColorN(d){this.current.strokeColor=this._makeColorN_Pattern(d)}setFillColorN(d){this.current.fillColor=this._makeColorN_Pattern(d)}shadingFill(d){const b=this.viewport.width,u=this.viewport.height,m=l.Util.inverseTransform(this.transformMatrix),J=l.Util.applyTransform([0,0],m),r=l.Util.applyTransform([0,u],m),XI=l.Util.applyTransform([b,0],m),SI=l.Util.applyTransform([b,u],m),kI=Math.min(J[0],r[0],XI[0],SI[0]),FI=Math.min(J[1],r[1],XI[1],SI[1]),JI=Math.max(J[0],r[0],XI[0],SI[0]),LI=Math.max(J[1],r[1],XI[1],SI[1]),UI=this.svgFactory.createElement("svg:rect");UI.setAttributeNS(null,"x",kI),UI.setAttributeNS(null,"y",FI),UI.setAttributeNS(null,"width",JI-kI),UI.setAttributeNS(null,"height",LI-FI),UI.setAttributeNS(null,"fill",this._makeShadingPattern(d)),this.current.fillAlpha<1&&UI.setAttributeNS(null,"fill-opacity",this.current.fillAlpha),this._ensureTransformGroup().append(UI)}_makeColorN_Pattern(d){return d[0]==="TilingPattern"?this._makeTilingPattern(d):this._makeShadingPattern(d)}_makeTilingPattern(d){const b=d[1],u=d[2],m=d[3]||l.IDENTITY_MATRIX,[J,r,XI,SI]=d[4],kI=d[5],FI=d[6],JI=d[7],LI=`shading${t++}`,[UI,TI,QI,fI]=l.Util.normalizeRect([...l.Util.applyTransform([J,r],m),...l.Util.applyTransform([XI,SI],m)]),[sI,o]=l.Util.singularValueDecompose2dScale(m),X=kI*sI,T=FI*o,P=this.svgFactory.createElement("svg:pattern");P.setAttributeNS(null,"id",LI),P.setAttributeNS(null,"patternUnits","userSpaceOnUse"),P.setAttributeNS(null,"width",X),P.setAttributeNS(null,"height",T),P.setAttributeNS(null,"x",`${UI}`),P.setAttributeNS(null,"y",`${TI}`);const v=this.svg,aI=this.transformMatrix,U=this.current.fillColor,i=this.current.strokeColor,W=this.svgFactory.create(QI-UI,fI-TI);if(this.svg=W,this.transformMatrix=m,JI===2){const Z=l.Util.makeHexColor(...b);this.current.fillColor=Z,this.current.strokeColor=Z}return this.executeOpTree(this.convertOpList(u)),this.svg=v,this.transformMatrix=aI,this.current.fillColor=U,this.current.strokeColor=i,P.append(W.childNodes[0]),this.defs.append(P),`url(#${LI})`}_makeShadingPattern(d){switch(typeof d=="string"&&(d=this.objs.get(d)),d[0]){case"RadialAxial":const b=`shading${t++}`,u=d[3];let m;switch(d[1]){case"axial":const J=d[4],r=d[5];m=this.svgFactory.createElement("svg:linearGradient"),m.setAttributeNS(null,"id",b),m.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),m.setAttributeNS(null,"x1",J[0]),m.setAttributeNS(null,"y1",J[1]),m.setAttributeNS(null,"x2",r[0]),m.setAttributeNS(null,"y2",r[1]);break;case"radial":const XI=d[4],SI=d[5],kI=d[6],FI=d[7];m=this.svgFactory.createElement("svg:radialGradient"),m.setAttributeNS(null,"id",b),m.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),m.setAttributeNS(null,"cx",SI[0]),m.setAttributeNS(null,"cy",SI[1]),m.setAttributeNS(null,"r",FI),m.setAttributeNS(null,"fx",XI[0]),m.setAttributeNS(null,"fy",XI[1]),m.setAttributeNS(null,"fr",kI);break;default:throw new Error(`Unknown RadialAxial type: ${d[1]}`)}for(const J of u){const r=this.svgFactory.createElement("svg:stop");r.setAttributeNS(null,"offset",J[0]),r.setAttributeNS(null,"stop-color",J[1]),m.append(r)}return this.defs.append(m),`url(#${b})`;case"Mesh":return(0,l.warn)("Unimplemented pattern Mesh"),null;case"Dummy":return"hotpink";default:throw new Error(`Unknown IR type: ${d[0]}`)}}setDash(d,b){this.current.dashArray=d,this.current.dashPhase=b}constructPath(d,b){const u=this.current;let m=u.x,J=u.y,r=[],XI=0;for(const SI of d)switch(SI|0){case l.OPS.rectangle:m=b[XI++],J=b[XI++];const kI=b[XI++],FI=b[XI++],JI=m+kI,LI=J+FI;r.push("M",D(m),D(J),"L",D(JI),D(J),"L",D(JI),D(LI),"L",D(m),D(LI),"Z");break;case l.OPS.moveTo:m=b[XI++],J=b[XI++],r.push("M",D(m),D(J));break;case l.OPS.lineTo:m=b[XI++],J=b[XI++],r.push("L",D(m),D(J));break;case l.OPS.curveTo:m=b[XI+4],J=b[XI+5],r.push("C",D(b[XI]),D(b[XI+1]),D(b[XI+2]),D(b[XI+3]),D(m),D(J)),XI+=6;break;case l.OPS.curveTo2:r.push("C",D(m),D(J),D(b[XI]),D(b[XI+1]),D(b[XI+2]),D(b[XI+3])),m=b[XI+2],J=b[XI+3],XI+=4;break;case l.OPS.curveTo3:m=b[XI+2],J=b[XI+3],r.push("C",D(b[XI]),D(b[XI+1]),D(m),D(J),D(m),D(J)),XI+=4;break;case l.OPS.closePath:r.push("Z");break}r=r.join(" "),u.path&&d.length>0&&d[0]!==l.OPS.rectangle&&d[0]!==l.OPS.moveTo?r=u.path.getAttributeNS(null,"d")+r:(u.path=this.svgFactory.createElement("svg:path"),this._ensureTransformGroup().append(u.path)),u.path.setAttributeNS(null,"d",r),u.path.setAttributeNS(null,"fill","none"),u.element=u.path,u.setCurrentPoint(m,J)}endPath(){const d=this.current;if(d.path=null,!this.pendingClip)return;if(!d.element){this.pendingClip=null;return}const b=`clippath${q++}`,u=this.svgFactory.createElement("svg:clipPath");u.setAttributeNS(null,"id",b),u.setAttributeNS(null,"transform",R(this.transformMatrix));const m=d.element.cloneNode(!0);if(this.pendingClip==="evenodd"?m.setAttributeNS(null,"clip-rule","evenodd"):m.setAttributeNS(null,"clip-rule","nonzero"),this.pendingClip=null,u.append(m),this.defs.append(u),d.activeClipUrl){d.clipGroup=null;for(const J of this.extraStack)J.clipGroup=null;u.setAttributeNS(null,"clip-path",d.activeClipUrl)}d.activeClipUrl=`url(#${b})`,this.tgrp=null}clip(d){this.pendingClip=d}closePath(){const d=this.current;if(d.path){const b=`${d.path.getAttributeNS(null,"d")}Z`;d.path.setAttributeNS(null,"d",b)}}setLeading(d){this.current.leading=-d}setTextRise(d){this.current.textRise=d}setTextRenderingMode(d){this.current.textRenderingMode=d}setHScale(d){this.current.textHScale=d/100}setRenderingIntent(d){}setFlatness(d){}setGState(d){for(const[b,u]of d)switch(b){case"LW":this.setLineWidth(u);break;case"LC":this.setLineCap(u);break;case"LJ":this.setLineJoin(u);break;case"ML":this.setMiterLimit(u);break;case"D":this.setDash(u[0],u[1]);break;case"RI":this.setRenderingIntent(u);break;case"FL":this.setFlatness(u);break;case"Font":this.setFont(u);break;case"CA":this.setStrokeAlpha(u);break;case"ca":this.setFillAlpha(u);break;default:(0,l.warn)(`Unimplemented graphic state operator ${b}`);break}}fill(){const d=this.current;d.element&&(d.element.setAttributeNS(null,"fill",d.fillColor),d.element.setAttributeNS(null,"fill-opacity",d.fillAlpha),this.endPath())}stroke(){const d=this.current;d.element&&(this._setStrokeAttributes(d.element),d.element.setAttributeNS(null,"fill","none"),this.endPath())}_setStrokeAttributes(d,b=1){const u=this.current;let m=u.dashArray;b!==1&&m.length>0&&(m=m.map(function(J){return b*J})),d.setAttributeNS(null,"stroke",u.strokeColor),d.setAttributeNS(null,"stroke-opacity",u.strokeAlpha),d.setAttributeNS(null,"stroke-miterlimit",D(u.miterLimit)),d.setAttributeNS(null,"stroke-linecap",u.lineCap),d.setAttributeNS(null,"stroke-linejoin",u.lineJoin),d.setAttributeNS(null,"stroke-width",D(b*u.lineWidth)+"px"),d.setAttributeNS(null,"stroke-dasharray",m.map(D).join(" ")),d.setAttributeNS(null,"stroke-dashoffset",D(b*u.dashPhase)+"px")}eoFill(){var d;(d=this.current.element)==null||d.setAttributeNS(null,"fill-rule","evenodd"),this.fill()}fillStroke(){this.stroke(),this.fill()}eoFillStroke(){var d;(d=this.current.element)==null||d.setAttributeNS(null,"fill-rule","evenodd"),this.fillStroke()}closeStroke(){this.closePath(),this.stroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.closePath(),this.eoFillStroke()}paintSolidColorImageMask(){const d=this.svgFactory.createElement("svg:rect");d.setAttributeNS(null,"x","0"),d.setAttributeNS(null,"y","0"),d.setAttributeNS(null,"width","1px"),d.setAttributeNS(null,"height","1px"),d.setAttributeNS(null,"fill",this.current.fillColor),this._ensureTransformGroup().append(d)}paintImageXObject(d){const b=this.getObject(d);if(!b){(0,l.warn)(`Dependent image with object ID ${d} is not ready yet`);return}this.paintInlineImageXObject(b)}paintInlineImageXObject(d,b){const u=d.width,m=d.height,J=F(d,this.forceDataSchema,!!b),r=this.svgFactory.createElement("svg:rect");r.setAttributeNS(null,"x","0"),r.setAttributeNS(null,"y","0"),r.setAttributeNS(null,"width",D(u)),r.setAttributeNS(null,"height",D(m)),this.current.element=r,this.clip("nonzero");const XI=this.svgFactory.createElement("svg:image");XI.setAttributeNS(Q,"xlink:href",J),XI.setAttributeNS(null,"x","0"),XI.setAttributeNS(null,"y",D(-m)),XI.setAttributeNS(null,"width",D(u)+"px"),XI.setAttributeNS(null,"height",D(m)+"px"),XI.setAttributeNS(null,"transform",`scale(${D(1/u)} ${D(-1/m)})`),b?b.append(XI):this._ensureTransformGroup().append(XI)}paintImageMaskXObject(d){const b=this.getObject(d.data,d);if(b.bitmap){(0,l.warn)("paintImageMaskXObject: ImageBitmap support is not implemented, ensure that the `isOffscreenCanvasSupported` API parameter is disabled.");return}const u=this.current,m=b.width,J=b.height,r=u.fillColor;u.maskId=`mask${II++}`;const XI=this.svgFactory.createElement("svg:mask");XI.setAttributeNS(null,"id",u.maskId);const SI=this.svgFactory.createElement("svg:rect");SI.setAttributeNS(null,"x","0"),SI.setAttributeNS(null,"y","0"),SI.setAttributeNS(null,"width",D(m)),SI.setAttributeNS(null,"height",D(J)),SI.setAttributeNS(null,"fill",r),SI.setAttributeNS(null,"mask",`url(#${u.maskId})`),this.defs.append(XI),this._ensureTransformGroup().append(SI),this.paintInlineImageXObject(b,XI)}paintFormXObjectBegin(d,b){if(Array.isArray(d)&&d.length===6&&this.transform(d[0],d[1],d[2],d[3],d[4],d[5]),b){const u=b[2]-b[0],m=b[3]-b[1],J=this.svgFactory.createElement("svg:rect");J.setAttributeNS(null,"x",b[0]),J.setAttributeNS(null,"y",b[1]),J.setAttributeNS(null,"width",D(u)),J.setAttributeNS(null,"height",D(m)),this.current.element=J,this.clip("nonzero"),this.endPath()}}paintFormXObjectEnd(){}_initialize(d){const b=this.svgFactory.create(d.width,d.height),u=this.svgFactory.createElement("svg:defs");b.append(u),this.defs=u;const m=this.svgFactory.createElement("svg:g");return m.setAttributeNS(null,"transform",R(d.transform)),b.append(m),this.svg=m,b}_ensureClipGroup(){if(!this.current.clipGroup){const d=this.svgFactory.createElement("svg:g");d.setAttributeNS(null,"clip-path",this.current.activeClipUrl),this.svg.append(d),this.current.clipGroup=d}return this.current.clipGroup}_ensureTransformGroup(){return this.tgrp||(this.tgrp=this.svgFactory.createElement("svg:g"),this.tgrp.setAttributeNS(null,"transform",R(this.transformMatrix)),this.current.activeClipUrl?this._ensureClipGroup().append(this.tgrp):this.svg.append(this.tgrp)),this.tgrp}}}}],__webpack_module_cache__={};function __w_pdfjs_require__(I){var g=__webpack_module_cache__[I];if(g!==void 0)return g.exports;var A=__webpack_module_cache__[I]={exports:{}};return __webpack_modules__[I](A,A.exports,__w_pdfjs_require__),A.exports}var __webpack_exports__={};return(()=>{var I=__webpack_exports__;Object.defineProperty(I,"__esModule",{value:!0}),Object.defineProperty(I,"AbortException",{enumerable:!0,get:function(){return g.AbortException}}),Object.defineProperty(I,"AnnotationEditorLayer",{enumerable:!0,get:function(){return G.AnnotationEditorLayer}}),Object.defineProperty(I,"AnnotationEditorParamsType",{enumerable:!0,get:function(){return g.AnnotationEditorParamsType}}),Object.defineProperty(I,"AnnotationEditorType",{enumerable:!0,get:function(){return g.AnnotationEditorType}}),Object.defineProperty(I,"AnnotationEditorUIManager",{enumerable:!0,get:function(){return B.AnnotationEditorUIManager}}),Object.defineProperty(I,"AnnotationLayer",{enumerable:!0,get:function(){return k.AnnotationLayer}}),Object.defineProperty(I,"AnnotationMode",{enumerable:!0,get:function(){return g.AnnotationMode}}),Object.defineProperty(I,"CMapCompressionType",{enumerable:!0,get:function(){return g.CMapCompressionType}}),Object.defineProperty(I,"FeatureTest",{enumerable:!0,get:function(){return g.FeatureTest}}),Object.defineProperty(I,"GlobalWorkerOptions",{enumerable:!0,get:function(){return n.GlobalWorkerOptions}}),Object.defineProperty(I,"InvalidPDFException",{enumerable:!0,get:function(){return g.InvalidPDFException}}),Object.defineProperty(I,"MissingPDFException",{enumerable:!0,get:function(){return g.MissingPDFException}}),Object.defineProperty(I,"OPS",{enumerable:!0,get:function(){return g.OPS}}),Object.defineProperty(I,"PDFDataRangeTransport",{enumerable:!0,get:function(){return A.PDFDataRangeTransport}}),Object.defineProperty(I,"PDFDateString",{enumerable:!0,get:function(){return C.PDFDateString}}),Object.defineProperty(I,"PDFWorker",{enumerable:!0,get:function(){return A.PDFWorker}}),Object.defineProperty(I,"PasswordResponses",{enumerable:!0,get:function(){return g.PasswordResponses}}),Object.defineProperty(I,"PermissionFlag",{enumerable:!0,get:function(){return g.PermissionFlag}}),Object.defineProperty(I,"PixelsPerInch",{enumerable:!0,get:function(){return C.PixelsPerInch}}),Object.defineProperty(I,"PromiseCapability",{enumerable:!0,get:function(){return g.PromiseCapability}}),Object.defineProperty(I,"RenderingCancelledException",{enumerable:!0,get:function(){return C.RenderingCancelledException}}),Object.defineProperty(I,"SVGGraphics",{enumerable:!0,get:function(){return a.SVGGraphics}}),Object.defineProperty(I,"UnexpectedResponseException",{enumerable:!0,get:function(){return g.UnexpectedResponseException}}),Object.defineProperty(I,"Util",{enumerable:!0,get:function(){return g.Util}}),Object.defineProperty(I,"VerbosityLevel",{enumerable:!0,get:function(){return g.VerbosityLevel}}),Object.defineProperty(I,"XfaLayer",{enumerable:!0,get:function(){return w.XfaLayer}}),Object.defineProperty(I,"build",{enumerable:!0,get:function(){return A.build}}),Object.defineProperty(I,"createValidAbsoluteUrl",{enumerable:!0,get:function(){return g.createValidAbsoluteUrl}}),Object.defineProperty(I,"getDocument",{enumerable:!0,get:function(){return A.getDocument}}),Object.defineProperty(I,"getFilenameFromUrl",{enumerable:!0,get:function(){return C.getFilenameFromUrl}}),Object.defineProperty(I,"getPdfFilenameFromUrl",{enumerable:!0,get:function(){return C.getPdfFilenameFromUrl}}),Object.defineProperty(I,"getXfaPageViewport",{enumerable:!0,get:function(){return C.getXfaPageViewport}}),Object.defineProperty(I,"isDataScheme",{enumerable:!0,get:function(){return C.isDataScheme}}),Object.defineProperty(I,"isPdfFile",{enumerable:!0,get:function(){return C.isPdfFile}}),Object.defineProperty(I,"loadScript",{enumerable:!0,get:function(){return C.loadScript}}),Object.defineProperty(I,"normalizeUnicode",{enumerable:!0,get:function(){return g.normalizeUnicode}}),Object.defineProperty(I,"renderTextLayer",{enumerable:!0,get:function(){return l.renderTextLayer}}),Object.defineProperty(I,"setLayerDimensions",{enumerable:!0,get:function(){return C.setLayerDimensions}}),Object.defineProperty(I,"shadow",{enumerable:!0,get:function(){return g.shadow}}),Object.defineProperty(I,"updateTextLayer",{enumerable:!0,get:function(){return l.updateTextLayer}}),Object.defineProperty(I,"version",{enumerable:!0,get:function(){return A.version}});var g=__w_pdfjs_require__(1),A=__w_pdfjs_require__(2),C=__w_pdfjs_require__(6),l=__w_pdfjs_require__(26),G=__w_pdfjs_require__(27),B=__w_pdfjs_require__(5),k=__w_pdfjs_require__(30),n=__w_pdfjs_require__(14),a=__w_pdfjs_require__(33),w=__w_pdfjs_require__(32)})(),__webpack_exports__})())})(pdf);var pdfExports=pdf.exports;const pdf_viewer="";var _=Object.defineProperty,$=(I,g,A)=>g in I?_(I,g,{enumerable:!0,configurable:!0,writable:!0,value:A}):I[g]=A,x=(I,g,A)=>($(I,typeof g!="symbol"?g+"":g,A),A);const E="internal-link",gI="link",CI="file-attachment",AI="form-text",ZI="form-select",GI="form-checkbox",lI="form-radio",bI="form-button",dI=["click","dblclick","mouseover","input","change"];function K(I,g,A){const C=[];if(A)for(const l of A)l[I]===g&&C.push(l);return C}function H(I,g){return{type:I,data:g}}function h(I,g){switch(I.type){case"textarea":case"text":return H(AI,{fieldName:I.name,value:I.value});case"select-one":case"select-multiple":const A=[];for(const l of I.options)A.push({value:l.value,label:l.label});const C=[];for(const l of I.selectedOptions)C.push({value:l.value,label:l.label});return H(ZI,{fieldName:I.name,value:C,options:A});case"checkbox":return H(GI,{fieldName:I.name,checked:I.checked});case"radio":return H(lI,{fieldName:I.name,...g});case"button":return H(bI,{fieldName:I.name,...g})}}function cI(I){return H(CI,I.file)}async function mI(I,g){if(I.dest){if(typeof I.dest=="string")return H(E,{referencedPage:Number(I.dest.substring(1,I.dest.length)),offset:null});{const A=await g.getPageIndex(I.dest[0]);return H(E,{referencedPage:A+1,offset:{left:I.dest[2],bottom:I.dest[3]}})}}else if(I.url)return H(gI,{url:I.url,unsafeUrl:I.unsafeUrl})}function WI(I,g,A){var C;let l=I.target.parentNode;if(l.tagName==="DIV"&&(l=l.firstChild),l.className==="linkAnnotation"&&I.type==="click"){const G=(C=l.dataset)==null?void 0:C.annotationId;if(G)return mI(K("id",G,A)[0],g)}else if(["popupAnnotation","textAnnotation","fileAttachmentAnnotation"].includes(l.className)){for(const G of l.getElementsByTagName("span")){let B=G.textContent;const k=JSON.parse(G.dataset.l10nArgs??"{}");if(B)for(const n in k)B=B.replace(`{{${n}}}`,k[n]);G.textContent=B}if(l.className==="fileAttachmentAnnotation"&&I.type==="dblclick"){const G=l.dataset.annotationId;if(G)return cI(K("id",G,A)[0])}}else if(l.className==="textWidgetAnnotation"&&I.type==="input"){let G=l.getElementsByTagName("input")[0];return G||(G=l.getElementsByTagName("textarea")[0]),h(G)}else{if(l.className==="choiceWidgetAnnotation"&&I.type==="input")return h(l.getElementsByTagName("select")[0]);if(l.className==="buttonWidgetAnnotation checkBox"&&I.type==="change")return h(l.getElementsByTagName("input")[0]);if(l.className==="buttonWidgetAnnotation radioButton"&&I.type==="change"){const G=l.dataset.annotationId;if(G){const B=K("id",G,A)[0],k=[];for(const n of K("fieldName",B.fieldName,A))n.buttonValue&&k.push(n.buttonValue);return h(l.getElementsByTagName("input")[0],{value:B.buttonValue,defaultValue:B.fieldValue,options:k})}}else if(l.className==="linkAnnotation buttonWidgetAnnotation pushButton"&&I.type==="click"){const G=l.dataset.annotationId;if(G){const B=K("id",G,A)[0];return B.resetForm?h({name:B.fieldName,type:"button"},{actions:B.actions,reset:!0}):h({name:B.fieldName,type:"button"},{actions:B.actions,reset:!1})}}}}class BI{constructor(){x(this,"externalLinkEnabled"),this.externalLinkEnabled=!0}get pagesCount(){return 0}get page(){return 0}set page(g){}get rotation(){return 0}set rotation(g){}get isInPresentationMode(){return!1}async goToDestination(g){}goToPage(g){}addLinkAttributes(g,A,C=!1){}getDestinationHash(g){return"#"}getAnchorUrl(g){return"#"}setHash(g){}executeNamedAction(g){}executeSetOCGState(g){}cachePageRef(g,A){}}const wI=defineComponent({__name:"AnnotationLayer",props:{page:{},viewport:{},document:{},filter:{},map:{type:Function}},emits:["annotation"],setup(I,{emit:g}){const A=I,C=ref(),l=ref();function G(w){const L=WI(w,A.document,l.value);Promise.resolve(L).then(Q=>{Q&&g("annotation",Q)})}async function B(){var w;return await((w=toRaw(A.document))==null?void 0:w.getFieldObjects())}async function k(){var w;return await((w=toRaw(A.document))==null?void 0:w.hasJSActions())}async function n(){const w=A.page;let L=await(w==null?void 0:w.getAnnotations());if(A.filter){const Q=A.filter;L=L.filter(S=>{const y=S.subtype,M=S.fieldType?`${y}.${S.fieldType}`:null;return(Q==null?void 0:Q.includes(y))||M!==null&&(Q==null?void 0:Q.includes(M))})}if(A.map&&typeof A.map=="function"){const Q=[];for(const S of L){const y=A.map(S);y&&Q.push(y)}L=Q}return L}async function a(){var w,L;(L=(w=C.value).replaceChildren)==null||L.call(w);const Q=toRaw(A.document),S=A.page,y=A.viewport;l.value=await n();const M=new Map([]);for(const z of l.value)if(z.subtype==="Widget"&&z.fieldType==="Btn"&&z.pushButton){const O=z.rect[2]-z.rect[0],D=z.rect[3]-z.rect[1],R=document.createElement("canvas");R.setAttribute("width",(O*y.scale).toString()),R.setAttribute("height",(D*y.scale).toString()),M.set(z.id,R)}const F={annotations:l.value,viewport:y==null?void 0:y.clone({dontFlip:!0}),linkService:new BI,annotationCanvasMap:M,div:C.value,annotationStorage:Q.annotationStorage,renderForms:!0,page:S,enableScripting:!0,hasJSActions:await k(),fieldObjects:await B(),downloadManager:null};pdfExports.AnnotationLayer.render(F);for(const z of dI)C.value.addEventListener(z,G)}return watch(()=>A.viewport,()=>{A.page&&A.viewport&&C.value&&a()}),onMounted(()=>{A.page&&A.viewport&&C.value&&a()}),(w,L)=>(openBlock(),createElementBlock("div",{ref_key:"layer",ref:C,class:"annotationLayer",style:{display:"block"}},null,512))}}),YI=defineComponent({__name:"TextLayer",props:{page:{},viewport:{}},setup(I){const g=I,A=ref(),C=ref();function l(){var k,n;(n=(k=A.value).replaceChildren)==null||n.call(k);const a=g.page,w=g.viewport,L={textContentSource:a==null?void 0:a.streamTextContent({includeMarkedContent:!0,disableNormalization:!0}),viewport:w,container:A.value,isOffscreenCanvasSupported:!0,textDivs:[],textDivProperties:new WeakMap};pdfExports.renderTextLayer(L).promise.then(()=>{var Q;const S=document.createElement("div");S.className="endOfContent",(Q=A.value)==null||Q.appendChild(S),C.value=S})}function G(){C.value&&C.value.classList.add("active")}function B(){C.value&&C.value.classList.remove("active")}return watch(()=>g.viewport,k=>{g.page&&g.viewport&&A.value&&l()}),onMounted(()=>{g.page&&g.viewport&&A.value&&l()}),(k,n)=>(openBlock(),createElementBlock("div",{ref_key:"layer",ref:A,class:"textLayer",style:{display:"block"},onMousedown:G,onMouseup:B},null,544))}}),iI=createBaseVNode("canvas",{dir:"ltr",style:{display:"block"},role:"main"},null,-1),e=defineComponent({__name:"VuePDF",props:{pdf:{},page:{default:1},scale:{default:1},rotation:{},fitParent:{type:Boolean},textLayer:{type:Boolean},annotationLayer:{type:Boolean},annotationsFilter:{},annotationsMap:{}},emits:["annotation","loaded"],setup(I,{expose:g,emit:A}){const C=I,l=ref(),G=ref(),B=ref(!1);let k;const n=ref(null),a=ref(null),w=ref(null);function L(t){A("loaded",t)}function Q(t){A("annotation",t)}function S(t){if(!(typeof t=="number"&&t%90===0))return 0;const d=t/90;return d>4?S(t-360):d<0?S(t+360):t}function y(t){let d=C.scale;if(C.fitParent){const b=l.value.parentNode.clientWidth,u=t.getViewport({scale:1}).width;d=b/u}return d}function M(){var t;let d=null;return(t=l.value)==null||t.childNodes.forEach(b=>{b.tagName==="CANVAS"&&(d=b)}),d}function F(t){var d;let b;const u=M();return u&&(u==null?void 0:u.getAttribute("role"))==="main"?b=u:(b=document.createElement("canvas"),b.style.display="block",b.setAttribute("dir","ltr")),b.width=t.width,b.height=t.height,b.style.width=`${t.width}px`,b.style.height=`${t.height}px`,(d=l.value)==null||d.style.setProperty("--scale-factor",`${t.scale}`),G.value.style.width=`${t.width}px`,G.value.style.height=`${t.height}px`,B.value=!0,b}function z(){k&&k.cancel()}function O(t){var d;(d=toRaw(n.value))==null||d.getPage(t).then(b=>{var u;z();const m=b.getViewport(),J={scale:y(b),rotation:S((C.rotation||0)+m.rotation)},r=b.getViewport(J),XI=M(),SI=F(r),kI={canvasContext:SI.getContext("2d"),viewport:r,annotationMode:pdfExports.AnnotationMode.ENABLE_FORMS};(SI==null?void 0:SI.getAttribute("role"))!=="main"?XI&&((u=l.value)==null||u.replaceChild(SI,XI)):SI.removeAttribute("role"),a.value=b,w.value=r,k=b.render(kI),k.promise.then(()=>{B.value=!1,L(w.value)}).catch(()=>{})})}function D(t){t.promise.then(async d=>{n.value=d,O(C.page)})}watch(()=>C.pdf,t=>{t!==void 0&&D(t)}),watch(()=>[C.scale,C.rotation,C.page],()=>{O(C.page)}),onMounted(()=>{C.pdf!==void 0&&D(C.pdf)});function R(){O(C.page)}function q(){z()}function II(){const t=toRaw(n.value);return t==null?void 0:t.annotationStorage}return g({reload:R,cancel:q,getAnnotationStorage:II}),(t,d)=>(openBlock(),createElementBlock("div",{ref_key:"container",ref:l,style:{position:"relative",display:"block",overflow:"hidden"}},[iI,withDirectives(createVNode(YI,{page:a.value,viewport:w.value},null,8,["page","viewport"]),[[vShow,t.textLayer]]),withDirectives(createVNode(wI,{page:a.value,viewport:w.value,document:n.value,filter:t.annotationsFilter,map:t.annotationsMap,onAnnotation:d[0]||(d[0]=b=>Q(b))},null,8,["page","viewport","document","filter","map"]),[[vShow,t.annotationLayer]]),withDirectives(createBaseVNode("div",{ref_key:"loadingLayer",ref:G,style:{display:"block",position:"absolute"}},[renderSlot(t.$slots,"default")],512),[[vShow,B.value]])],512))}}),VI="data:application/javascript;base64,";pdfExports.GlobalWorkerOptions.workerSrc=VI;function RI(I,g={onProgress:void 0,onPassword:void 0,onError:void 0,password:""}){const A=shallowRef(),C=shallowRef(0),l=shallowRef({}),G=pdfExports.getDocument(I);if(g.onProgress&&(G.onProgress=g.onProgress),g.onPassword)G.onPassword=g.onPassword;else if(g.password){const B=(k,n)=>{k(g.password??"")};G.onPassword=B}return G.promise.then(async B=>{A.value=B.loadingTask,C.value=B.numPages;const k=await B.getMetadata(),n=await B.getAttachments(),a=await B.getJavaScript();l.value={metadata:k,attachments:n,javascript:a}},B=>{typeof g.onError=="function"&&g.onError(B)}),{pdf:A,pages:C,info:l}}const Research_vue_vue_type_style_index_0_lang="",_hoisted_1$3=createBaseVNode("h2",null,"研究紹介",-1),_hoisted_2$1=createBaseVNode("h3",null,"概要",-1),_hoisted_3=createBaseVNode("p",null,"近年，教育現場ではさまざまな学習支援システムを通して，学生の学びの過程や教材スライドなどが大規模な教育データとして蓄積されている．これらの教育データ間のつながりを基にした研究として，講義動画や教材スライドといった複数形式の教材推薦やシラバス間の情報を紐付けた履修支援ダッシュボード開発などがあり，関連度による教育データ連携は幅広く行われている．しかしながら，連携の基準が様々であり明確な基準がないことから，それぞれの連携の持つ意味が異なるため，データ連携が限定的であるという問題がある．そこで自身の研究では，多くの教育データが要素として持つ内容に着目して，それぞれのデータを同一の特徴空間で表現しその類似度により連携を行うことで，システム間のデータのつながりに基づく横断的な学習分析を支援することを目的としている．",-1),_hoisted_4=createBaseVNode("h3",null,"研究スライド",-1),_hoisted_5={class:"pdf-viewer"},_sfc_main$3={__name:"Research",setup(I){const{pdf:g,pages:A,info:C}=RI("research.pdf"),l=ref(1),G=()=>{l.value+=1},B=()=>{l.value-=1};return(k,n)=>(openBlock(),createElementBlock(Fragment,null,[_hoisted_1$3,_hoisted_2$1,_hoisted_3,_hoisted_4,createBaseVNode("div",_hoisted_5,[createVNode(unref(e),{pdf:unref(g),page:l.value,"fit-parent":""},null,8,["pdf","page"])]),createBaseVNode("button",{onClick:B},"Prev Page"),createBaseVNode("button",{onClick:G},"Next Page")],64))}},_sfc_main$2={},_hoisted_1$2=createStaticVNode('<h2>Works</h2><ul><h3>自然言語処理による教育データ間の類似度計算</h3><p>修士研究で実装．教材データや学生の感想など幅広い教育データのテキストから特徴量を抽出し，コサイン類似度を計算． 類似度をもとにデータの紐付けをおこなった．特徴量としてTF-IDF，BM25，Sentence BERT，T5などを用いた． <br>使用言語：Python，SQL，Cypher</p></ul><ul><h3>Webサイトのスクレイピング</h3><p>インターン課題で実装．食べログサイト「ぐるなび」にて，特定のキーワードで検索した際の 結果(店名，住所，電話番号など)をBeautifulSoupによりスクレイピングし，その結果を出力． <br>使用言語：Python <br>環境：Docker <br><a href="https://github.com/souch456/Final_Answer">githubリンク</a></p></ul><ul><h3>Amazon Aurora Serverlessのスケーリングに関する調査</h3><p>インターンで取り組んだ．Aurora Serverlessにおける負荷分散の仕組みとして，インスタンスの容量(性能)を負荷に応じて 自動的に調整するスケーリングと呼ばれる機能がある．それが具体的にどの程度の負荷をトリガーにして行われるのかを様々な負荷テスト を通して検証，考察した． <br>使用言語：Python <br>環境：AWS </p></ul>',4);function _sfc_render$1(I,g){return _hoisted_1$2}const Works=_export_sfc(_sfc_main$2,[["render",_sfc_render$1]]),_sfc_main$1={},_hoisted_1$1=createBaseVNode("h2",null,"Contact",-1),_hoisted_2=createBaseVNode("p",null,[createTextVNode("閲覧ありがとうございました．もしコメント等ありましたらお気軽にご連絡ください． "),createBaseVNode("br"),createTextVNode("メールアドレス：soimatsuo456@gmail.com")],-1);function _sfc_render(I,g){return openBlock(),createElementBlock(Fragment,null,[_hoisted_1$1,_hoisted_2],64)}const Contact=_export_sfc(_sfc_main$1,[["render",_sfc_render]]),App_vue_vue_type_style_index_0_scoped_7af45faf_lang="",_withScopeId=I=>(pushScopeId("data-v-7af45faf"),I=I(),popScopeId(),I),_hoisted_1=_withScopeId(()=>createBaseVNode("h1",null,"ポートフォリオ",-1)),_sfc_main={__name:"App",setup(I){return(g,A)=>(openBlock(),createElementBlock(Fragment,null,[_hoisted_1,createVNode(Profile),createVNode(_sfc_main$3),createVNode(Works),createVNode(Contact)],64))}},App=_export_sfc(_sfc_main,[["__scopeId","data-v-7af45faf"]]);createApp(App).mount("#app");
